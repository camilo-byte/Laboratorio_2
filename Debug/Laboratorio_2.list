
Laboratorio_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007040  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001244  080071f0  080071f0  000171f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008434  08008434  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008434  08008434  00018434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800843c  0800843c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800843c  0800843c  0001843c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008440  08008440  00018440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000854  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008c4  200008c4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000135a4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022df  00000000  00000000  00033644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  00035928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000dc0  00000000  00000000  000367a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000256c6  00000000  00000000  00037568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011cc9  00000000  00000000  0005cc2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de98a  00000000  00000000  0006e8f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014d281  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004af0  00000000  00000000  0014d2d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080071d8 	.word	0x080071d8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080071d8 	.word	0x080071d8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <bcdToDec>:
uint8_t decToBcd(int val)
{
	return(uint8_t)((val/10*16)+(val%10));
}
int bcdToDec(uint8_t val)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	return (int)((val/16*10)+(val%16));
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	091b      	lsrs	r3, r3, #4
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	461a      	mov	r2, r3
 80005a6:	4613      	mov	r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	4413      	add	r3, r2
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	461a      	mov	r2, r3
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	f003 030f 	and.w	r3, r3, #15
 80005b6:	4413      	add	r3, r2
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr

080005c4 <Get_Time>:

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
}

void Get_Time(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 80005ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ce:	9302      	str	r3, [sp, #8]
 80005d0:	2307      	movs	r3, #7
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	463b      	mov	r3, r7
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2301      	movs	r3, #1
 80005da:	2200      	movs	r2, #0
 80005dc:	21d0      	movs	r1, #208	; 0xd0
 80005de:	481f      	ldr	r0, [pc, #124]	; (800065c <Get_Time+0x98>)
 80005e0:	f002 fb46 	bl	8002c70 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 80005e4:	783b      	ldrb	r3, [r7, #0]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ffd4 	bl	8000594 <bcdToDec>
 80005ec:	4603      	mov	r3, r0
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <Get_Time+0x9c>)
 80005f2:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 80005f4:	787b      	ldrb	r3, [r7, #1]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff ffcc 	bl	8000594 <bcdToDec>
 80005fc:	4603      	mov	r3, r0
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	4b17      	ldr	r3, [pc, #92]	; (8000660 <Get_Time+0x9c>)
 8000602:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8000604:	78bb      	ldrb	r3, [r7, #2]
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff ffc4 	bl	8000594 <bcdToDec>
 800060c:	4603      	mov	r3, r0
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <Get_Time+0x9c>)
 8000612:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 8000614:	78fb      	ldrb	r3, [r7, #3]
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ffbc 	bl	8000594 <bcdToDec>
 800061c:	4603      	mov	r3, r0
 800061e:	b2da      	uxtb	r2, r3
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <Get_Time+0x9c>)
 8000622:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 8000624:	793b      	ldrb	r3, [r7, #4]
 8000626:	4618      	mov	r0, r3
 8000628:	f7ff ffb4 	bl	8000594 <bcdToDec>
 800062c:	4603      	mov	r3, r0
 800062e:	b2da      	uxtb	r2, r3
 8000630:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <Get_Time+0x9c>)
 8000632:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 8000634:	797b      	ldrb	r3, [r7, #5]
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff ffac 	bl	8000594 <bcdToDec>
 800063c:	4603      	mov	r3, r0
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b07      	ldr	r3, [pc, #28]	; (8000660 <Get_Time+0x9c>)
 8000642:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 8000644:	79bb      	ldrb	r3, [r7, #6]
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff ffa4 	bl	8000594 <bcdToDec>
 800064c:	4603      	mov	r3, r0
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <Get_Time+0x9c>)
 8000652:	719a      	strb	r2, [r3, #6]
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	200002b4 	.word	0x200002b4
 8000660:	20000858 	.word	0x20000858

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b0ba      	sub	sp, #232	; 0xe8
 8000668:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066a:	f001 fb39 	bl	8001ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066e:	f000 fdf7 	bl	8001260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000672:	f000 ff47 	bl	8001504 <MX_GPIO_Init>
  MX_ETH_Init();
 8000676:	f000 fe5f 	bl	8001338 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800067a:	f000 feeb 	bl	8001454 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800067e:	f000 ff13 	bl	80014a8 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000682:	f000 fea7 	bl	80013d4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //Set_Time(10,26,2,4,8,12,22);
  RetargetInit(&huart3);
 8000686:	48c2      	ldr	r0, [pc, #776]	; (8000990 <main+0x32c>)
 8000688:	f000 fff0 	bl	800166c <RetargetInit>
  enum EStatesMain statesMain;
  flagEsc =1;
 800068c:	4bc1      	ldr	r3, [pc, #772]	; (8000994 <main+0x330>)
 800068e:	2201      	movs	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]
  printf("\x1b[2J"); //Clear the screen
 8000692:	48c1      	ldr	r0, [pc, #772]	; (8000998 <main+0x334>)
 8000694:	f004 fd62 	bl	800515c <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(flagEsc)
 8000698:	4bbe      	ldr	r3, [pc, #760]	; (8000994 <main+0x330>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d006      	beq.n	80006ae <main+0x4a>
	  {
		  flagEsc=0;
 80006a0:	4bbc      	ldr	r3, [pc, #752]	; (8000994 <main+0x330>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
		  statesMain = MAIN_INIT;
 80006a6:	2300      	movs	r3, #0
 80006a8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80006ac:	e7f4      	b.n	8000698 <main+0x34>
	  }else switch(statesMain)
 80006ae:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d1f0      	bne.n	8000698 <main+0x34>
	  {
	  	  case MAIN_INIT:
	  	  Get_Time();
 80006b6:	f7ff ff85 	bl	80005c4 <Get_Time>
	  	  int band_menu=0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  	  int band_impresion;
	  	  	  	  printf("\r\nMenu principal, por favor seleccione la opcion de que desea realizar");
 80006c0:	48b6      	ldr	r0, [pc, #728]	; (800099c <main+0x338>)
 80006c2:	f004 fd4b 	bl	800515c <iprintf>
	  	  	  	  printf("\r\nAyuda General sistema: 1 ");
 80006c6:	48b6      	ldr	r0, [pc, #728]	; (80009a0 <main+0x33c>)
 80006c8:	f004 fd48 	bl	800515c <iprintf>
	  	  	  	  printf("\r\nAyuda detallada: 2 ");
 80006cc:	48b5      	ldr	r0, [pc, #724]	; (80009a4 <main+0x340>)
 80006ce:	f004 fd45 	bl	800515c <iprintf>
	  	  	  	  printf("\r\nSistema control de led a frecuencia: 3 ");
 80006d2:	48b5      	ldr	r0, [pc, #724]	; (80009a8 <main+0x344>)
 80006d4:	f004 fd42 	bl	800515c <iprintf>
	  	  	  	  printf("\r\nSecuencia pseudoaleatorias: 4 ");
 80006d8:	48b4      	ldr	r0, [pc, #720]	; (80009ac <main+0x348>)
 80006da:	f004 fd3f 	bl	800515c <iprintf>
	  	  	  	  printf("\r\nConfiguracion hora y fecha: 5 ");
 80006de:	48b4      	ldr	r0, [pc, #720]	; (80009b0 <main+0x34c>)
 80006e0:	f004 fd3c 	bl	800515c <iprintf>
	  	  	  	  printf("\r\nSensor de temperatura: 6 ");
 80006e4:	48b3      	ldr	r0, [pc, #716]	; (80009b4 <main+0x350>)
 80006e6:	f004 fd39 	bl	800515c <iprintf>
	  	  	  	  printf("\r\nRegistros de ejecución: 7 ");
 80006ea:	48b3      	ldr	r0, [pc, #716]	; (80009b8 <main+0x354>)
 80006ec:	f004 fd36 	bl	800515c <iprintf>
	  	  	  	  printf("\r\nHabilitacion/Deshabilitación de impresion interfaz serial: 8 ");
 80006f0:	48b2      	ldr	r0, [pc, #712]	; (80009bc <main+0x358>)
 80006f2:	f004 fd33 	bl	800515c <iprintf>
	  	  	  	  scanf("%s", seleccion);
 80006f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006fa:	4619      	mov	r1, r3
 80006fc:	48b0      	ldr	r0, [pc, #704]	; (80009c0 <main+0x35c>)
 80006fe:	f004 fd45 	bl	800518c <iscanf>
	  	  	  	  int menu = atoi(seleccion);
 8000702:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000706:	4618      	mov	r0, r3
 8000708:	f004 fcf2 	bl	80050f0 <atoi>
 800070c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

	  	  	  	  if(menu==1)
 8000710:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000714:	2b01      	cmp	r3, #1
 8000716:	d135      	bne.n	8000784 <main+0x120>
	  	  	  	  {
	  	  	  		  printf("\x1b[2J");
 8000718:	489f      	ldr	r0, [pc, #636]	; (8000998 <main+0x334>)
 800071a:	f004 fd1f 	bl	800515c <iprintf>
	  	  	  		  printf("\r\nOpcion 2 Ayuda detallada. \r\n ");
 800071e:	48a9      	ldr	r0, [pc, #676]	; (80009c4 <main+0x360>)
 8000720:	f004 fd1c 	bl	800515c <iprintf>
	  	  	  		  printf("\r\nEn esta opcion se selecciona la opcion de la que desea tener mayor informacion para poder uso de esta.\r\n ");
 8000724:	48a8      	ldr	r0, [pc, #672]	; (80009c8 <main+0x364>)
 8000726:	f004 fd19 	bl	800515c <iprintf>
	  	  	  		  printf("\r\nOpcion 3 Sistema control de led a frecuencia.\r\n ");
 800072a:	48a8      	ldr	r0, [pc, #672]	; (80009cc <main+0x368>)
 800072c:	f004 fd16 	bl	800515c <iprintf>
	  	  	  		  printf("\r\nEste sistema lo que hace es realizar el encendido y apagado de un led respecto a la frecuencia que desee escoger el usuario"
 8000730:	48a7      	ldr	r0, [pc, #668]	; (80009d0 <main+0x36c>)
 8000732:	f004 fd13 	bl	800515c <iprintf>
	  	  	  				  " siempre y cuando esta se encuentre en el intervalo entre 0.1 y 10 Hz.\r\n ");
	  	  	  		  printf("\r\nOpcion 4 Secuencia pseudaleatoria.\r\n ");
 8000736:	48a7      	ldr	r0, [pc, #668]	; (80009d4 <main+0x370>)
 8000738:	f004 fd10 	bl	800515c <iprintf>
	  	  	  		  printf("\r\nEsta opcion es para inciar una secuencia pseudoaleatoria con dos terminos de realimentacion, la cual se podra realizar para "
 800073c:	48a6      	ldr	r0, [pc, #664]	; (80009d8 <main+0x374>)
 800073e:	f004 fd0d 	bl	800515c <iprintf>
	  	  	  				  "tamaños de semilla  entre 4 y 32 bits.\r\n ");
	  	  	  		  printf("\r\nOpcion 5 Configuracion hora y fecha.\r\n ");
 8000742:	48a6      	ldr	r0, [pc, #664]	; (80009dc <main+0x378>)
 8000744:	f004 fd0a 	bl	800515c <iprintf>
	  	  	  		  printf("\r\nEsta opcion permite al usuario modificar fecha y hora, para poder realizar el registro correcto de las ejecuciones realizadas"
 8000748:	48a5      	ldr	r0, [pc, #660]	; (80009e0 <main+0x37c>)
 800074a:	f004 fd07 	bl	800515c <iprintf>
	  	  	  				"en el sistema.\r\n ");
	  	  	  		  printf("\r\nOpcion 6 Sensor de temperatura.\r\n ");
 800074e:	48a5      	ldr	r0, [pc, #660]	; (80009e4 <main+0x380>)
 8000750:	f004 fd04 	bl	800515c <iprintf>
	  	  	  		  printf("\r\nEn esta opcion se puede observar la temperatura ambiente en donde se encuentra el sistema.\r\n ");
 8000754:	48a4      	ldr	r0, [pc, #656]	; (80009e8 <main+0x384>)
 8000756:	f004 fd01 	bl	800515c <iprintf>

	  	  	  		  printf("\r\nOpcion 7 Registro de ejecucion.\r\n ");
 800075a:	48a4      	ldr	r0, [pc, #656]	; (80009ec <main+0x388>)
 800075c:	f004 fcfe 	bl	800515c <iprintf>
	  	  	  		  printf("\r\nEn esta opcion encuentra el registro de los ultimos procesos de ejecucion realizados.\r\n ");
 8000760:	48a3      	ldr	r0, [pc, #652]	; (80009f0 <main+0x38c>)
 8000762:	f004 fcfb 	bl	800515c <iprintf>

	  	  	  		  printf("\r\nOpcion 8 Habilitacion de impresion interfaz serial.\r\n ");
 8000766:	48a3      	ldr	r0, [pc, #652]	; (80009f4 <main+0x390>)
 8000768:	f004 fcf8 	bl	800515c <iprintf>
	  	  	  		  printf("\r\nEn esta opcion se puede escoger si se desea observar los valores de la secuencia pseudoaleatoria o no.\r\n ");
 800076c:	48a2      	ldr	r0, [pc, #648]	; (80009f8 <main+0x394>)
 800076e:	f004 fcf5 	bl	800515c <iprintf>
	  	  	  		  scanf("%s",next);
 8000772:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000776:	4619      	mov	r1, r3
 8000778:	4891      	ldr	r0, [pc, #580]	; (80009c0 <main+0x35c>)
 800077a:	f004 fd07 	bl	800518c <iscanf>

	  	  	  		  band_menu=1;
 800077e:	2301      	movs	r3, #1
 8000780:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

	  	  	  	  }
	  	  	  	  if(menu==2)
 8000784:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000788:	2b02      	cmp	r3, #2
 800078a:	f040 80ac 	bne.w	80008e6 <main+0x282>
	  	  	  	  {
	  	  	  		  printf("\x1b[2J");
 800078e:	4882      	ldr	r0, [pc, #520]	; (8000998 <main+0x334>)
 8000790:	f004 fce4 	bl	800515c <iprintf>
	  	  	  		  printf("\r\nSeleccione de cual opcion quiere tener mas información ");
 8000794:	4899      	ldr	r0, [pc, #612]	; (80009fc <main+0x398>)
 8000796:	f004 fce1 	bl	800515c <iprintf>
	  	  	  		  printf("\r\nSistema control de led a frecuencia: 1 ");
 800079a:	4899      	ldr	r0, [pc, #612]	; (8000a00 <main+0x39c>)
 800079c:	f004 fcde 	bl	800515c <iprintf>
	  	  	  		  printf("\r\nSecuencia pseudoaleatorias: 2 ");
 80007a0:	4898      	ldr	r0, [pc, #608]	; (8000a04 <main+0x3a0>)
 80007a2:	f004 fcdb 	bl	800515c <iprintf>
	  	  	  		  printf("\r\nConfiguracion hora y fecha: 3 ");
 80007a6:	4898      	ldr	r0, [pc, #608]	; (8000a08 <main+0x3a4>)
 80007a8:	f004 fcd8 	bl	800515c <iprintf>
	  	  	  		  printf("\r\nSensor de temperatura: 4 ");
 80007ac:	4897      	ldr	r0, [pc, #604]	; (8000a0c <main+0x3a8>)
 80007ae:	f004 fcd5 	bl	800515c <iprintf>
	  	  	  		  printf("\r\nRegistros de ejecución: 5 ");
 80007b2:	4897      	ldr	r0, [pc, #604]	; (8000a10 <main+0x3ac>)
 80007b4:	f004 fcd2 	bl	800515c <iprintf>
	  	  	  		  printf("\r\nHabilitacion/Deshabilitación de impresion interfaz serial: 6 ");
 80007b8:	4896      	ldr	r0, [pc, #600]	; (8000a14 <main+0x3b0>)
 80007ba:	f004 fccf 	bl	800515c <iprintf>
	  	  	  		  scanf("%s",opcion);
 80007be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c2:	4619      	mov	r1, r3
 80007c4:	487e      	ldr	r0, [pc, #504]	; (80009c0 <main+0x35c>)
 80007c6:	f004 fce1 	bl	800518c <iscanf>
	  	  	  		  int help = atoi(opcion);
 80007ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ce:	4618      	mov	r0, r3
 80007d0:	f004 fc8e 	bl	80050f0 <atoi>
 80007d4:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	  	  	  		  if(help==1)
 80007d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d111      	bne.n	8000804 <main+0x1a0>
	  	  	  		  {
	  	  	  			  printf("\x1b[2J");
 80007e0:	486d      	ldr	r0, [pc, #436]	; (8000998 <main+0x334>)
 80007e2:	f004 fcbb 	bl	800515c <iprintf>
	  	  	  			  printf("\r\nSistema control de led a frecuencia\r\n ");
 80007e6:	488c      	ldr	r0, [pc, #560]	; (8000a18 <main+0x3b4>)
 80007e8:	f004 fcb8 	bl	800515c <iprintf>
	  	  	  			  printf("\r\nEn esta opcion tenemos unas frecuencias predeterminadas para escoger, aunque tambien se encuentra una opcion en la que podemos"
 80007ec:	488b      	ldr	r0, [pc, #556]	; (8000a1c <main+0x3b8>)
 80007ee:	f004 fcb5 	bl	800515c <iprintf>
	  	  	  					  "escribir un valor de frecuencia diferente a las que nos da el sistema, la unica condicion es que se encuentre en el rango de 0.1 a 10 Hz"
	  	  	  					  " de los contrario el sistema arrojara un error y nos dirigira al menu principal.\r\n ");
	  	  	  			  scanf("%s",next);
 80007f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007f6:	4619      	mov	r1, r3
 80007f8:	4871      	ldr	r0, [pc, #452]	; (80009c0 <main+0x35c>)
 80007fa:	f004 fcc7 	bl	800518c <iscanf>
	  	  	  			  band_menu=1;
 80007fe:	2301      	movs	r3, #1
 8000800:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  	  	  		  }
	  	  	  		  if(help==2)
 8000804:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000808:	2b02      	cmp	r3, #2
 800080a:	d111      	bne.n	8000830 <main+0x1cc>
	  	  	  		  {
	  	  	  			  printf("\x1b[2J");
 800080c:	4862      	ldr	r0, [pc, #392]	; (8000998 <main+0x334>)
 800080e:	f004 fca5 	bl	800515c <iprintf>
	  	  	  			  printf("\r\nSecuencia pseudaleatoria\r\n ");
 8000812:	4883      	ldr	r0, [pc, #524]	; (8000a20 <main+0x3bc>)
 8000814:	f004 fca2 	bl	800515c <iprintf>
	  	  	  			  printf("\r\nEn esta opcion usted puede ingresar un valor semilla que se encuentre entre 4 y 32 bits, el cual sera el inicio de la secuencia, ademas "
 8000818:	4882      	ldr	r0, [pc, #520]	; (8000a24 <main+0x3c0>)
 800081a:	f004 fc9f 	bl	800515c <iprintf>
	  	  	  					  "tiene la opcion de escoger las posiciones que se utilizaran para la implementacion de la xor y de estas obtener el bit de realimentacion "
	  	  	  					  "en la secuencia.\r\n ");
	  	  	  			  scanf("%s",next);
 800081e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000822:	4619      	mov	r1, r3
 8000824:	4866      	ldr	r0, [pc, #408]	; (80009c0 <main+0x35c>)
 8000826:	f004 fcb1 	bl	800518c <iscanf>
	  	  	  			  band_menu=1;
 800082a:	2301      	movs	r3, #1
 800082c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  	  	  		  }
	  	  	  		  if(help==3)
 8000830:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000834:	2b03      	cmp	r3, #3
 8000836:	d111      	bne.n	800085c <main+0x1f8>
	  	  	  		  {
	  	  	  			  printf("\x1b[2J");
 8000838:	4857      	ldr	r0, [pc, #348]	; (8000998 <main+0x334>)
 800083a:	f004 fc8f 	bl	800515c <iprintf>
	  	  	  			  printf("\r\nConfiguracion hora y fecha.\r\n ");
 800083e:	487a      	ldr	r0, [pc, #488]	; (8000a28 <main+0x3c4>)
 8000840:	f004 fc8c 	bl	800515c <iprintf>
	  	  	  			  printf("\r\nEn esta opcion usted puede ingresar a configurar la fecha y hora, ya sea porque se ha  desconfigurado el reloj o haya cambiado de locacion geografica.\r\n ");
 8000844:	4879      	ldr	r0, [pc, #484]	; (8000a2c <main+0x3c8>)
 8000846:	f004 fc89 	bl	800515c <iprintf>
	  	  	  			  scanf("%s",next);
 800084a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800084e:	4619      	mov	r1, r3
 8000850:	485b      	ldr	r0, [pc, #364]	; (80009c0 <main+0x35c>)
 8000852:	f004 fc9b 	bl	800518c <iscanf>
	  	  	  			  band_menu=1;
 8000856:	2301      	movs	r3, #1
 8000858:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  	  	  		  }
	  	  	  		  if(help==4)
 800085c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000860:	2b04      	cmp	r3, #4
 8000862:	d111      	bne.n	8000888 <main+0x224>
	  	  	  		  {
	  	  	  			  printf("\x1b[2J");
 8000864:	484c      	ldr	r0, [pc, #304]	; (8000998 <main+0x334>)
 8000866:	f004 fc79 	bl	800515c <iprintf>
	  	  	  			  printf("\r\nSensor de temperatura.\r\n ");
 800086a:	4871      	ldr	r0, [pc, #452]	; (8000a30 <main+0x3cc>)
 800086c:	f004 fc76 	bl	800515c <iprintf>
	  	  	  			  printf("\r\nEn esta opcion se puede observar en tiempo real la temperatura ambiente.\r\n ");
 8000870:	4870      	ldr	r0, [pc, #448]	; (8000a34 <main+0x3d0>)
 8000872:	f004 fc73 	bl	800515c <iprintf>
	  	  	  			  scanf("%s",next);
 8000876:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800087a:	4619      	mov	r1, r3
 800087c:	4850      	ldr	r0, [pc, #320]	; (80009c0 <main+0x35c>)
 800087e:	f004 fc85 	bl	800518c <iscanf>
	  	  	  			  band_menu=1;
 8000882:	2301      	movs	r3, #1
 8000884:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  	  	  		  }
	  	  	  		  if(help==5)
 8000888:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800088c:	2b05      	cmp	r3, #5
 800088e:	d111      	bne.n	80008b4 <main+0x250>
	  	  	  		  {
	  	  	  			  printf("\x1b[2J");
 8000890:	4841      	ldr	r0, [pc, #260]	; (8000998 <main+0x334>)
 8000892:	f004 fc63 	bl	800515c <iprintf>
	  	  	  			  printf("\r\nRegistro de ejecucion.\r\n ");
 8000896:	4868      	ldr	r0, [pc, #416]	; (8000a38 <main+0x3d4>)
 8000898:	f004 fc60 	bl	800515c <iprintf>
	  	  	  			  printf("\r\nEn esta opcion se pueden observar los parametros claves e inciales de las ultimas ejecuciones realizadas en el sistema.\r\n ");
 800089c:	4867      	ldr	r0, [pc, #412]	; (8000a3c <main+0x3d8>)
 800089e:	f004 fc5d 	bl	800515c <iprintf>
	  	  	  			  scanf("%s",next);
 80008a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008a6:	4619      	mov	r1, r3
 80008a8:	4845      	ldr	r0, [pc, #276]	; (80009c0 <main+0x35c>)
 80008aa:	f004 fc6f 	bl	800518c <iscanf>
	  	  	  			  band_menu=1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  	  	  		  }
	  	  	  		  if(help==6)
 80008b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80008b8:	2b06      	cmp	r3, #6
 80008ba:	d111      	bne.n	80008e0 <main+0x27c>
	  	  	  		  {
	  	  	  			  printf("\x1b[2J");
 80008bc:	4836      	ldr	r0, [pc, #216]	; (8000998 <main+0x334>)
 80008be:	f004 fc4d 	bl	800515c <iprintf>
	  	  	  			  printf("\r\nHabilitacion de impresion interfaz serial.\r\n ");
 80008c2:	485f      	ldr	r0, [pc, #380]	; (8000a40 <main+0x3dc>)
 80008c4:	f004 fc4a 	bl	800515c <iprintf>
	  	  	  			  printf("\r\nEn esta opcion se presenta la posibilidad de desactivar o activar la impresion de los datos de la opcion 4 de secuencia pseudaleatoria.\r\n ");
 80008c8:	485e      	ldr	r0, [pc, #376]	; (8000a44 <main+0x3e0>)
 80008ca:	f004 fc47 	bl	800515c <iprintf>
	  	  	  			  scanf("%s",next);
 80008ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008d2:	4619      	mov	r1, r3
 80008d4:	483a      	ldr	r0, [pc, #232]	; (80009c0 <main+0x35c>)
 80008d6:	f004 fc59 	bl	800518c <iscanf>
	  	  	  			  band_menu=1;
 80008da:	2301      	movs	r3, #1
 80008dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  	  	  		  }
	  	  	  		  band_menu=1;
 80008e0:	2301      	movs	r3, #1
 80008e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

	  	  	  	  }
	  	  	  	  if(menu==3)
 80008e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80008ea:	2b03      	cmp	r3, #3
 80008ec:	f040 8189 	bne.w	8000c02 <main+0x59e>
	  	  	  	  {
	  	  	  		  int cont=0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	  	  	  		  int var;
	  	  	  		  printf("\x1b[2J");
 80008f6:	4828      	ldr	r0, [pc, #160]	; (8000998 <main+0x334>)
 80008f8:	f004 fc30 	bl	800515c <iprintf>
	  	  	  		  printf("\r\nSeleccione la frecuencia deseada");
 80008fc:	4852      	ldr	r0, [pc, #328]	; (8000a48 <main+0x3e4>)
 80008fe:	f004 fc2d 	bl	800515c <iprintf>
	  	  	  		  printf("\r\n0.1 Hz: 1");
 8000902:	4852      	ldr	r0, [pc, #328]	; (8000a4c <main+0x3e8>)
 8000904:	f004 fc2a 	bl	800515c <iprintf>
	  	  	  		  printf("\r\n0.5 Hz: 2");
 8000908:	4851      	ldr	r0, [pc, #324]	; (8000a50 <main+0x3ec>)
 800090a:	f004 fc27 	bl	800515c <iprintf>
	  	  	  		  printf("\r\n1 Hz: 3");
 800090e:	4851      	ldr	r0, [pc, #324]	; (8000a54 <main+0x3f0>)
 8000910:	f004 fc24 	bl	800515c <iprintf>
	  	  	  		  printf("\r\n3 Hz: 4");
 8000914:	4850      	ldr	r0, [pc, #320]	; (8000a58 <main+0x3f4>)
 8000916:	f004 fc21 	bl	800515c <iprintf>
	  	  	  		  printf("\r\n5 Hz: 5");
 800091a:	4850      	ldr	r0, [pc, #320]	; (8000a5c <main+0x3f8>)
 800091c:	f004 fc1e 	bl	800515c <iprintf>
	  	  	  		  printf("\r\n7 Hz: 6");
 8000920:	484f      	ldr	r0, [pc, #316]	; (8000a60 <main+0x3fc>)
 8000922:	f004 fc1b 	bl	800515c <iprintf>
	  	  	  		  printf("\r\n9 Hz: 7");
 8000926:	484f      	ldr	r0, [pc, #316]	; (8000a64 <main+0x400>)
 8000928:	f004 fc18 	bl	800515c <iprintf>
	  	  	  		  printf("\r\n10 Hz: 8");
 800092c:	484e      	ldr	r0, [pc, #312]	; (8000a68 <main+0x404>)
 800092e:	f004 fc15 	bl	800515c <iprintf>
	  	  	  		  printf("\r\nOtra: 9");
 8000932:	484e      	ldr	r0, [pc, #312]	; (8000a6c <main+0x408>)
 8000934:	f004 fc12 	bl	800515c <iprintf>
	  	  	  		  scanf("%s",frecuencia);
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4619      	mov	r1, r3
 800093e:	4820      	ldr	r0, [pc, #128]	; (80009c0 <main+0x35c>)
 8000940:	f004 fc24 	bl	800518c <iscanf>

	  	  	  		  int dig = atoi(frecuencia);
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	4618      	mov	r0, r3
 800094a:	f004 fbd1 	bl	80050f0 <atoi>
 800094e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

	  	  	  		  if(dig==1)
 8000952:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000956:	2b01      	cmp	r3, #1
 8000958:	d114      	bne.n	8000984 <main+0x320>
	  	  	  		  {
	  	  	  			  while(cont<101)
 800095a:	e00c      	b.n	8000976 <main+0x312>
	  	  	  			  {
	  	  	  				  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800095c:	2180      	movs	r1, #128	; 0x80
 800095e:	4844      	ldr	r0, [pc, #272]	; (8000a70 <main+0x40c>)
 8000960:	f002 f827 	bl	80029b2 <HAL_GPIO_TogglePin>
	  	  	  				  HAL_Delay(10000);
 8000964:	f242 7010 	movw	r0, #10000	; 0x2710
 8000968:	f001 fa2c 	bl	8001dc4 <HAL_Delay>
	  	  	  				  cont++;
 800096c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000970:	3301      	adds	r3, #1
 8000972:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	  	  	  			  while(cont<101)
 8000976:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800097a:	2b64      	cmp	r3, #100	; 0x64
 800097c:	ddee      	ble.n	800095c <main+0x2f8>
	  	  	  			  }
	  	  	  			  band_menu=1;
 800097e:	2301      	movs	r3, #1
 8000980:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  	  	  		  }
	  	  	  		  if(dig==2)
 8000984:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000988:	2b02      	cmp	r3, #2
 800098a:	f040 8087 	bne.w	8000a9c <main+0x438>
	  	  	  		  {
	  	  	  			  while(cont<101)
 800098e:	e07e      	b.n	8000a8e <main+0x42a>
 8000990:	20000308 	.word	0x20000308
 8000994:	2000089e 	.word	0x2000089e
 8000998:	080071f0 	.word	0x080071f0
 800099c:	080071f8 	.word	0x080071f8
 80009a0:	08007240 	.word	0x08007240
 80009a4:	0800725c 	.word	0x0800725c
 80009a8:	08007274 	.word	0x08007274
 80009ac:	080072a0 	.word	0x080072a0
 80009b0:	080072c4 	.word	0x080072c4
 80009b4:	080072e8 	.word	0x080072e8
 80009b8:	08007304 	.word	0x08007304
 80009bc:	08007324 	.word	0x08007324
 80009c0:	08007368 	.word	0x08007368
 80009c4:	0800736c 	.word	0x0800736c
 80009c8:	0800738c 	.word	0x0800738c
 80009cc:	080073f8 	.word	0x080073f8
 80009d0:	0800742c 	.word	0x0800742c
 80009d4:	080074f4 	.word	0x080074f4
 80009d8:	0800751c 	.word	0x0800751c
 80009dc:	080075c8 	.word	0x080075c8
 80009e0:	080075f4 	.word	0x080075f4
 80009e4:	08007688 	.word	0x08007688
 80009e8:	080076b0 	.word	0x080076b0
 80009ec:	08007710 	.word	0x08007710
 80009f0:	08007738 	.word	0x08007738
 80009f4:	08007794 	.word	0x08007794
 80009f8:	080077d0 	.word	0x080077d0
 80009fc:	0800783c 	.word	0x0800783c
 8000a00:	08007878 	.word	0x08007878
 8000a04:	080078a4 	.word	0x080078a4
 8000a08:	080078c8 	.word	0x080078c8
 8000a0c:	080078ec 	.word	0x080078ec
 8000a10:	08007908 	.word	0x08007908
 8000a14:	08007928 	.word	0x08007928
 8000a18:	0800796c 	.word	0x0800796c
 8000a1c:	08007998 	.word	0x08007998
 8000a20:	08007af4 	.word	0x08007af4
 8000a24:	08007b14 	.word	0x08007b14
 8000a28:	08007c3c 	.word	0x08007c3c
 8000a2c:	08007c60 	.word	0x08007c60
 8000a30:	08007cfc 	.word	0x08007cfc
 8000a34:	08007d18 	.word	0x08007d18
 8000a38:	08007d68 	.word	0x08007d68
 8000a3c:	08007d84 	.word	0x08007d84
 8000a40:	08007e04 	.word	0x08007e04
 8000a44:	08007e34 	.word	0x08007e34
 8000a48:	08007ec4 	.word	0x08007ec4
 8000a4c:	08007ee8 	.word	0x08007ee8
 8000a50:	08007ef4 	.word	0x08007ef4
 8000a54:	08007f00 	.word	0x08007f00
 8000a58:	08007f0c 	.word	0x08007f0c
 8000a5c:	08007f18 	.word	0x08007f18
 8000a60:	08007f24 	.word	0x08007f24
 8000a64:	08007f30 	.word	0x08007f30
 8000a68:	08007f3c 	.word	0x08007f3c
 8000a6c:	08007f48 	.word	0x08007f48
 8000a70:	40020400 	.word	0x40020400
	  	  	  			  {
	  	  	  				  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000a74:	2180      	movs	r1, #128	; 0x80
 8000a76:	4891      	ldr	r0, [pc, #580]	; (8000cbc <main+0x658>)
 8000a78:	f001 ff9b 	bl	80029b2 <HAL_GPIO_TogglePin>
	  	  	  				  HAL_Delay(2000);
 8000a7c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a80:	f001 f9a0 	bl	8001dc4 <HAL_Delay>
	  	  	  				  cont++;
 8000a84:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000a88:	3301      	adds	r3, #1
 8000a8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	  	  	  			  while(cont<101)
 8000a8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000a92:	2b64      	cmp	r3, #100	; 0x64
 8000a94:	ddee      	ble.n	8000a74 <main+0x410>
	  	  	  			  }
	  	  	  			  band_menu=1;
 8000a96:	2301      	movs	r3, #1
 8000a98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  	  	  		  }
	  	  	  		  if(dig==3)
 8000a9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000aa0:	2b03      	cmp	r3, #3
 8000aa2:	d111      	bne.n	8000ac8 <main+0x464>
	  	  	  		  {
	  	  	  			  while(cont<101)
 8000aa4:	e00c      	b.n	8000ac0 <main+0x45c>
	  	  	  			  {
	  	  	  				  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000aa6:	2180      	movs	r1, #128	; 0x80
 8000aa8:	4884      	ldr	r0, [pc, #528]	; (8000cbc <main+0x658>)
 8000aaa:	f001 ff82 	bl	80029b2 <HAL_GPIO_TogglePin>
	  	  	  				  HAL_Delay(1000);
 8000aae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ab2:	f001 f987 	bl	8001dc4 <HAL_Delay>
	  	  	  				  cont++;
 8000ab6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000aba:	3301      	adds	r3, #1
 8000abc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	  	  	  			  while(cont<101)
 8000ac0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000ac4:	2b64      	cmp	r3, #100	; 0x64
 8000ac6:	ddee      	ble.n	8000aa6 <main+0x442>
	  	  	  			  }
	  	  	  		  }
	  	  	  		  if(dig==4)
 8000ac8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000acc:	2b04      	cmp	r3, #4
 8000ace:	d111      	bne.n	8000af4 <main+0x490>
	  	  	  		  {
	  	  	  			  while(cont<101)
 8000ad0:	e00c      	b.n	8000aec <main+0x488>
	  	  	  			  {
	  	  	  				  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000ad2:	2180      	movs	r1, #128	; 0x80
 8000ad4:	4879      	ldr	r0, [pc, #484]	; (8000cbc <main+0x658>)
 8000ad6:	f001 ff6c 	bl	80029b2 <HAL_GPIO_TogglePin>
	  	  	  				  HAL_Delay(333);
 8000ada:	f240 104d 	movw	r0, #333	; 0x14d
 8000ade:	f001 f971 	bl	8001dc4 <HAL_Delay>
	  	  	  				  cont++;
 8000ae2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	  	  	  			  while(cont<101)
 8000aec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000af0:	2b64      	cmp	r3, #100	; 0x64
 8000af2:	ddee      	ble.n	8000ad2 <main+0x46e>
	  	  	  			  }
	  	  	  		  }
	  	  	  		  if(dig==5)
 8000af4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000af8:	2b05      	cmp	r3, #5
 8000afa:	d110      	bne.n	8000b1e <main+0x4ba>
	  	  	  		  {
	  	  	  			  while(cont<101)
 8000afc:	e00b      	b.n	8000b16 <main+0x4b2>
	  	  	  			  {
	  	  	  				  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000afe:	2180      	movs	r1, #128	; 0x80
 8000b00:	486e      	ldr	r0, [pc, #440]	; (8000cbc <main+0x658>)
 8000b02:	f001 ff56 	bl	80029b2 <HAL_GPIO_TogglePin>
	  	  	  				  HAL_Delay(200);
 8000b06:	20c8      	movs	r0, #200	; 0xc8
 8000b08:	f001 f95c 	bl	8001dc4 <HAL_Delay>
	  	  	  				  cont++;
 8000b0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000b10:	3301      	adds	r3, #1
 8000b12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	  	  	  			  while(cont<101)
 8000b16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000b1a:	2b64      	cmp	r3, #100	; 0x64
 8000b1c:	ddef      	ble.n	8000afe <main+0x49a>
	  	  	  			  }
	  	  	  		  }
	  	  	  		  if(dig==6)
 8000b1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b22:	2b06      	cmp	r3, #6
 8000b24:	d110      	bne.n	8000b48 <main+0x4e4>
	  	  	  		  {
	  	  	  			  while(cont<101)
 8000b26:	e00b      	b.n	8000b40 <main+0x4dc>
	  	  	  			  {
	  	  	  				  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000b28:	2180      	movs	r1, #128	; 0x80
 8000b2a:	4864      	ldr	r0, [pc, #400]	; (8000cbc <main+0x658>)
 8000b2c:	f001 ff41 	bl	80029b2 <HAL_GPIO_TogglePin>
	  	  	  				  HAL_Delay(143);
 8000b30:	208f      	movs	r0, #143	; 0x8f
 8000b32:	f001 f947 	bl	8001dc4 <HAL_Delay>
	  	  	  				  cont++;
 8000b36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	  	  	  			  while(cont<101)
 8000b40:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000b44:	2b64      	cmp	r3, #100	; 0x64
 8000b46:	ddef      	ble.n	8000b28 <main+0x4c4>
	  	  	  			  }
	  	  	  		  }
	  	  	  		  if(dig==7)
 8000b48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b4c:	2b07      	cmp	r3, #7
 8000b4e:	d110      	bne.n	8000b72 <main+0x50e>
	  	  	  		  {
	  	  	  			  while(cont<101)
 8000b50:	e00b      	b.n	8000b6a <main+0x506>
	  	  	  			  {
	  	  	  				  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000b52:	2180      	movs	r1, #128	; 0x80
 8000b54:	4859      	ldr	r0, [pc, #356]	; (8000cbc <main+0x658>)
 8000b56:	f001 ff2c 	bl	80029b2 <HAL_GPIO_TogglePin>
	  	  	  				  HAL_Delay(111);
 8000b5a:	206f      	movs	r0, #111	; 0x6f
 8000b5c:	f001 f932 	bl	8001dc4 <HAL_Delay>
	  	  	  				  cont++;
 8000b60:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000b64:	3301      	adds	r3, #1
 8000b66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	  	  	  			  while(cont<101)
 8000b6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000b6e:	2b64      	cmp	r3, #100	; 0x64
 8000b70:	ddef      	ble.n	8000b52 <main+0x4ee>
	  	  	  			  }
	  	  	  		  }
	  	  	  		  if(dig==8)
 8000b72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000b76:	2b08      	cmp	r3, #8
 8000b78:	d110      	bne.n	8000b9c <main+0x538>
	  	  	  		  {
	  	  	  			  while(cont<101)
 8000b7a:	e00b      	b.n	8000b94 <main+0x530>
	  	  	  			  {
	  	  	  				  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	484f      	ldr	r0, [pc, #316]	; (8000cbc <main+0x658>)
 8000b80:	f001 ff17 	bl	80029b2 <HAL_GPIO_TogglePin>
	  	  	  				  HAL_Delay(100);
 8000b84:	2064      	movs	r0, #100	; 0x64
 8000b86:	f001 f91d 	bl	8001dc4 <HAL_Delay>
	  	  	  				  cont++;
 8000b8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000b8e:	3301      	adds	r3, #1
 8000b90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	  	  	  			  while(cont<101)
 8000b94:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000b98:	2b64      	cmp	r3, #100	; 0x64
 8000b9a:	ddef      	ble.n	8000b7c <main+0x518>
	  	  	  			  }
	  	  	  		  }
	  	  	  		  if(dig==9)
 8000b9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ba0:	2b09      	cmp	r3, #9
 8000ba2:	d12b      	bne.n	8000bfc <main+0x598>
	  	  	  		  {
	  	  	  			  printf("\r\nValor frecuencia entre 0.1 a 10 Hz");
 8000ba4:	4846      	ldr	r0, [pc, #280]	; (8000cc0 <main+0x65c>)
 8000ba6:	f004 fad9 	bl	800515c <iprintf>
	  	  	  			  scanf("%s",fre);
 8000baa:	463b      	mov	r3, r7
 8000bac:	4619      	mov	r1, r3
 8000bae:	4845      	ldr	r0, [pc, #276]	; (8000cc4 <main+0x660>)
 8000bb0:	f004 faec 	bl	800518c <iscanf>
	  	  	  			  int f = atoi (fre);
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f004 fa9a 	bl	80050f0 <atoi>
 8000bbc:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	  	  	  			  var = (1/f)*1000;
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000bc6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bce:	fb02 f303 	mul.w	r3, r2, r3
 8000bd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	  	  	  			  while(cont<101)
 8000bd6:	e00d      	b.n	8000bf4 <main+0x590>
	  	  	  			  {
	  	  	  				  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000bd8:	2180      	movs	r1, #128	; 0x80
 8000bda:	4838      	ldr	r0, [pc, #224]	; (8000cbc <main+0x658>)
 8000bdc:	f001 fee9 	bl	80029b2 <HAL_GPIO_TogglePin>
	  	  	  				  HAL_Delay(var);
 8000be0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000be4:	4618      	mov	r0, r3
 8000be6:	f001 f8ed 	bl	8001dc4 <HAL_Delay>
	  	  	  				  cont++;
 8000bea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000bee:	3301      	adds	r3, #1
 8000bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	  	  	  			  while(cont<101)
 8000bf4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000bf8:	2b64      	cmp	r3, #100	; 0x64
 8000bfa:	dded      	ble.n	8000bd8 <main+0x574>
	  	  	  			  }
	  	  	  		  }
	  	  	  		  band_menu=1;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  	  	  	  }
	  	  	  	  if(menu==4)
 8000c02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	f040 825f 	bne.w	80010ca <main+0xa66>
	  	  	  	  {
	  	  	  		  printf("\x1b[2J");
 8000c0c:	482e      	ldr	r0, [pc, #184]	; (8000cc8 <main+0x664>)
 8000c0e:	f004 faa5 	bl	800515c <iprintf>
	  	  	  		  int band=0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  	  	  		  printf("\r\nIngrese el valor semilla: ");
 8000c18:	482c      	ldr	r0, [pc, #176]	; (8000ccc <main+0x668>)
 8000c1a:	f004 fa9f 	bl	800515c <iprintf>
	  	  	       	  scanf("%s", semilla);
 8000c1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c22:	4619      	mov	r1, r3
 8000c24:	4827      	ldr	r0, [pc, #156]	; (8000cc4 <main+0x660>)
 8000c26:	f004 fab1 	bl	800518c <iscanf>
	  	  	  	 	  printf("\r\nEl valor semilla ingresado: %s\r\n ", semilla);
 8000c2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4827      	ldr	r0, [pc, #156]	; (8000cd0 <main+0x66c>)
 8000c32:	f004 fa93 	bl	800515c <iprintf>
	  	  	  	 	  printf("\r\nIngrese el tamaño para la realimentacion\r\n ");
 8000c36:	4827      	ldr	r0, [pc, #156]	; (8000cd4 <main+0x670>)
 8000c38:	f004 fa90 	bl	800515c <iprintf>
	  	  	  		  scanf("%s", tags);
 8000c3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c40:	4619      	mov	r1, r3
 8000c42:	4820      	ldr	r0, [pc, #128]	; (8000cc4 <main+0x660>)
 8000c44:	f004 faa2 	bl	800518c <iscanf>
	  	  	      	  printf("\r\nEl tamaño: %s\r\n ", tags);
 8000c48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4822      	ldr	r0, [pc, #136]	; (8000cd8 <main+0x674>)
 8000c50:	f004 fa84 	bl	800515c <iprintf>
	  	  	  	  	  int numref = atoi(tags);
 8000c54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f004 fa49 	bl	80050f0 <atoi>
 8000c5e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  	  	  	  	  int sem;
	  	  	  	  	  if(numref == 7)
 8000c62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000c66:	2b07      	cmp	r3, #7
 8000c68:	f040 80ba 	bne.w	8000de0 <main+0x77c>
	  	  	  		  {
	  	  	  	  		  int cont=0,cant=0,max=128,p_max=0,pos=0;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8000c72:	2300      	movs	r3, #0
 8000c74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8000c78:	2380      	movs	r3, #128	; 0x80
 8000c7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000c7e:	2300      	movs	r3, #0
 8000c80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000c82:	2300      	movs	r3, #0
 8000c84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	  	  	  	  		  uint8_t lfsr=atoi(semilla);
 8000c88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f004 fa2f 	bl	80050f0 <atoi>
 8000c92:	4603      	mov	r3, r0
 8000c94:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
	  	  	  		  	  uint8_t bit;
	  	  	  		  	  printf("\r\n#bits término de realimentación %s\r\n", tags);
 8000c98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480f      	ldr	r0, [pc, #60]	; (8000cdc <main+0x678>)
 8000ca0:	f004 fa5c 	bl	800515c <iprintf>
	  	  	  		  	  printf("\r\nValor inicial(semilla) %s\r\n", semilla);
 8000ca4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <main+0x67c>)
 8000cac:	f004 fa56 	bl	800515c <iprintf>
	  	  	  		  	  printf("\r\n#Valores esperados %d\r\n", max);
 8000cb0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8000cb4:	480b      	ldr	r0, [pc, #44]	; (8000ce4 <main+0x680>)
 8000cb6:	f004 fa51 	bl	800515c <iprintf>
	  	  	  		  	  while(cont<128)
 8000cba:	e065      	b.n	8000d88 <main+0x724>
 8000cbc:	40020400 	.word	0x40020400
 8000cc0:	08007f54 	.word	0x08007f54
 8000cc4:	08007368 	.word	0x08007368
 8000cc8:	080071f0 	.word	0x080071f0
 8000ccc:	08007f7c 	.word	0x08007f7c
 8000cd0:	08007f9c 	.word	0x08007f9c
 8000cd4:	08007fc0 	.word	0x08007fc0
 8000cd8:	08007ff0 	.word	0x08007ff0
 8000cdc:	08008004 	.word	0x08008004
 8000ce0:	08008030 	.word	0x08008030
 8000ce4:	08008050 	.word	0x08008050
	  	  	  		  	  {
	  	  	  		  	  	  bit = ((lfsr >> 0) ^ (lfsr >> 1)) & 1;
 8000ce8:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000cec:	085b      	lsrs	r3, r3, #1
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000cf4:	4053      	eors	r3, r2
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	  	  	  			  	  lfsr = (lfsr >> 1) | (bit << 6);
 8000d00:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000d04:	085b      	lsrs	r3, r3, #1
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	b25a      	sxtb	r2, r3
 8000d0a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8000d0e:	019b      	lsls	r3, r3, #6
 8000d10:	b25b      	sxtb	r3, r3
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b25b      	sxtb	r3, r3
 8000d16:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
	  	  	  		  	  	  cont++;
 8000d1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000d1e:	3301      	adds	r3, #1
 8000d20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	  	  	  		  	  	  if(band_impresion==1)
 8000d24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d105      	bne.n	8000d38 <main+0x6d4>
	  	  	  		  	  	  {
	  	  	  		  	  		  printf("\r\ndata: %x\r\n", lfsr);
 8000d2c:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000d30:	4619      	mov	r1, r3
 8000d32:	4898      	ldr	r0, [pc, #608]	; (8000f94 <main+0x930>)
 8000d34:	f004 fa12 	bl	800515c <iprintf>
	  	  	  		  	  	  }
	  	  	  		  	  	  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000d38:	2180      	movs	r1, #128	; 0x80
 8000d3a:	4897      	ldr	r0, [pc, #604]	; (8000f98 <main+0x934>)
 8000d3c:	f001 fe39 	bl	80029b2 <HAL_GPIO_TogglePin>
	  	  	  			  	  HAL_Delay(200);
 8000d40:	20c8      	movs	r0, #200	; 0xc8
 8000d42:	f001 f83f 	bl	8001dc4 <HAL_Delay>
	  	  	  		  		  cant++;
 8000d46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	  	  	  		  	  	  if(atoi(semilla)==lfsr)
 8000d50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d54:	4618      	mov	r0, r3
 8000d56:	f004 f9cb 	bl	80050f0 <atoi>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d107      	bne.n	8000d74 <main+0x710>
	  	  	  			  	  {
	  	  	  			  		  cont=129;
 8000d64:	2381      	movs	r3, #129	; 0x81
 8000d66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	  	  	  			  		  printf("\r\nCantidad: %d\r\n", cant);
 8000d6a:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8000d6e:	488b      	ldr	r0, [pc, #556]	; (8000f9c <main+0x938>)
 8000d70:	f004 f9f4 	bl	800515c <iprintf>
	  	  	  			  	  }
	  	  	  		  	 	  if(0X7F ==lfsr)
 8000d74:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000d78:	2b7f      	cmp	r3, #127	; 0x7f
 8000d7a:	d105      	bne.n	8000d88 <main+0x724>
	  	  	  			  	  {
	  	  	  			  		  pos=cant;
 8000d7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000d80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	  	  	    			  		  p_max=1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	67fb      	str	r3, [r7, #124]	; 0x7c
	  	  	  		  	  while(cont<128)
 8000d88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8000d8c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d8e:	ddab      	ble.n	8000ce8 <main+0x684>
	  	  	   			  	  }
	  	  	  			  }
	  	  	  		  	  printf("\r\n#bits término de realimentación %s\r\n", tags);
 8000d90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d94:	4619      	mov	r1, r3
 8000d96:	4882      	ldr	r0, [pc, #520]	; (8000fa0 <main+0x93c>)
 8000d98:	f004 f9e0 	bl	800515c <iprintf>
	  	  	  		  	  printf("\r\nValor inicial(semilla) %s\r\n", semilla);
 8000d9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000da0:	4619      	mov	r1, r3
 8000da2:	4880      	ldr	r0, [pc, #512]	; (8000fa4 <main+0x940>)
 8000da4:	f004 f9da 	bl	800515c <iprintf>
	  	  	  		  	  printf("\r\nNumero de valores calculados %d\r\n", cant);
 8000da8:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8000dac:	487e      	ldr	r0, [pc, #504]	; (8000fa8 <main+0x944>)
 8000dae:	f004 f9d5 	bl	800515c <iprintf>
	  	  	  		  	  if(p_max=1)
 8000db2:	2301      	movs	r3, #1
 8000db4:	67fb      	str	r3, [r7, #124]	; 0x7c
	  	  	  		  	  {
	  	  	  				  printf("\r\nTuvo periodo maximo en la secuencia %d\r\n", pos);
 8000db6:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8000dba:	487c      	ldr	r0, [pc, #496]	; (8000fac <main+0x948>)
 8000dbc:	f004 f9ce 	bl	800515c <iprintf>
	  	  	  		  	  }
	  	  	  		  	  else
	  	  	  		  	  {
	  	  	  		  		  printf("\r\nNo tuvo periodo maximo\r\n");
	  	  	  		  	  }
	  	  	  		  	  if(pos | 0)
 8000dc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d008      	beq.n	8000dda <main+0x776>
	  	  	  		  	  {
	  	  	  		  		  HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 8000dc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dcc:	4872      	ldr	r0, [pc, #456]	; (8000f98 <main+0x934>)
 8000dce:	f001 fdf0 	bl	80029b2 <HAL_GPIO_TogglePin>
	  	  	  		  		  HAL_Delay(5000);
 8000dd2:	f241 3088 	movw	r0, #5000	; 0x1388
 8000dd6:	f000 fff5 	bl	8001dc4 <HAL_Delay>
	  	  	  		  	  }
	  	  	  		  	  band=1;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  	  	  		  }
	  	  	  		  if(numref == 12)
 8000de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000de4:	2b0c      	cmp	r3, #12
 8000de6:	f040 80a8 	bne.w	8000f3a <main+0x8d6>
	  	  	  		  {
	  	  	  		  	 int cont=0,cant=0,max=4096,p_max=0,pos=0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8000df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfa:	677b      	str	r3, [r7, #116]	; 0x74
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	673b      	str	r3, [r7, #112]	; 0x70
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	  	  	  		  	 uint16_t lfsr1=atoi(semilla);
 8000e06:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f004 f970 	bl	80050f0 <atoi>
 8000e10:	4603      	mov	r3, r0
 8000e12:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
	  	  	  		  	 uint16_t seed=0xFFF;
 8000e16:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000e1a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	  	  	  		  	 uint16_t bit1;
	  	  	  		  	 printf("\r\n#bits término de realimentación %s\r\n", tags);
 8000e1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e22:	4619      	mov	r1, r3
 8000e24:	485e      	ldr	r0, [pc, #376]	; (8000fa0 <main+0x93c>)
 8000e26:	f004 f999 	bl	800515c <iprintf>
	  	  	  		  	 printf("\r\nValor inicial(semilla) %s\r\n", semilla);
 8000e2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e2e:	4619      	mov	r1, r3
 8000e30:	485c      	ldr	r0, [pc, #368]	; (8000fa4 <main+0x940>)
 8000e32:	f004 f993 	bl	800515c <iprintf>
	  	  	  		  	 printf("\r\n#Valores esperados %d\r\n", max);
 8000e36:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000e38:	485d      	ldr	r0, [pc, #372]	; (8000fb0 <main+0x94c>)
 8000e3a:	f004 f98f 	bl	800515c <iprintf>
	  	  	  		  	 while(cont<4096)
 8000e3e:	e04f      	b.n	8000ee0 <main+0x87c>
	  	  	  		  	 {
	  	  	  		  		 bit1 = ((lfsr1 >> 0) ^ (lfsr1 >> 1)) & 1;
 8000e40:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000e44:	085b      	lsrs	r3, r3, #1
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000e4c:	4053      	eors	r3, r2
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	  	  	  		  		 lfsr1 = (lfsr1 >> 1) | (bit1 << 11);
 8000e58:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000e5c:	085b      	lsrs	r3, r3, #1
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	b21a      	sxth	r2, r3
 8000e62:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8000e66:	02db      	lsls	r3, r3, #11
 8000e68:	b21b      	sxth	r3, r3
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	b21b      	sxth	r3, r3
 8000e6e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
	  	  	  		  		 cont++;
 8000e72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000e76:	3301      	adds	r3, #1
 8000e78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	  	  	  		  		 if(band_impresion==1)
 8000e7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d105      	bne.n	8000e90 <main+0x82c>
	  	  	  		  		 {
	  	  	  		  			 printf("\r\ndata: %x\r\n", lfsr1);
 8000e84:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4842      	ldr	r0, [pc, #264]	; (8000f94 <main+0x930>)
 8000e8c:	f004 f966 	bl	800515c <iprintf>
	  	  	  		  		 }
	  	  	  		  		 HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000e90:	2180      	movs	r1, #128	; 0x80
 8000e92:	4841      	ldr	r0, [pc, #260]	; (8000f98 <main+0x934>)
 8000e94:	f001 fd8d 	bl	80029b2 <HAL_GPIO_TogglePin>
	  	  	  		  		 //HAL_Delay(200);
	  	  	  		  		 cant++;
 8000e98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	  	  	  		  		 if(atoi(semilla)==lfsr1)
 8000ea2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f004 f922 	bl	80050f0 <atoi>
 8000eac:	4602      	mov	r2, r0
 8000eae:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d108      	bne.n	8000ec8 <main+0x864>
	  	  	  		  		 {
	  	  	  		  			 cont=4097;
 8000eb6:	f241 0301 	movw	r3, #4097	; 0x1001
 8000eba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	  	  	  		  			 printf("\r\nCantidad: %d\r\n", cant);
 8000ebe:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8000ec2:	4836      	ldr	r0, [pc, #216]	; (8000f9c <main+0x938>)
 8000ec4:	f004 f94a 	bl	800515c <iprintf>
	  	  	  		  		 }
	  	  	  		  		 if(0XFFF ==lfsr1)
 8000ec8:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8000ecc:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d105      	bne.n	8000ee0 <main+0x87c>
	  	  	  		  		 {
	  	  	  		  			 pos=cant;
 8000ed4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000ed8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	  	  	  		  			 p_max=1;
 8000edc:	2301      	movs	r3, #1
 8000ede:	673b      	str	r3, [r7, #112]	; 0x70
	  	  	  		  	 while(cont<4096)
 8000ee0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ee8:	dbaa      	blt.n	8000e40 <main+0x7dc>
	  	  	  		  		 }
	  	  	  		  	 }
	  	  	  		  	 printf("\r\n#bits término de realimentación %s\r\n", tags);
 8000eea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000eee:	4619      	mov	r1, r3
 8000ef0:	482b      	ldr	r0, [pc, #172]	; (8000fa0 <main+0x93c>)
 8000ef2:	f004 f933 	bl	800515c <iprintf>
	  	  	  		  	 printf("\r\nValor inicial(semilla) %s\r\n", semilla);
 8000ef6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000efa:	4619      	mov	r1, r3
 8000efc:	4829      	ldr	r0, [pc, #164]	; (8000fa4 <main+0x940>)
 8000efe:	f004 f92d 	bl	800515c <iprintf>
	  	  	  		  	 printf("\r\nNumero de valores calculados %d\r\n", cant);
 8000f02:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8000f06:	4828      	ldr	r0, [pc, #160]	; (8000fa8 <main+0x944>)
 8000f08:	f004 f928 	bl	800515c <iprintf>
	  	  	  		  	 if(p_max=1)
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	673b      	str	r3, [r7, #112]	; 0x70
	  	  	  		  	 {
	  	  	  		  		 printf("\r\nTuvo periodo maximo en la secuencia %d\r\n", pos);
 8000f10:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8000f14:	4825      	ldr	r0, [pc, #148]	; (8000fac <main+0x948>)
 8000f16:	f004 f921 	bl	800515c <iprintf>
	  	  	  		  	 }
	  	  	  		  	 else
	  	  	  		  	 {
	  	  	  		  		 printf("\r\nNo tuvo periodo maximo\r\n");
	  	  	  		  	 }
	  	  	  		  	 if(pos | 0)
 8000f1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d008      	beq.n	8000f34 <main+0x8d0>
	  	  	  		  	 {
	  	  	  		  		 HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 8000f22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f26:	481c      	ldr	r0, [pc, #112]	; (8000f98 <main+0x934>)
 8000f28:	f001 fd43 	bl	80029b2 <HAL_GPIO_TogglePin>
	  	  	  		  		 HAL_Delay(5000);
 8000f2c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f30:	f000 ff48 	bl	8001dc4 <HAL_Delay>
	  	  	  		  	 }
	  	  	  		  	 band=1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  	  	  		  }
	  	  	  		  if(numref == 16)
 8000f3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f3e:	2b10      	cmp	r3, #16
 8000f40:	f040 80b9 	bne.w	80010b6 <main+0xa52>
	  	  	  		  {
	  	  	  			  int cont=0,cant=0,max=4096,p_max=0,pos=0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f54:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f56:	2300      	movs	r3, #0
 8000f58:	667b      	str	r3, [r7, #100]	; 0x64
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	  	  	  			  uint16_t lfsr2=atoi(semilla);
 8000f60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f64:	4618      	mov	r0, r3
 8000f66:	f004 f8c3 	bl	80050f0 <atoi>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	  	  	  			  uint16_t bit2;
	  	  	  			  printf("\r\n#bits término de realimentación %s\r\n", tags);
 8000f70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f74:	4619      	mov	r1, r3
 8000f76:	480a      	ldr	r0, [pc, #40]	; (8000fa0 <main+0x93c>)
 8000f78:	f004 f8f0 	bl	800515c <iprintf>
	  	  	  			  printf("\r\nValor inicial(semilla) %s\r\n", semilla);
 8000f7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f80:	4619      	mov	r1, r3
 8000f82:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <main+0x940>)
 8000f84:	f004 f8ea 	bl	800515c <iprintf>
	  	  	  			  printf("\r\n#Valores esperados %d\r\n", max);
 8000f88:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000f8a:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <main+0x94c>)
 8000f8c:	f004 f8e6 	bl	800515c <iprintf>
	  	  	  			  while(cont<65535)
 8000f90:	e063      	b.n	800105a <main+0x9f6>
 8000f92:	bf00      	nop
 8000f94:	0800806c 	.word	0x0800806c
 8000f98:	40020400 	.word	0x40020400
 8000f9c:	0800807c 	.word	0x0800807c
 8000fa0:	08008004 	.word	0x08008004
 8000fa4:	08008030 	.word	0x08008030
 8000fa8:	08008090 	.word	0x08008090
 8000fac:	080080b4 	.word	0x080080b4
 8000fb0:	08008050 	.word	0x08008050
	  	  	  			  {
	  	  	  				  bit2 = ((lfsr2 >> 0) ^ (lfsr2 >> 1)) & 1;
 8000fb4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8000fb8:	085b      	lsrs	r3, r3, #1
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8000fc0:	4053      	eors	r3, r2
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	  	  	  				  lfsr2 = (lfsr2 >> 1) | (bit2 << 15);
 8000fcc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8000fd0:	085b      	lsrs	r3, r3, #1
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	b21a      	sxth	r2, r3
 8000fd6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8000fda:	03db      	lsls	r3, r3, #15
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	  	  	  				  cont++;
 8000fe6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000fea:	3301      	adds	r3, #1
 8000fec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	  	  	  				  if(band_impresion==1)
 8000ff0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d105      	bne.n	8001004 <main+0x9a0>
	  	  	  				  {
	  	  	  					  printf("\r\ndata: %x\r\n", lfsr2);
 8000ff8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4880      	ldr	r0, [pc, #512]	; (8001200 <main+0xb9c>)
 8001000:	f004 f8ac 	bl	800515c <iprintf>
	  	  	  				  };
	  	  	  				  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8001004:	2180      	movs	r1, #128	; 0x80
 8001006:	487f      	ldr	r0, [pc, #508]	; (8001204 <main+0xba0>)
 8001008:	f001 fcd3 	bl	80029b2 <HAL_GPIO_TogglePin>
	  	  	  				  HAL_Delay(200);
 800100c:	20c8      	movs	r0, #200	; 0xc8
 800100e:	f000 fed9 	bl	8001dc4 <HAL_Delay>
	  	  	  				  cant++;
 8001012:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001016:	3301      	adds	r3, #1
 8001018:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	  	  	  				  if(atoi(semilla)==lfsr2)
 800101c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001020:	4618      	mov	r0, r3
 8001022:	f004 f865 	bl	80050f0 <atoi>
 8001026:	4602      	mov	r2, r0
 8001028:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800102c:	429a      	cmp	r2, r3
 800102e:	d108      	bne.n	8001042 <main+0x9de>
	  	  	  				  {
	  	  	  					  cont=65536;
 8001030:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001034:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	  	  	  					  printf("\r\nCantidad: %d\r\n", cant);
 8001038:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800103c:	4872      	ldr	r0, [pc, #456]	; (8001208 <main+0xba4>)
 800103e:	f004 f88d 	bl	800515c <iprintf>
	  	  	  				  }
	  	  	  				  if(0XFFFF ==lfsr2)
 8001042:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800104a:	4293      	cmp	r3, r2
 800104c:	d105      	bne.n	800105a <main+0x9f6>
	  	  	  				  {
	  	  	  					  pos=cant;
 800104e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001052:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	  	  	  					  p_max=1;
 8001056:	2301      	movs	r3, #1
 8001058:	667b      	str	r3, [r7, #100]	; 0x64
	  	  	  			  while(cont<65535)
 800105a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800105e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001062:	4293      	cmp	r3, r2
 8001064:	dda6      	ble.n	8000fb4 <main+0x950>
	  	  	  				  }
	  	  	  			  }
	  	  	  			  printf("\r\n#bits término de realimentación %s\r\n", tags);
 8001066:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800106a:	4619      	mov	r1, r3
 800106c:	4867      	ldr	r0, [pc, #412]	; (800120c <main+0xba8>)
 800106e:	f004 f875 	bl	800515c <iprintf>
	  	  	  			  printf("\r\nValor inicial(semilla) %s\r\n", semilla);
 8001072:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001076:	4619      	mov	r1, r3
 8001078:	4865      	ldr	r0, [pc, #404]	; (8001210 <main+0xbac>)
 800107a:	f004 f86f 	bl	800515c <iprintf>
	  	  	  			  printf("\r\nNumero de valores calculados %d\r\n", cant);
 800107e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001082:	4864      	ldr	r0, [pc, #400]	; (8001214 <main+0xbb0>)
 8001084:	f004 f86a 	bl	800515c <iprintf>
	  	  	  			  if(p_max=1)
 8001088:	2301      	movs	r3, #1
 800108a:	667b      	str	r3, [r7, #100]	; 0x64
	  	  	  			  {
	  	  	  				  printf("\r\nTuvo periodo maximo en la secuencia %d\r\n", pos);
 800108c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001090:	4861      	ldr	r0, [pc, #388]	; (8001218 <main+0xbb4>)
 8001092:	f004 f863 	bl	800515c <iprintf>
	  	  	  			  }
	  	  	  			  else
	  	  	  			  {
	  	  	  				  printf("\r\nNo tuvo periodo maximo\r\n");
	  	  	  			  }
	  	  	  			  if(pos | 0)
 8001096:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d008      	beq.n	80010b0 <main+0xa4c>
	  	  	  			  {
	  	  	  				  HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 800109e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010a2:	4858      	ldr	r0, [pc, #352]	; (8001204 <main+0xba0>)
 80010a4:	f001 fc85 	bl	80029b2 <HAL_GPIO_TogglePin>
	  	  	  				  HAL_Delay(5000);
 80010a8:	f241 3088 	movw	r0, #5000	; 0x1388
 80010ac:	f000 fe8a 	bl	8001dc4 <HAL_Delay>
	  	  	  			  }
	  	  	  			  band=1;
 80010b0:	2301      	movs	r3, #1
 80010b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  	  	  		  }
	  	  	  		  if(band==0)
 80010b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d102      	bne.n	80010c4 <main+0xa60>
	  	  	  		  {
	  	  	  			  printf("\r\nTamaño no autorizado");
 80010be:	4857      	ldr	r0, [pc, #348]	; (800121c <main+0xbb8>)
 80010c0:	f004 f84c 	bl	800515c <iprintf>
	  	  	  		  }
	  	  	  		  band_menu=1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  	  	  	  }
	  	  	  	  if(menu==5)
 80010ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80010ce:	2b05      	cmp	r3, #5
 80010d0:	d133      	bne.n	800113a <main+0xad6>
	  	  	  	  {
	  	  	  		  printf("\x1b[2J");
 80010d2:	4853      	ldr	r0, [pc, #332]	; (8001220 <main+0xbbc>)
 80010d4:	f004 f842 	bl	800515c <iprintf>
	  	  	  		  sprintf(hora,"Time: %02d:%02d:%02d\t", time.hour, time.minutes, time.seconds);
 80010d8:	4b52      	ldr	r3, [pc, #328]	; (8001224 <main+0xbc0>)
 80010da:	789b      	ldrb	r3, [r3, #2]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b51      	ldr	r3, [pc, #324]	; (8001224 <main+0xbc0>)
 80010e0:	785b      	ldrb	r3, [r3, #1]
 80010e2:	4619      	mov	r1, r3
 80010e4:	4b4f      	ldr	r3, [pc, #316]	; (8001224 <main+0xbc0>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	460b      	mov	r3, r1
 80010ec:	494e      	ldr	r1, [pc, #312]	; (8001228 <main+0xbc4>)
 80010ee:	484f      	ldr	r0, [pc, #316]	; (800122c <main+0xbc8>)
 80010f0:	f004 f92a 	bl	8005348 <siprintf>
	  	  	  		  sprintf(date,"Date: %02d/%02d/20%02d\r\n", time.dayofmonth, time.month, time.year);
 80010f4:	4b4b      	ldr	r3, [pc, #300]	; (8001224 <main+0xbc0>)
 80010f6:	791b      	ldrb	r3, [r3, #4]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b4a      	ldr	r3, [pc, #296]	; (8001224 <main+0xbc0>)
 80010fc:	795b      	ldrb	r3, [r3, #5]
 80010fe:	4619      	mov	r1, r3
 8001100:	4b48      	ldr	r3, [pc, #288]	; (8001224 <main+0xbc0>)
 8001102:	799b      	ldrb	r3, [r3, #6]
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	460b      	mov	r3, r1
 8001108:	4949      	ldr	r1, [pc, #292]	; (8001230 <main+0xbcc>)
 800110a:	484a      	ldr	r0, [pc, #296]	; (8001234 <main+0xbd0>)
 800110c:	f004 f91c 	bl	8005348 <siprintf>

	  	  	  		  HAL_UART_Transmit(&huart3, (uint8_t*)hora, sizeof(hora), HAL_MAX_DELAY);
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
 8001114:	221e      	movs	r2, #30
 8001116:	4945      	ldr	r1, [pc, #276]	; (800122c <main+0xbc8>)
 8001118:	4847      	ldr	r0, [pc, #284]	; (8001238 <main+0xbd4>)
 800111a:	f003 f8d0 	bl	80042be <HAL_UART_Transmit>
	  	  	  		  HAL_UART_Transmit(&huart3, (uint8_t*)date, sizeof(date), HAL_MAX_DELAY);
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	221e      	movs	r2, #30
 8001124:	4943      	ldr	r1, [pc, #268]	; (8001234 <main+0xbd0>)
 8001126:	4844      	ldr	r0, [pc, #272]	; (8001238 <main+0xbd4>)
 8001128:	f003 f8c9 	bl	80042be <HAL_UART_Transmit>
	  	  	  		  HAL_Delay(900);
 800112c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001130:	f000 fe48 	bl	8001dc4 <HAL_Delay>

	  	  	  		  band_menu=1;
 8001134:	2301      	movs	r3, #1
 8001136:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  	  	  	  }
	  	  	  	  if(menu==6)
 800113a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800113e:	2b06      	cmp	r3, #6
 8001140:	d108      	bne.n	8001154 <main+0xaf0>
	  	  	  	  {
	  	  	  		  printf("\x1b[2J");
 8001142:	4837      	ldr	r0, [pc, #220]	; (8001220 <main+0xbbc>)
 8001144:	f004 f80a 	bl	800515c <iprintf>
	  	  	  		  printf("\r\nMenu 6 ");
 8001148:	483c      	ldr	r0, [pc, #240]	; (800123c <main+0xbd8>)
 800114a:	f004 f807 	bl	800515c <iprintf>
	  	  	  		  band_menu=1;
 800114e:	2301      	movs	r3, #1
 8001150:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  	  	  	  }
	  	  	  	  if(menu==7)
 8001154:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001158:	2b07      	cmp	r3, #7
 800115a:	d108      	bne.n	800116e <main+0xb0a>
	  	  	  	  {
	  	  	  		  printf("\x1b[2J");
 800115c:	4830      	ldr	r0, [pc, #192]	; (8001220 <main+0xbbc>)
 800115e:	f003 fffd 	bl	800515c <iprintf>
	  	  	  		  printf("\r\nMenu 7 ");
 8001162:	4837      	ldr	r0, [pc, #220]	; (8001240 <main+0xbdc>)
 8001164:	f003 fffa 	bl	800515c <iprintf>
	  	  	  		  band_menu=1;
 8001168:	2301      	movs	r3, #1
 800116a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  	  	  	  }
	  	  	  	  if(menu==8)
 800116e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001172:	2b08      	cmp	r3, #8
 8001174:	d13a      	bne.n	80011ec <main+0xb88>
	  	  	  	  {
	  	  	  		  printf("\x1b[2J");
 8001176:	482a      	ldr	r0, [pc, #168]	; (8001220 <main+0xbbc>)
 8001178:	f003 fff0 	bl	800515c <iprintf>
	  	  	  		  printf("\r\nEscoja la opcion que crea pertinente ");
 800117c:	4831      	ldr	r0, [pc, #196]	; (8001244 <main+0xbe0>)
 800117e:	f003 ffed 	bl	800515c <iprintf>
	  	  	  		  printf("\r\nSi desea activar la impresion de datos presione: 1 ");
 8001182:	4831      	ldr	r0, [pc, #196]	; (8001248 <main+0xbe4>)
 8001184:	f003 ffea 	bl	800515c <iprintf>
	  	  	  		  printf("\r\nSi dese desactivar la impresion de datos presione: 2 ");
 8001188:	4830      	ldr	r0, [pc, #192]	; (800124c <main+0xbe8>)
 800118a:	f003 ffe7 	bl	800515c <iprintf>
	  	  	  		  scanf("%s",impresion);
 800118e:	f107 0318 	add.w	r3, r7, #24
 8001192:	4619      	mov	r1, r3
 8001194:	482e      	ldr	r0, [pc, #184]	; (8001250 <main+0xbec>)
 8001196:	f003 fff9 	bl	800518c <iscanf>
	  	  	  		  int band_datos = atoi(impresion);
 800119a:	f107 0318 	add.w	r3, r7, #24
 800119e:	4618      	mov	r0, r3
 80011a0:	f003 ffa6 	bl	80050f0 <atoi>
 80011a4:	65f8      	str	r0, [r7, #92]	; 0x5c
	  	  	  		  if(band_datos==1)
 80011a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d10c      	bne.n	80011c6 <main+0xb62>
	  	  	  		  {
	  	  	  			  printf("\r\nLa impresion de datos se encuentra activada");
 80011ac:	4829      	ldr	r0, [pc, #164]	; (8001254 <main+0xbf0>)
 80011ae:	f003 ffd5 	bl	800515c <iprintf>
	  	  	  			  HAL_Delay(2000);
 80011b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011b6:	f000 fe05 	bl	8001dc4 <HAL_Delay>
	  	  	  			  band_impresion=1;
 80011ba:	2301      	movs	r3, #1
 80011bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	  	  	  			  band_menu=1;
 80011c0:	2301      	movs	r3, #1
 80011c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  	  	  		  }
	  	  	  		  if(band_datos==2)
 80011c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d10c      	bne.n	80011e6 <main+0xb82>
	  	  	  		  {
	  	  	  			  printf("\r\nLa impresion de datos se encuentra desactivada");
 80011cc:	4822      	ldr	r0, [pc, #136]	; (8001258 <main+0xbf4>)
 80011ce:	f003 ffc5 	bl	800515c <iprintf>
	  	  	  			  HAL_Delay(2000);
 80011d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011d6:	f000 fdf5 	bl	8001dc4 <HAL_Delay>
	  	  	  			  band_impresion=0;
 80011da:	2300      	movs	r3, #0
 80011dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	  	  	  			  band_menu=1;
 80011e0:	2301      	movs	r3, #1
 80011e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  	  	  		  }
	  	  	  		  band_menu=1;
 80011e6:	2301      	movs	r3, #1
 80011e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  	  	  	  }
	  	  	  	  if(band_menu==0)
 80011ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f47f aa51 	bne.w	8000698 <main+0x34>
	  	  	  	  {
	  	  	  		  printf("\r\nOpción no disponible");
 80011f6:	4819      	ldr	r0, [pc, #100]	; (800125c <main+0xbf8>)
 80011f8:	f003 ffb0 	bl	800515c <iprintf>
	  if(flagEsc)
 80011fc:	f7ff ba4c 	b.w	8000698 <main+0x34>
 8001200:	0800806c 	.word	0x0800806c
 8001204:	40020400 	.word	0x40020400
 8001208:	0800807c 	.word	0x0800807c
 800120c:	08008004 	.word	0x08008004
 8001210:	08008030 	.word	0x08008030
 8001214:	08008090 	.word	0x08008090
 8001218:	080080b4 	.word	0x080080b4
 800121c:	080080e0 	.word	0x080080e0
 8001220:	080071f0 	.word	0x080071f0
 8001224:	20000858 	.word	0x20000858
 8001228:	080080f8 	.word	0x080080f8
 800122c:	20000880 	.word	0x20000880
 8001230:	08008110 	.word	0x08008110
 8001234:	20000860 	.word	0x20000860
 8001238:	20000308 	.word	0x20000308
 800123c:	0800812c 	.word	0x0800812c
 8001240:	08008138 	.word	0x08008138
 8001244:	08008144 	.word	0x08008144
 8001248:	0800816c 	.word	0x0800816c
 800124c:	080081a4 	.word	0x080081a4
 8001250:	08007368 	.word	0x08007368
 8001254:	080081dc 	.word	0x080081dc
 8001258:	0800820c 	.word	0x0800820c
 800125c:	08008240 	.word	0x08008240

08001260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b094      	sub	sp, #80	; 0x50
 8001264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001266:	f107 0320 	add.w	r3, r7, #32
 800126a:	2230      	movs	r2, #48	; 0x30
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f003 ff6c 	bl	800514c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	4b29      	ldr	r3, [pc, #164]	; (8001330 <SystemClock_Config+0xd0>)
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	4a28      	ldr	r2, [pc, #160]	; (8001330 <SystemClock_Config+0xd0>)
 800128e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001292:	6413      	str	r3, [r2, #64]	; 0x40
 8001294:	4b26      	ldr	r3, [pc, #152]	; (8001330 <SystemClock_Config+0xd0>)
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	4b23      	ldr	r3, [pc, #140]	; (8001334 <SystemClock_Config+0xd4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012ac:	4a21      	ldr	r2, [pc, #132]	; (8001334 <SystemClock_Config+0xd4>)
 80012ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	4b1f      	ldr	r3, [pc, #124]	; (8001334 <SystemClock_Config+0xd4>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012c0:	2301      	movs	r3, #1
 80012c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ca:	2302      	movs	r3, #2
 80012cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012d4:	2304      	movs	r3, #4
 80012d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80012d8:	2348      	movs	r3, #72	; 0x48
 80012da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012dc:	2302      	movs	r3, #2
 80012de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80012e0:	2303      	movs	r3, #3
 80012e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e4:	f107 0320 	add.w	r3, r7, #32
 80012e8:	4618      	mov	r0, r3
 80012ea:	f002 fb03 	bl	80038f4 <HAL_RCC_OscConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012f4:	f000 f9b4 	bl	8001660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f8:	230f      	movs	r3, #15
 80012fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012fc:	2302      	movs	r3, #2
 80012fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001308:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800130a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	2102      	movs	r1, #2
 8001316:	4618      	mov	r0, r3
 8001318:	f002 fd64 	bl	8003de4 <HAL_RCC_ClockConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001322:	f000 f99d 	bl	8001660 <Error_Handler>
  }
}
 8001326:	bf00      	nop
 8001328:	3750      	adds	r7, #80	; 0x50
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40023800 	.word	0x40023800
 8001334:	40007000 	.word	0x40007000

08001338 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800133c:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <MX_ETH_Init+0x84>)
 800133e:	4a20      	ldr	r2, [pc, #128]	; (80013c0 <MX_ETH_Init+0x88>)
 8001340:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <MX_ETH_Init+0x8c>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001348:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <MX_ETH_Init+0x8c>)
 800134a:	2280      	movs	r2, #128	; 0x80
 800134c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <MX_ETH_Init+0x8c>)
 8001350:	22e1      	movs	r2, #225	; 0xe1
 8001352:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_ETH_Init+0x8c>)
 8001356:	2200      	movs	r2, #0
 8001358:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <MX_ETH_Init+0x8c>)
 800135c:	2200      	movs	r2, #0
 800135e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_ETH_Init+0x8c>)
 8001362:	2200      	movs	r2, #0
 8001364:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <MX_ETH_Init+0x84>)
 8001368:	4a16      	ldr	r2, [pc, #88]	; (80013c4 <MX_ETH_Init+0x8c>)
 800136a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800136c:	4b13      	ldr	r3, [pc, #76]	; (80013bc <MX_ETH_Init+0x84>)
 800136e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001372:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <MX_ETH_Init+0x84>)
 8001376:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <MX_ETH_Init+0x90>)
 8001378:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <MX_ETH_Init+0x84>)
 800137c:	4a13      	ldr	r2, [pc, #76]	; (80013cc <MX_ETH_Init+0x94>)
 800137e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <MX_ETH_Init+0x84>)
 8001382:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001386:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001388:	480c      	ldr	r0, [pc, #48]	; (80013bc <MX_ETH_Init+0x84>)
 800138a:	f000 fe25 	bl	8001fd8 <HAL_ETH_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001394:	f000 f964 	bl	8001660 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001398:	2238      	movs	r2, #56	; 0x38
 800139a:	2100      	movs	r1, #0
 800139c:	480c      	ldr	r0, [pc, #48]	; (80013d0 <MX_ETH_Init+0x98>)
 800139e:	f003 fed5 	bl	800514c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <MX_ETH_Init+0x98>)
 80013a4:	2221      	movs	r2, #33	; 0x21
 80013a6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_ETH_Init+0x98>)
 80013aa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80013ae:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <MX_ETH_Init+0x98>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000204 	.word	0x20000204
 80013c0:	40028000 	.word	0x40028000
 80013c4:	200008a0 	.word	0x200008a0
 80013c8:	20000164 	.word	0x20000164
 80013cc:	200000c4 	.word	0x200000c4
 80013d0:	2000008c 	.word	0x2000008c

080013d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013d8:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <MX_I2C1_Init+0x74>)
 80013da:	4a1c      	ldr	r2, [pc, #112]	; (800144c <MX_I2C1_Init+0x78>)
 80013dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013de:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <MX_I2C1_Init+0x74>)
 80013e0:	4a1b      	ldr	r2, [pc, #108]	; (8001450 <MX_I2C1_Init+0x7c>)
 80013e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <MX_I2C1_Init+0x74>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ea:	4b17      	ldr	r3, [pc, #92]	; (8001448 <MX_I2C1_Init+0x74>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <MX_I2C1_Init+0x74>)
 80013f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <MX_I2C1_Init+0x74>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <MX_I2C1_Init+0x74>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <MX_I2C1_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800140a:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <MX_I2C1_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001410:	480d      	ldr	r0, [pc, #52]	; (8001448 <MX_I2C1_Init+0x74>)
 8001412:	f001 fae9 	bl	80029e8 <HAL_I2C_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800141c:	f000 f920 	bl	8001660 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001420:	2100      	movs	r1, #0
 8001422:	4809      	ldr	r0, [pc, #36]	; (8001448 <MX_I2C1_Init+0x74>)
 8001424:	f002 f8ce 	bl	80035c4 <HAL_I2CEx_ConfigAnalogFilter>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800142e:	f000 f917 	bl	8001660 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001432:	2100      	movs	r1, #0
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <MX_I2C1_Init+0x74>)
 8001436:	f002 f901 	bl	800363c <HAL_I2CEx_ConfigDigitalFilter>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001440:	f000 f90e 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	200002b4 	.word	0x200002b4
 800144c:	40005400 	.word	0x40005400
 8001450:	000186a0 	.word	0x000186a0

08001454 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <MX_USART3_UART_Init+0x4c>)
 800145a:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <MX_USART3_UART_Init+0x50>)
 800145c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <MX_USART3_UART_Init+0x4c>)
 8001460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001464:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_USART3_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <MX_USART3_UART_Init+0x4c>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <MX_USART3_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <MX_USART3_UART_Init+0x4c>)
 800147a:	220c      	movs	r2, #12
 800147c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <MX_USART3_UART_Init+0x4c>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <MX_USART3_UART_Init+0x4c>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800148a:	4805      	ldr	r0, [pc, #20]	; (80014a0 <MX_USART3_UART_Init+0x4c>)
 800148c:	f002 feca 	bl	8004224 <HAL_UART_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001496:	f000 f8e3 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000308 	.word	0x20000308
 80014a4:	40004800 	.word	0x40004800

080014a8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80014ac:	4b14      	ldr	r3, [pc, #80]	; (8001500 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80014b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014b6:	2204      	movs	r2, #4
 80014b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014bc:	2202      	movs	r2, #2
 80014be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014c8:	2202      	movs	r2, #2
 80014ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014da:	2200      	movs	r2, #0
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ec:	f002 f8e5 	bl	80036ba <HAL_PCD_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80014f6:	f000 f8b3 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2000034c 	.word	0x2000034c

08001504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08c      	sub	sp, #48	; 0x30
 8001508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150a:	f107 031c 	add.w	r3, r7, #28
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
 800151e:	4b4c      	ldr	r3, [pc, #304]	; (8001650 <MX_GPIO_Init+0x14c>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a4b      	ldr	r2, [pc, #300]	; (8001650 <MX_GPIO_Init+0x14c>)
 8001524:	f043 0304 	orr.w	r3, r3, #4
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b49      	ldr	r3, [pc, #292]	; (8001650 <MX_GPIO_Init+0x14c>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0304 	and.w	r3, r3, #4
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	4b45      	ldr	r3, [pc, #276]	; (8001650 <MX_GPIO_Init+0x14c>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a44      	ldr	r2, [pc, #272]	; (8001650 <MX_GPIO_Init+0x14c>)
 8001540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b42      	ldr	r3, [pc, #264]	; (8001650 <MX_GPIO_Init+0x14c>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	4b3e      	ldr	r3, [pc, #248]	; (8001650 <MX_GPIO_Init+0x14c>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a3d      	ldr	r2, [pc, #244]	; (8001650 <MX_GPIO_Init+0x14c>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b3b      	ldr	r3, [pc, #236]	; (8001650 <MX_GPIO_Init+0x14c>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b37      	ldr	r3, [pc, #220]	; (8001650 <MX_GPIO_Init+0x14c>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a36      	ldr	r2, [pc, #216]	; (8001650 <MX_GPIO_Init+0x14c>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b34      	ldr	r3, [pc, #208]	; (8001650 <MX_GPIO_Init+0x14c>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	4b30      	ldr	r3, [pc, #192]	; (8001650 <MX_GPIO_Init+0x14c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a2f      	ldr	r2, [pc, #188]	; (8001650 <MX_GPIO_Init+0x14c>)
 8001594:	f043 0308 	orr.w	r3, r3, #8
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <MX_GPIO_Init+0x14c>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	4b29      	ldr	r3, [pc, #164]	; (8001650 <MX_GPIO_Init+0x14c>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a28      	ldr	r2, [pc, #160]	; (8001650 <MX_GPIO_Init+0x14c>)
 80015b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b26      	ldr	r3, [pc, #152]	; (8001650 <MX_GPIO_Init+0x14c>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	f244 0181 	movw	r1, #16513	; 0x4081
 80015c8:	4822      	ldr	r0, [pc, #136]	; (8001654 <MX_GPIO_Init+0x150>)
 80015ca:	f001 f9d9 	bl	8002980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2140      	movs	r1, #64	; 0x40
 80015d2:	4821      	ldr	r0, [pc, #132]	; (8001658 <MX_GPIO_Init+0x154>)
 80015d4:	f001 f9d4 	bl	8002980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80015d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	4619      	mov	r1, r3
 80015ee:	481b      	ldr	r0, [pc, #108]	; (800165c <MX_GPIO_Init+0x158>)
 80015f0:	f001 f81a 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80015f4:	f244 0381 	movw	r3, #16513	; 0x4081
 80015f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	4619      	mov	r1, r3
 800160c:	4811      	ldr	r0, [pc, #68]	; (8001654 <MX_GPIO_Init+0x150>)
 800160e:	f001 f80b 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001612:	2340      	movs	r3, #64	; 0x40
 8001614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001616:	2301      	movs	r3, #1
 8001618:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	2300      	movs	r3, #0
 8001620:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001622:	f107 031c 	add.w	r3, r7, #28
 8001626:	4619      	mov	r1, r3
 8001628:	480b      	ldr	r0, [pc, #44]	; (8001658 <MX_GPIO_Init+0x154>)
 800162a:	f000 fffd 	bl	8002628 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001632:	2300      	movs	r3, #0
 8001634:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800163a:	f107 031c 	add.w	r3, r7, #28
 800163e:	4619      	mov	r1, r3
 8001640:	4805      	ldr	r0, [pc, #20]	; (8001658 <MX_GPIO_Init+0x154>)
 8001642:	f000 fff1 	bl	8002628 <HAL_GPIO_Init>

}
 8001646:	bf00      	nop
 8001648:	3730      	adds	r7, #48	; 0x30
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800
 8001654:	40020400 	.word	0x40020400
 8001658:	40021800 	.word	0x40021800
 800165c:	40020800 	.word	0x40020800

08001660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001664:	b672      	cpsid	i
}
 8001666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001668:	e7fe      	b.n	8001668 <Error_Handler+0x8>
	...

0800166c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001674:	4a07      	ldr	r2, [pc, #28]	; (8001694 <RetargetInit+0x28>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <RetargetInit+0x2c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6898      	ldr	r0, [r3, #8]
 8001680:	2300      	movs	r3, #0
 8001682:	2202      	movs	r2, #2
 8001684:	2100      	movs	r1, #0
 8001686:	f003 fd99 	bl	80051bc <setvbuf>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	200008a8 	.word	0x200008a8
 8001698:	2000000c 	.word	0x2000000c

0800169c <_isatty>:

int _isatty(int fd) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	db04      	blt.n	80016b4 <_isatty+0x18>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	dc01      	bgt.n	80016b4 <_isatty+0x18>
    return 1;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e005      	b.n	80016c0 <_isatty+0x24>

  errno = EBADF;
 80016b4:	f003 fd20 	bl	80050f8 <__errno>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2209      	movs	r2, #9
 80016bc:	601a      	str	r2, [r3, #0]
  return 0;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_write>:

int _write(int fd, char* ptr, int len) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d002      	beq.n	80016e0 <_write+0x18>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d111      	bne.n	8001704 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80016e0:	4b0e      	ldr	r3, [pc, #56]	; (800171c <_write+0x54>)
 80016e2:	6818      	ldr	r0, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	f002 fde6 	bl	80042be <HAL_UART_Transmit>
 80016f2:	4603      	mov	r3, r0
 80016f4:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80016f6:	7dfb      	ldrb	r3, [r7, #23]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d101      	bne.n	8001700 <_write+0x38>
      return len;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	e008      	b.n	8001712 <_write+0x4a>
    else
      return EIO;
 8001700:	2305      	movs	r3, #5
 8001702:	e006      	b.n	8001712 <_write+0x4a>
  }
  errno = EBADF;
 8001704:	f003 fcf8 	bl	80050f8 <__errno>
 8001708:	4603      	mov	r3, r0
 800170a:	2209      	movs	r2, #9
 800170c:	601a      	str	r2, [r3, #0]
  return -1;
 800170e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001712:	4618      	mov	r0, r3
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200008a8 	.word	0x200008a8

08001720 <_close>:

int _close(int fd) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	db04      	blt.n	8001738 <_close+0x18>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b02      	cmp	r3, #2
 8001732:	dc01      	bgt.n	8001738 <_close+0x18>
    return 0;
 8001734:	2300      	movs	r3, #0
 8001736:	e006      	b.n	8001746 <_close+0x26>

  errno = EBADF;
 8001738:	f003 fcde 	bl	80050f8 <__errno>
 800173c:	4603      	mov	r3, r0
 800173e:	2209      	movs	r2, #9
 8001740:	601a      	str	r2, [r3, #0]
  return -1;
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800174e:	b580      	push	{r7, lr}
 8001750:	b084      	sub	sp, #16
 8001752:	af00      	add	r7, sp, #0
 8001754:	60f8      	str	r0, [r7, #12]
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800175a:	f003 fccd 	bl	80050f8 <__errno>
 800175e:	4603      	mov	r3, r0
 8001760:	2209      	movs	r2, #9
 8001762:	601a      	str	r2, [r3, #0]
  return -1;
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <_read>:

int _read(int fd, char* ptr, int len) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d110      	bne.n	80017a4 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <_read+0x4c>)
 8001784:	6818      	ldr	r0, [r3, #0]
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
 800178a:	2201      	movs	r2, #1
 800178c:	68b9      	ldr	r1, [r7, #8]
 800178e:	f002 fe28 	bl	80043e2 <HAL_UART_Receive>
 8001792:	4603      	mov	r3, r0
 8001794:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001796:	7dfb      	ldrb	r3, [r7, #23]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <_read+0x30>
      return 1;
 800179c:	2301      	movs	r3, #1
 800179e:	e008      	b.n	80017b2 <_read+0x42>
    else
      return EIO;
 80017a0:	2305      	movs	r3, #5
 80017a2:	e006      	b.n	80017b2 <_read+0x42>
  }
  errno = EBADF;
 80017a4:	f003 fca8 	bl	80050f8 <__errno>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2209      	movs	r2, #9
 80017ac:	601a      	str	r2, [r3, #0]
  return -1;
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200008a8 	.word	0x200008a8

080017c0 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	db08      	blt.n	80017e2 <_fstat+0x22>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	dc05      	bgt.n	80017e2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017dc:	605a      	str	r2, [r3, #4]
    return 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	e005      	b.n	80017ee <_fstat+0x2e>
  }

  errno = EBADF;
 80017e2:	f003 fc89 	bl	80050f8 <__errno>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2209      	movs	r2, #9
 80017ea:	601a      	str	r2, [r3, #0]
  return 0;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <HAL_MspInit+0x4c>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	4a0f      	ldr	r2, [pc, #60]	; (8001844 <HAL_MspInit+0x4c>)
 8001808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800180c:	6453      	str	r3, [r2, #68]	; 0x44
 800180e:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <HAL_MspInit+0x4c>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	603b      	str	r3, [r7, #0]
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_MspInit+0x4c>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	4a08      	ldr	r2, [pc, #32]	; (8001844 <HAL_MspInit+0x4c>)
 8001824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001828:	6413      	str	r3, [r2, #64]	; 0x40
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_MspInit+0x4c>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08e      	sub	sp, #56	; 0x38
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a55      	ldr	r2, [pc, #340]	; (80019bc <HAL_ETH_MspInit+0x174>)
 8001866:	4293      	cmp	r3, r2
 8001868:	f040 80a4 	bne.w	80019b4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800186c:	2300      	movs	r3, #0
 800186e:	623b      	str	r3, [r7, #32]
 8001870:	4b53      	ldr	r3, [pc, #332]	; (80019c0 <HAL_ETH_MspInit+0x178>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	4a52      	ldr	r2, [pc, #328]	; (80019c0 <HAL_ETH_MspInit+0x178>)
 8001876:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800187a:	6313      	str	r3, [r2, #48]	; 0x30
 800187c:	4b50      	ldr	r3, [pc, #320]	; (80019c0 <HAL_ETH_MspInit+0x178>)
 800187e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001884:	623b      	str	r3, [r7, #32]
 8001886:	6a3b      	ldr	r3, [r7, #32]
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
 800188c:	4b4c      	ldr	r3, [pc, #304]	; (80019c0 <HAL_ETH_MspInit+0x178>)
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001890:	4a4b      	ldr	r2, [pc, #300]	; (80019c0 <HAL_ETH_MspInit+0x178>)
 8001892:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001896:	6313      	str	r3, [r2, #48]	; 0x30
 8001898:	4b49      	ldr	r3, [pc, #292]	; (80019c0 <HAL_ETH_MspInit+0x178>)
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	2300      	movs	r3, #0
 80018a6:	61bb      	str	r3, [r7, #24]
 80018a8:	4b45      	ldr	r3, [pc, #276]	; (80019c0 <HAL_ETH_MspInit+0x178>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	4a44      	ldr	r2, [pc, #272]	; (80019c0 <HAL_ETH_MspInit+0x178>)
 80018ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018b2:	6313      	str	r3, [r2, #48]	; 0x30
 80018b4:	4b42      	ldr	r3, [pc, #264]	; (80019c0 <HAL_ETH_MspInit+0x178>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	4b3e      	ldr	r3, [pc, #248]	; (80019c0 <HAL_ETH_MspInit+0x178>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	4a3d      	ldr	r2, [pc, #244]	; (80019c0 <HAL_ETH_MspInit+0x178>)
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	6313      	str	r3, [r2, #48]	; 0x30
 80018d0:	4b3b      	ldr	r3, [pc, #236]	; (80019c0 <HAL_ETH_MspInit+0x178>)
 80018d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018dc:	2300      	movs	r3, #0
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	4b37      	ldr	r3, [pc, #220]	; (80019c0 <HAL_ETH_MspInit+0x178>)
 80018e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e4:	4a36      	ldr	r2, [pc, #216]	; (80019c0 <HAL_ETH_MspInit+0x178>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	6313      	str	r3, [r2, #48]	; 0x30
 80018ec:	4b34      	ldr	r3, [pc, #208]	; (80019c0 <HAL_ETH_MspInit+0x178>)
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	4b30      	ldr	r3, [pc, #192]	; (80019c0 <HAL_ETH_MspInit+0x178>)
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	4a2f      	ldr	r2, [pc, #188]	; (80019c0 <HAL_ETH_MspInit+0x178>)
 8001902:	f043 0302 	orr.w	r3, r3, #2
 8001906:	6313      	str	r3, [r2, #48]	; 0x30
 8001908:	4b2d      	ldr	r3, [pc, #180]	; (80019c0 <HAL_ETH_MspInit+0x178>)
 800190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	4b29      	ldr	r3, [pc, #164]	; (80019c0 <HAL_ETH_MspInit+0x178>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	4a28      	ldr	r2, [pc, #160]	; (80019c0 <HAL_ETH_MspInit+0x178>)
 800191e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001922:	6313      	str	r3, [r2, #48]	; 0x30
 8001924:	4b26      	ldr	r3, [pc, #152]	; (80019c0 <HAL_ETH_MspInit+0x178>)
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001930:	2332      	movs	r3, #50	; 0x32
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193c:	2303      	movs	r3, #3
 800193e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001940:	230b      	movs	r3, #11
 8001942:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001948:	4619      	mov	r1, r3
 800194a:	481e      	ldr	r0, [pc, #120]	; (80019c4 <HAL_ETH_MspInit+0x17c>)
 800194c:	f000 fe6c 	bl	8002628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001950:	2386      	movs	r3, #134	; 0x86
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001960:	230b      	movs	r3, #11
 8001962:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001968:	4619      	mov	r1, r3
 800196a:	4817      	ldr	r0, [pc, #92]	; (80019c8 <HAL_ETH_MspInit+0x180>)
 800196c:	f000 fe5c 	bl	8002628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197e:	2303      	movs	r3, #3
 8001980:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001982:	230b      	movs	r3, #11
 8001984:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4619      	mov	r1, r3
 800198c:	480f      	ldr	r0, [pc, #60]	; (80019cc <HAL_ETH_MspInit+0x184>)
 800198e:	f000 fe4b 	bl	8002628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001992:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199c:	2300      	movs	r3, #0
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a0:	2303      	movs	r3, #3
 80019a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019a4:	230b      	movs	r3, #11
 80019a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ac:	4619      	mov	r1, r3
 80019ae:	4808      	ldr	r0, [pc, #32]	; (80019d0 <HAL_ETH_MspInit+0x188>)
 80019b0:	f000 fe3a 	bl	8002628 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80019b4:	bf00      	nop
 80019b6:	3738      	adds	r7, #56	; 0x38
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40028000 	.word	0x40028000
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40020800 	.word	0x40020800
 80019c8:	40020000 	.word	0x40020000
 80019cc:	40020400 	.word	0x40020400
 80019d0:	40021800 	.word	0x40021800

080019d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	; 0x28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a19      	ldr	r2, [pc, #100]	; (8001a58 <HAL_I2C_MspInit+0x84>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d12c      	bne.n	8001a50 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <HAL_I2C_MspInit+0x88>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a17      	ldr	r2, [pc, #92]	; (8001a5c <HAL_I2C_MspInit+0x88>)
 8001a00:	f043 0302 	orr.w	r3, r3, #2
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_I2C_MspInit+0x88>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001a12:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a18:	2312      	movs	r3, #18
 8001a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a24:	2304      	movs	r3, #4
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	480c      	ldr	r0, [pc, #48]	; (8001a60 <HAL_I2C_MspInit+0x8c>)
 8001a30:	f000 fdfa 	bl	8002628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <HAL_I2C_MspInit+0x88>)
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <HAL_I2C_MspInit+0x88>)
 8001a3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a42:	6413      	str	r3, [r2, #64]	; 0x40
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_I2C_MspInit+0x88>)
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a50:	bf00      	nop
 8001a52:	3728      	adds	r7, #40	; 0x28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40005400 	.word	0x40005400
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020400 	.word	0x40020400

08001a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a19      	ldr	r2, [pc, #100]	; (8001ae8 <HAL_UART_MspInit+0x84>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d12c      	bne.n	8001ae0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <HAL_UART_MspInit+0x88>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	4a17      	ldr	r2, [pc, #92]	; (8001aec <HAL_UART_MspInit+0x88>)
 8001a90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a94:	6413      	str	r3, [r2, #64]	; 0x40
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <HAL_UART_MspInit+0x88>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_UART_MspInit+0x88>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a10      	ldr	r2, [pc, #64]	; (8001aec <HAL_UART_MspInit+0x88>)
 8001aac:	f043 0308 	orr.w	r3, r3, #8
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <HAL_UART_MspInit+0x88>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001abe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	2303      	movs	r3, #3
 8001ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ad0:	2307      	movs	r3, #7
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4805      	ldr	r0, [pc, #20]	; (8001af0 <HAL_UART_MspInit+0x8c>)
 8001adc:	f000 fda4 	bl	8002628 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ae0:	bf00      	nop
 8001ae2:	3728      	adds	r7, #40	; 0x28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40004800 	.word	0x40004800
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020c00 	.word	0x40020c00

08001af4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	; 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b14:	d13f      	bne.n	8001b96 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	4b21      	ldr	r3, [pc, #132]	; (8001ba0 <HAL_PCD_MspInit+0xac>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	4a20      	ldr	r2, [pc, #128]	; (8001ba0 <HAL_PCD_MspInit+0xac>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6313      	str	r3, [r2, #48]	; 0x30
 8001b26:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <HAL_PCD_MspInit+0xac>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b32:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b40:	2303      	movs	r3, #3
 8001b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b44:	230a      	movs	r3, #10
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4815      	ldr	r0, [pc, #84]	; (8001ba4 <HAL_PCD_MspInit+0xb0>)
 8001b50:	f000 fd6a 	bl	8002628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b62:	f107 0314 	add.w	r3, r7, #20
 8001b66:	4619      	mov	r1, r3
 8001b68:	480e      	ldr	r0, [pc, #56]	; (8001ba4 <HAL_PCD_MspInit+0xb0>)
 8001b6a:	f000 fd5d 	bl	8002628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <HAL_PCD_MspInit+0xac>)
 8001b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b72:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <HAL_PCD_MspInit+0xac>)
 8001b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b78:	6353      	str	r3, [r2, #52]	; 0x34
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <HAL_PCD_MspInit+0xac>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <HAL_PCD_MspInit+0xac>)
 8001b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b88:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8a:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HAL_PCD_MspInit+0xac>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001b96:	bf00      	nop
 8001b98:	3728      	adds	r7, #40	; 0x28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40020000 	.word	0x40020000

08001ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bac:	e7fe      	b.n	8001bac <NMI_Handler+0x4>

08001bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb2:	e7fe      	b.n	8001bb2 <HardFault_Handler+0x4>

08001bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <MemManage_Handler+0x4>

08001bba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bbe:	e7fe      	b.n	8001bbe <BusFault_Handler+0x4>

08001bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <UsageFault_Handler+0x4>

08001bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr

08001be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf4:	f000 f8c6 	bl	8001d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c04:	4a14      	ldr	r2, [pc, #80]	; (8001c58 <_sbrk+0x5c>)
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <_sbrk+0x60>)
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <_sbrk+0x64>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d102      	bne.n	8001c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <_sbrk+0x64>)
 8001c1a:	4a12      	ldr	r2, [pc, #72]	; (8001c64 <_sbrk+0x68>)
 8001c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d207      	bcs.n	8001c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c2c:	f003 fa64 	bl	80050f8 <__errno>
 8001c30:	4603      	mov	r3, r0
 8001c32:	220c      	movs	r2, #12
 8001c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c36:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3a:	e009      	b.n	8001c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <_sbrk+0x64>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <_sbrk+0x64>)
 8001c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20030000 	.word	0x20030000
 8001c5c:	00000400 	.word	0x00000400
 8001c60:	200008ac 	.word	0x200008ac
 8001c64:	200008c8 	.word	0x200008c8

08001c68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <SystemInit+0x20>)
 8001c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c72:	4a05      	ldr	r2, [pc, #20]	; (8001c88 <SystemInit+0x20>)
 8001c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cc4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c90:	480d      	ldr	r0, [pc, #52]	; (8001cc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c92:	490e      	ldr	r1, [pc, #56]	; (8001ccc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c94:	4a0e      	ldr	r2, [pc, #56]	; (8001cd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c98:	e002      	b.n	8001ca0 <LoopCopyDataInit>

08001c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c9e:	3304      	adds	r3, #4

08001ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ca4:	d3f9      	bcc.n	8001c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ca6:	4a0b      	ldr	r2, [pc, #44]	; (8001cd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ca8:	4c0b      	ldr	r4, [pc, #44]	; (8001cd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cac:	e001      	b.n	8001cb2 <LoopFillZerobss>

08001cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cb0:	3204      	adds	r2, #4

08001cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cb4:	d3fb      	bcc.n	8001cae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cb6:	f7ff ffd7 	bl	8001c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cba:	f003 fa23 	bl	8005104 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cbe:	f7fe fcd1 	bl	8000664 <main>
  bx  lr    
 8001cc2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001cc4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ccc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001cd0:	08008444 	.word	0x08008444
  ldr r2, =_sbss
 8001cd4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001cd8:	200008c4 	.word	0x200008c4

08001cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cdc:	e7fe      	b.n	8001cdc <ADC_IRQHandler>
	...

08001ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <HAL_Init+0x40>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	; (8001d20 <HAL_Init+0x40>)
 8001cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_Init+0x40>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <HAL_Init+0x40>)
 8001cf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <HAL_Init+0x40>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a07      	ldr	r2, [pc, #28]	; (8001d20 <HAL_Init+0x40>)
 8001d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d08:	2003      	movs	r0, #3
 8001d0a:	f000 f931 	bl	8001f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f000 f808 	bl	8001d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d14:	f7ff fd70 	bl	80017f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023c00 	.word	0x40023c00

08001d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d2c:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_InitTick+0x54>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_InitTick+0x58>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	4619      	mov	r1, r3
 8001d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 f93b 	bl	8001fbe <HAL_SYSTICK_Config>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00e      	b.n	8001d70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b0f      	cmp	r3, #15
 8001d56:	d80a      	bhi.n	8001d6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	f000 f911 	bl	8001f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d64:	4a06      	ldr	r2, [pc, #24]	; (8001d80 <HAL_InitTick+0x5c>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	e000      	b.n	8001d70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	20000008 	.word	0x20000008
 8001d80:	20000004 	.word	0x20000004

08001d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_IncTick+0x20>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_IncTick+0x24>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4413      	add	r3, r2
 8001d94:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <HAL_IncTick+0x24>)
 8001d96:	6013      	str	r3, [r2, #0]
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	20000008 	.word	0x20000008
 8001da8:	200008b0 	.word	0x200008b0

08001dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return uwTick;
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <HAL_GetTick+0x14>)
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	200008b0 	.word	0x200008b0

08001dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dcc:	f7ff ffee 	bl	8001dac <HAL_GetTick>
 8001dd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ddc:	d005      	beq.n	8001dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <HAL_Delay+0x44>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4413      	add	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dea:	bf00      	nop
 8001dec:	f7ff ffde 	bl	8001dac <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d8f7      	bhi.n	8001dec <HAL_Delay+0x28>
  {
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000008 	.word	0x20000008

08001e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <__NVIC_SetPriorityGrouping+0x44>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e3e:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <__NVIC_SetPriorityGrouping+0x44>)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	60d3      	str	r3, [r2, #12]
}
 8001e44:	bf00      	nop
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <__NVIC_GetPriorityGrouping+0x18>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	0a1b      	lsrs	r3, r3, #8
 8001e5e:	f003 0307 	and.w	r3, r3, #7
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	6039      	str	r1, [r7, #0]
 8001e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	db0a      	blt.n	8001e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	490c      	ldr	r1, [pc, #48]	; (8001ebc <__NVIC_SetPriority+0x4c>)
 8001e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8e:	0112      	lsls	r2, r2, #4
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	440b      	add	r3, r1
 8001e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e98:	e00a      	b.n	8001eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4908      	ldr	r1, [pc, #32]	; (8001ec0 <__NVIC_SetPriority+0x50>)
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	3b04      	subs	r3, #4
 8001ea8:	0112      	lsls	r2, r2, #4
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	440b      	add	r3, r1
 8001eae:	761a      	strb	r2, [r3, #24]
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000e100 	.word	0xe000e100
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b089      	sub	sp, #36	; 0x24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f1c3 0307 	rsb	r3, r3, #7
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	bf28      	it	cs
 8001ee2:	2304      	movcs	r3, #4
 8001ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	2b06      	cmp	r3, #6
 8001eec:	d902      	bls.n	8001ef4 <NVIC_EncodePriority+0x30>
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3b03      	subs	r3, #3
 8001ef2:	e000      	b.n	8001ef6 <NVIC_EncodePriority+0x32>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43da      	mvns	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	401a      	ands	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	43d9      	mvns	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	4313      	orrs	r3, r2
         );
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3724      	adds	r7, #36	; 0x24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f3c:	d301      	bcc.n	8001f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e00f      	b.n	8001f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f42:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <SysTick_Config+0x40>)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f4a:	210f      	movs	r1, #15
 8001f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f50:	f7ff ff8e 	bl	8001e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <SysTick_Config+0x40>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f5a:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <SysTick_Config+0x40>)
 8001f5c:	2207      	movs	r2, #7
 8001f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	e000e010 	.word	0xe000e010

08001f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff ff47 	bl	8001e0c <__NVIC_SetPriorityGrouping>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b086      	sub	sp, #24
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f98:	f7ff ff5c 	bl	8001e54 <__NVIC_GetPriorityGrouping>
 8001f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	68b9      	ldr	r1, [r7, #8]
 8001fa2:	6978      	ldr	r0, [r7, #20]
 8001fa4:	f7ff ff8e 	bl	8001ec4 <NVIC_EncodePriority>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ff5d 	bl	8001e70 <__NVIC_SetPriority>
}
 8001fb6:	bf00      	nop
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff ffb0 	bl	8001f2c <SysTick_Config>
 8001fcc:	4603      	mov	r3, r0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e06c      	b.n	80020c4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d106      	bne.n	8002002 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2223      	movs	r2, #35	; 0x23
 8001ff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff fc23 	bl	8001848 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	4b31      	ldr	r3, [pc, #196]	; (80020cc <HAL_ETH_Init+0xf4>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	4a30      	ldr	r2, [pc, #192]	; (80020cc <HAL_ETH_Init+0xf4>)
 800200c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002010:	6453      	str	r3, [r2, #68]	; 0x44
 8002012:	4b2e      	ldr	r3, [pc, #184]	; (80020cc <HAL_ETH_Init+0xf4>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800201e:	4b2c      	ldr	r3, [pc, #176]	; (80020d0 <HAL_ETH_Init+0xf8>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	4a2b      	ldr	r2, [pc, #172]	; (80020d0 <HAL_ETH_Init+0xf8>)
 8002024:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002028:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800202a:	4b29      	ldr	r3, [pc, #164]	; (80020d0 <HAL_ETH_Init+0xf8>)
 800202c:	685a      	ldr	r2, [r3, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	4927      	ldr	r1, [pc, #156]	; (80020d0 <HAL_ETH_Init+0xf8>)
 8002034:	4313      	orrs	r3, r2
 8002036:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002038:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <HAL_ETH_Init+0xf8>)
 800203a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002052:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002054:	f7ff feaa 	bl	8001dac <HAL_GetTick>
 8002058:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800205a:	e011      	b.n	8002080 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800205c:	f7ff fea6 	bl	8001dac <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800206a:	d909      	bls.n	8002080 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2204      	movs	r2, #4
 8002070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	22e0      	movs	r2, #224	; 0xe0
 8002078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e021      	b.n	80020c4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1e4      	bne.n	800205c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f958 	bl	8002348 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f9ff 	bl	800249c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 fa55 	bl	800254e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	461a      	mov	r2, r3
 80020aa:	2100      	movs	r1, #0
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f9bd 	bl	800242c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2210      	movs	r2, #16
 80020be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40013800 	.word	0x40013800

080020d4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	4b51      	ldr	r3, [pc, #324]	; (8002230 <ETH_SetMACConfig+0x15c>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	7c1b      	ldrb	r3, [r3, #16]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d102      	bne.n	80020fc <ETH_SetMACConfig+0x28>
 80020f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80020fa:	e000      	b.n	80020fe <ETH_SetMACConfig+0x2a>
 80020fc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	7c5b      	ldrb	r3, [r3, #17]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d102      	bne.n	800210c <ETH_SetMACConfig+0x38>
 8002106:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800210a:	e000      	b.n	800210e <ETH_SetMACConfig+0x3a>
 800210c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800210e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002114:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	7fdb      	ldrb	r3, [r3, #31]
 800211a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800211c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002122:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	7f92      	ldrb	r2, [r2, #30]
 8002128:	2a00      	cmp	r2, #0
 800212a:	d102      	bne.n	8002132 <ETH_SetMACConfig+0x5e>
 800212c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002130:	e000      	b.n	8002134 <ETH_SetMACConfig+0x60>
 8002132:	2200      	movs	r2, #0
                        macconf->Speed |
 8002134:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	7f1b      	ldrb	r3, [r3, #28]
 800213a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800213c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002142:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	791b      	ldrb	r3, [r3, #4]
 8002148:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800214a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002152:	2a00      	cmp	r2, #0
 8002154:	d102      	bne.n	800215c <ETH_SetMACConfig+0x88>
 8002156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800215a:	e000      	b.n	800215e <ETH_SetMACConfig+0x8a>
 800215c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800215e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	7bdb      	ldrb	r3, [r3, #15]
 8002164:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002166:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800216c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002174:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002176:	4313      	orrs	r3, r2
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	4313      	orrs	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800218e:	2001      	movs	r0, #1
 8002190:	f7ff fe18 	bl	8001dc4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80021aa:	4013      	ands	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80021ba:	2a00      	cmp	r2, #0
 80021bc:	d101      	bne.n	80021c2 <ETH_SetMACConfig+0xee>
 80021be:	2280      	movs	r2, #128	; 0x80
 80021c0:	e000      	b.n	80021c4 <ETH_SetMACConfig+0xf0>
 80021c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021c4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80021ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80021d2:	2a01      	cmp	r2, #1
 80021d4:	d101      	bne.n	80021da <ETH_SetMACConfig+0x106>
 80021d6:	2208      	movs	r2, #8
 80021d8:	e000      	b.n	80021dc <ETH_SetMACConfig+0x108>
 80021da:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80021dc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80021e4:	2a01      	cmp	r2, #1
 80021e6:	d101      	bne.n	80021ec <ETH_SetMACConfig+0x118>
 80021e8:	2204      	movs	r2, #4
 80021ea:	e000      	b.n	80021ee <ETH_SetMACConfig+0x11a>
 80021ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80021ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80021f6:	2a01      	cmp	r2, #1
 80021f8:	d101      	bne.n	80021fe <ETH_SetMACConfig+0x12a>
 80021fa:	2202      	movs	r2, #2
 80021fc:	e000      	b.n	8002200 <ETH_SetMACConfig+0x12c>
 80021fe:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002200:	4313      	orrs	r3, r2
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4313      	orrs	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002218:	2001      	movs	r0, #1
 800221a:	f7ff fdd3 	bl	8001dc4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	619a      	str	r2, [r3, #24]
}
 8002226:	bf00      	nop
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	ff20810f 	.word	0xff20810f

08002234 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	4b3d      	ldr	r3, [pc, #244]	; (8002344 <ETH_SetDMAConfig+0x110>)
 800224e:	4013      	ands	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	7b1b      	ldrb	r3, [r3, #12]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d102      	bne.n	8002260 <ETH_SetDMAConfig+0x2c>
 800225a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800225e:	e000      	b.n	8002262 <ETH_SetDMAConfig+0x2e>
 8002260:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	7b5b      	ldrb	r3, [r3, #13]
 8002266:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002268:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	7f52      	ldrb	r2, [r2, #29]
 800226e:	2a00      	cmp	r2, #0
 8002270:	d102      	bne.n	8002278 <ETH_SetDMAConfig+0x44>
 8002272:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002276:	e000      	b.n	800227a <ETH_SetDMAConfig+0x46>
 8002278:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800227a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	7b9b      	ldrb	r3, [r3, #14]
 8002280:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002282:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002288:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	7f1b      	ldrb	r3, [r3, #28]
 800228e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002290:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	7f9b      	ldrb	r3, [r3, #30]
 8002296:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002298:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800229e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022a6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80022a8:	4313      	orrs	r3, r2
 80022aa:	68fa      	ldr	r2, [r7, #12]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b8:	461a      	mov	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022ca:	2001      	movs	r0, #1
 80022cc:	f7ff fd7a 	bl	8001dc4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022d8:	461a      	mov	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	791b      	ldrb	r3, [r3, #4]
 80022e2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022e8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80022ee:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80022f4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022fc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80022fe:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002304:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002306:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800230c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6812      	ldr	r2, [r2, #0]
 8002312:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002316:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800231a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002328:	2001      	movs	r0, #1
 800232a:	f7ff fd4b 	bl	8001dc4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002336:	461a      	mov	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6013      	str	r3, [r2, #0]
}
 800233c:	bf00      	nop
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	f8de3f23 	.word	0xf8de3f23

08002348 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b0a6      	sub	sp, #152	; 0x98
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002350:	2301      	movs	r3, #1
 8002352:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002356:	2301      	movs	r3, #1
 8002358:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800235c:	2300      	movs	r3, #0
 800235e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002360:	2300      	movs	r3, #0
 8002362:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002366:	2301      	movs	r3, #1
 8002368:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800236c:	2300      	movs	r3, #0
 800236e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002372:	2301      	movs	r3, #1
 8002374:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002378:	2300      	movs	r3, #0
 800237a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002384:	2300      	movs	r3, #0
 8002386:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002388:	2300      	movs	r3, #0
 800238a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800238e:	2300      	movs	r3, #0
 8002390:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002392:	2300      	movs	r3, #0
 8002394:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002398:	2300      	movs	r3, #0
 800239a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800239e:	2300      	movs	r3, #0
 80023a0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80023aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023ae:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80023b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80023bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023c0:	4619      	mov	r1, r3
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff fe86 	bl	80020d4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80023c8:	2301      	movs	r3, #1
 80023ca:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80023cc:	2301      	movs	r3, #1
 80023ce:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80023d0:	2301      	movs	r3, #1
 80023d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80023d6:	2301      	movs	r3, #1
 80023d8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80023ea:	2300      	movs	r3, #0
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80023ee:	2301      	movs	r3, #1
 80023f0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80023f4:	2301      	movs	r3, #1
 80023f6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80023f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023fc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80023fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002402:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002408:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800240a:	2301      	movs	r3, #1
 800240c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002410:	2300      	movs	r3, #0
 8002412:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002414:	2300      	movs	r3, #0
 8002416:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002418:	f107 0308 	add.w	r3, r7, #8
 800241c:	4619      	mov	r1, r3
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff ff08 	bl	8002234 <ETH_SetDMAConfig>
}
 8002424:	bf00      	nop
 8002426:	3798      	adds	r7, #152	; 0x98
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3305      	adds	r3, #5
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	021b      	lsls	r3, r3, #8
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	3204      	adds	r2, #4
 8002444:	7812      	ldrb	r2, [r2, #0]
 8002446:	4313      	orrs	r3, r2
 8002448:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <ETH_MACAddressConfig+0x68>)
 800244e:	4413      	add	r3, r2
 8002450:	461a      	mov	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3303      	adds	r3, #3
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	061a      	lsls	r2, r3, #24
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3302      	adds	r3, #2
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	041b      	lsls	r3, r3, #16
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3301      	adds	r3, #1
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	4313      	orrs	r3, r2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	7812      	ldrb	r2, [r2, #0]
 8002476:	4313      	orrs	r3, r2
 8002478:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	4b06      	ldr	r3, [pc, #24]	; (8002498 <ETH_MACAddressConfig+0x6c>)
 800247e:	4413      	add	r3, r2
 8002480:	461a      	mov	r2, r3
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	6013      	str	r3, [r2, #0]
}
 8002486:	bf00      	nop
 8002488:	371c      	adds	r7, #28
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40028040 	.word	0x40028040
 8002498:	40028044 	.word	0x40028044

0800249c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	e03e      	b.n	8002528 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68d9      	ldr	r1, [r3, #12]
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	440b      	add	r3, r1
 80024ba:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2200      	movs	r2, #0
 80024c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2200      	movs	r2, #0
 80024cc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2200      	movs	r2, #0
 80024d2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	3206      	adds	r2, #6
 80024dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d80c      	bhi.n	800250c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68d9      	ldr	r1, [r3, #12]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	440b      	add	r3, r1
 8002504:	461a      	mov	r2, r3
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	e004      	b.n	8002516 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	461a      	mov	r2, r3
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	3301      	adds	r3, #1
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2b03      	cmp	r3, #3
 800252c:	d9bd      	bls.n	80024aa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002540:	611a      	str	r2, [r3, #16]
}
 8002542:	bf00      	nop
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800254e:	b480      	push	{r7}
 8002550:	b085      	sub	sp, #20
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	e046      	b.n	80025ea <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6919      	ldr	r1, [r3, #16]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	440b      	add	r3, r1
 800256c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2200      	movs	r2, #0
 8002578:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2200      	movs	r2, #0
 800257e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2200      	movs	r2, #0
 8002584:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2200      	movs	r2, #0
 800258a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2200      	movs	r2, #0
 8002590:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002598:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80025a0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80025ae:	68b9      	ldr	r1, [r7, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	3212      	adds	r2, #18
 80025b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d80c      	bhi.n	80025da <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6919      	ldr	r1, [r3, #16]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	440b      	add	r3, r1
 80025d2:	461a      	mov	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	60da      	str	r2, [r3, #12]
 80025d8:	e004      	b.n	80025e4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	461a      	mov	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	3301      	adds	r3, #1
 80025e8:	60fb      	str	r3, [r7, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d9b5      	bls.n	800255c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691a      	ldr	r2, [r3, #16]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800261a:	60da      	str	r2, [r3, #12]
}
 800261c:	bf00      	nop
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002628:	b480      	push	{r7}
 800262a:	b089      	sub	sp, #36	; 0x24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002636:	2300      	movs	r3, #0
 8002638:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800263a:	2300      	movs	r3, #0
 800263c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
 8002642:	e177      	b.n	8002934 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002644:	2201      	movs	r2, #1
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	4013      	ands	r3, r2
 8002656:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	429a      	cmp	r2, r3
 800265e:	f040 8166 	bne.w	800292e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b01      	cmp	r3, #1
 800266c:	d005      	beq.n	800267a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002676:	2b02      	cmp	r3, #2
 8002678:	d130      	bne.n	80026dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	2203      	movs	r2, #3
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026b0:	2201      	movs	r2, #1
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f003 0201 	and.w	r2, r3, #1
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d017      	beq.n	8002718 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	2203      	movs	r2, #3
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d123      	bne.n	800276c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	08da      	lsrs	r2, r3, #3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3208      	adds	r2, #8
 800272c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002730:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	220f      	movs	r2, #15
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	691a      	ldr	r2, [r3, #16]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	08da      	lsrs	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	3208      	adds	r2, #8
 8002766:	69b9      	ldr	r1, [r7, #24]
 8002768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	2203      	movs	r2, #3
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0203 	and.w	r2, r3, #3
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80c0 	beq.w	800292e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	4b66      	ldr	r3, [pc, #408]	; (800294c <HAL_GPIO_Init+0x324>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	4a65      	ldr	r2, [pc, #404]	; (800294c <HAL_GPIO_Init+0x324>)
 80027b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027bc:	6453      	str	r3, [r2, #68]	; 0x44
 80027be:	4b63      	ldr	r3, [pc, #396]	; (800294c <HAL_GPIO_Init+0x324>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027ca:	4a61      	ldr	r2, [pc, #388]	; (8002950 <HAL_GPIO_Init+0x328>)
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	089b      	lsrs	r3, r3, #2
 80027d0:	3302      	adds	r3, #2
 80027d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	220f      	movs	r2, #15
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a58      	ldr	r2, [pc, #352]	; (8002954 <HAL_GPIO_Init+0x32c>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d037      	beq.n	8002866 <HAL_GPIO_Init+0x23e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a57      	ldr	r2, [pc, #348]	; (8002958 <HAL_GPIO_Init+0x330>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d031      	beq.n	8002862 <HAL_GPIO_Init+0x23a>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a56      	ldr	r2, [pc, #344]	; (800295c <HAL_GPIO_Init+0x334>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d02b      	beq.n	800285e <HAL_GPIO_Init+0x236>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a55      	ldr	r2, [pc, #340]	; (8002960 <HAL_GPIO_Init+0x338>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d025      	beq.n	800285a <HAL_GPIO_Init+0x232>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a54      	ldr	r2, [pc, #336]	; (8002964 <HAL_GPIO_Init+0x33c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d01f      	beq.n	8002856 <HAL_GPIO_Init+0x22e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a53      	ldr	r2, [pc, #332]	; (8002968 <HAL_GPIO_Init+0x340>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d019      	beq.n	8002852 <HAL_GPIO_Init+0x22a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a52      	ldr	r2, [pc, #328]	; (800296c <HAL_GPIO_Init+0x344>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d013      	beq.n	800284e <HAL_GPIO_Init+0x226>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a51      	ldr	r2, [pc, #324]	; (8002970 <HAL_GPIO_Init+0x348>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d00d      	beq.n	800284a <HAL_GPIO_Init+0x222>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a50      	ldr	r2, [pc, #320]	; (8002974 <HAL_GPIO_Init+0x34c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d007      	beq.n	8002846 <HAL_GPIO_Init+0x21e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a4f      	ldr	r2, [pc, #316]	; (8002978 <HAL_GPIO_Init+0x350>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d101      	bne.n	8002842 <HAL_GPIO_Init+0x21a>
 800283e:	2309      	movs	r3, #9
 8002840:	e012      	b.n	8002868 <HAL_GPIO_Init+0x240>
 8002842:	230a      	movs	r3, #10
 8002844:	e010      	b.n	8002868 <HAL_GPIO_Init+0x240>
 8002846:	2308      	movs	r3, #8
 8002848:	e00e      	b.n	8002868 <HAL_GPIO_Init+0x240>
 800284a:	2307      	movs	r3, #7
 800284c:	e00c      	b.n	8002868 <HAL_GPIO_Init+0x240>
 800284e:	2306      	movs	r3, #6
 8002850:	e00a      	b.n	8002868 <HAL_GPIO_Init+0x240>
 8002852:	2305      	movs	r3, #5
 8002854:	e008      	b.n	8002868 <HAL_GPIO_Init+0x240>
 8002856:	2304      	movs	r3, #4
 8002858:	e006      	b.n	8002868 <HAL_GPIO_Init+0x240>
 800285a:	2303      	movs	r3, #3
 800285c:	e004      	b.n	8002868 <HAL_GPIO_Init+0x240>
 800285e:	2302      	movs	r3, #2
 8002860:	e002      	b.n	8002868 <HAL_GPIO_Init+0x240>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <HAL_GPIO_Init+0x240>
 8002866:	2300      	movs	r3, #0
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	f002 0203 	and.w	r2, r2, #3
 800286e:	0092      	lsls	r2, r2, #2
 8002870:	4093      	lsls	r3, r2
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002878:	4935      	ldr	r1, [pc, #212]	; (8002950 <HAL_GPIO_Init+0x328>)
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	089b      	lsrs	r3, r3, #2
 800287e:	3302      	adds	r3, #2
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002886:	4b3d      	ldr	r3, [pc, #244]	; (800297c <HAL_GPIO_Init+0x354>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	43db      	mvns	r3, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4013      	ands	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028aa:	4a34      	ldr	r2, [pc, #208]	; (800297c <HAL_GPIO_Init+0x354>)
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028b0:	4b32      	ldr	r3, [pc, #200]	; (800297c <HAL_GPIO_Init+0x354>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	4013      	ands	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028d4:	4a29      	ldr	r2, [pc, #164]	; (800297c <HAL_GPIO_Init+0x354>)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028da:	4b28      	ldr	r3, [pc, #160]	; (800297c <HAL_GPIO_Init+0x354>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028fe:	4a1f      	ldr	r2, [pc, #124]	; (800297c <HAL_GPIO_Init+0x354>)
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002904:	4b1d      	ldr	r3, [pc, #116]	; (800297c <HAL_GPIO_Init+0x354>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002928:	4a14      	ldr	r2, [pc, #80]	; (800297c <HAL_GPIO_Init+0x354>)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3301      	adds	r3, #1
 8002932:	61fb      	str	r3, [r7, #28]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	2b0f      	cmp	r3, #15
 8002938:	f67f ae84 	bls.w	8002644 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	3724      	adds	r7, #36	; 0x24
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40023800 	.word	0x40023800
 8002950:	40013800 	.word	0x40013800
 8002954:	40020000 	.word	0x40020000
 8002958:	40020400 	.word	0x40020400
 800295c:	40020800 	.word	0x40020800
 8002960:	40020c00 	.word	0x40020c00
 8002964:	40021000 	.word	0x40021000
 8002968:	40021400 	.word	0x40021400
 800296c:	40021800 	.word	0x40021800
 8002970:	40021c00 	.word	0x40021c00
 8002974:	40022000 	.word	0x40022000
 8002978:	40022400 	.word	0x40022400
 800297c:	40013c00 	.word	0x40013c00

08002980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	807b      	strh	r3, [r7, #2]
 800298c:	4613      	mov	r3, r2
 800298e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002990:	787b      	ldrb	r3, [r7, #1]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002996:	887a      	ldrh	r2, [r7, #2]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800299c:	e003      	b.n	80029a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800299e:	887b      	ldrh	r3, [r7, #2]
 80029a0:	041a      	lsls	r2, r3, #16
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	619a      	str	r2, [r3, #24]
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b085      	sub	sp, #20
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	460b      	mov	r3, r1
 80029bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029c4:	887a      	ldrh	r2, [r7, #2]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4013      	ands	r3, r2
 80029ca:	041a      	lsls	r2, r3, #16
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	43d9      	mvns	r1, r3
 80029d0:	887b      	ldrh	r3, [r7, #2]
 80029d2:	400b      	ands	r3, r1
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	619a      	str	r2, [r3, #24]
}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e12b      	b.n	8002c52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d106      	bne.n	8002a14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7fe ffe0 	bl	80019d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2224      	movs	r2, #36	; 0x24
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0201 	bic.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a4c:	f001 fbc2 	bl	80041d4 <HAL_RCC_GetPCLK1Freq>
 8002a50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	4a81      	ldr	r2, [pc, #516]	; (8002c5c <HAL_I2C_Init+0x274>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d807      	bhi.n	8002a6c <HAL_I2C_Init+0x84>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4a80      	ldr	r2, [pc, #512]	; (8002c60 <HAL_I2C_Init+0x278>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	bf94      	ite	ls
 8002a64:	2301      	movls	r3, #1
 8002a66:	2300      	movhi	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	e006      	b.n	8002a7a <HAL_I2C_Init+0x92>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4a7d      	ldr	r2, [pc, #500]	; (8002c64 <HAL_I2C_Init+0x27c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	bf94      	ite	ls
 8002a74:	2301      	movls	r3, #1
 8002a76:	2300      	movhi	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e0e7      	b.n	8002c52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4a78      	ldr	r2, [pc, #480]	; (8002c68 <HAL_I2C_Init+0x280>)
 8002a86:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8a:	0c9b      	lsrs	r3, r3, #18
 8002a8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6a1b      	ldr	r3, [r3, #32]
 8002aa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	4a6a      	ldr	r2, [pc, #424]	; (8002c5c <HAL_I2C_Init+0x274>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d802      	bhi.n	8002abc <HAL_I2C_Init+0xd4>
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	e009      	b.n	8002ad0 <HAL_I2C_Init+0xe8>
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ac2:	fb02 f303 	mul.w	r3, r2, r3
 8002ac6:	4a69      	ldr	r2, [pc, #420]	; (8002c6c <HAL_I2C_Init+0x284>)
 8002ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8002acc:	099b      	lsrs	r3, r3, #6
 8002ace:	3301      	adds	r3, #1
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6812      	ldr	r2, [r2, #0]
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ae2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	495c      	ldr	r1, [pc, #368]	; (8002c5c <HAL_I2C_Init+0x274>)
 8002aec:	428b      	cmp	r3, r1
 8002aee:	d819      	bhi.n	8002b24 <HAL_I2C_Init+0x13c>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1e59      	subs	r1, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002afe:	1c59      	adds	r1, r3, #1
 8002b00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b04:	400b      	ands	r3, r1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00a      	beq.n	8002b20 <HAL_I2C_Init+0x138>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1e59      	subs	r1, r3, #1
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b18:	3301      	adds	r3, #1
 8002b1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b1e:	e051      	b.n	8002bc4 <HAL_I2C_Init+0x1dc>
 8002b20:	2304      	movs	r3, #4
 8002b22:	e04f      	b.n	8002bc4 <HAL_I2C_Init+0x1dc>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d111      	bne.n	8002b50 <HAL_I2C_Init+0x168>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1e58      	subs	r0, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6859      	ldr	r1, [r3, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	440b      	add	r3, r1
 8002b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	bf0c      	ite	eq
 8002b48:	2301      	moveq	r3, #1
 8002b4a:	2300      	movne	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	e012      	b.n	8002b76 <HAL_I2C_Init+0x18e>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	1e58      	subs	r0, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6859      	ldr	r1, [r3, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	0099      	lsls	r1, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b66:	3301      	adds	r3, #1
 8002b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	bf0c      	ite	eq
 8002b70:	2301      	moveq	r3, #1
 8002b72:	2300      	movne	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_I2C_Init+0x196>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e022      	b.n	8002bc4 <HAL_I2C_Init+0x1dc>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10e      	bne.n	8002ba4 <HAL_I2C_Init+0x1bc>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	1e58      	subs	r0, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6859      	ldr	r1, [r3, #4]
 8002b8e:	460b      	mov	r3, r1
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	440b      	add	r3, r1
 8002b94:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b98:	3301      	adds	r3, #1
 8002b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ba2:	e00f      	b.n	8002bc4 <HAL_I2C_Init+0x1dc>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1e58      	subs	r0, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6859      	ldr	r1, [r3, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	0099      	lsls	r1, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bba:	3301      	adds	r3, #1
 8002bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	6809      	ldr	r1, [r1, #0]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69da      	ldr	r2, [r3, #28]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bf2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6911      	ldr	r1, [r2, #16]
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68d2      	ldr	r2, [r2, #12]
 8002bfe:	4311      	orrs	r1, r2
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6812      	ldr	r2, [r2, #0]
 8002c04:	430b      	orrs	r3, r1
 8002c06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	000186a0 	.word	0x000186a0
 8002c60:	001e847f 	.word	0x001e847f
 8002c64:	003d08ff 	.word	0x003d08ff
 8002c68:	431bde83 	.word	0x431bde83
 8002c6c:	10624dd3 	.word	0x10624dd3

08002c70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08c      	sub	sp, #48	; 0x30
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	4608      	mov	r0, r1
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4603      	mov	r3, r0
 8002c80:	817b      	strh	r3, [r7, #10]
 8002c82:	460b      	mov	r3, r1
 8002c84:	813b      	strh	r3, [r7, #8]
 8002c86:	4613      	mov	r3, r2
 8002c88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c8a:	f7ff f88f 	bl	8001dac <HAL_GetTick>
 8002c8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	f040 8208 	bne.w	80030ae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	2319      	movs	r3, #25
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	497b      	ldr	r1, [pc, #492]	; (8002e94 <HAL_I2C_Mem_Read+0x224>)
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 faef 	bl	800328c <I2C_WaitOnFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e1fb      	b.n	80030b0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_I2C_Mem_Read+0x56>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e1f4      	b.n	80030b0 <HAL_I2C_Mem_Read+0x440>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d007      	beq.n	8002cec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0201 	orr.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2222      	movs	r2, #34	; 0x22
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2240      	movs	r2, #64	; 0x40
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4a5b      	ldr	r2, [pc, #364]	; (8002e98 <HAL_I2C_Mem_Read+0x228>)
 8002d2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d2e:	88f8      	ldrh	r0, [r7, #6]
 8002d30:	893a      	ldrh	r2, [r7, #8]
 8002d32:	8979      	ldrh	r1, [r7, #10]
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	9301      	str	r3, [sp, #4]
 8002d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f9bc 	bl	80030bc <I2C_RequestMemoryRead>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e1b0      	b.n	80030b0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d113      	bne.n	8002d7e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d56:	2300      	movs	r3, #0
 8002d58:	623b      	str	r3, [r7, #32]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	623b      	str	r3, [r7, #32]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	623b      	str	r3, [r7, #32]
 8002d6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	e184      	b.n	8003088 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d11b      	bne.n	8002dbe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	61fb      	str	r3, [r7, #28]
 8002daa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e164      	b.n	8003088 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d11b      	bne.n	8002dfe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002de4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	61bb      	str	r3, [r7, #24]
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	e144      	b.n	8003088 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e14:	e138      	b.n	8003088 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	f200 80f1 	bhi.w	8003002 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d123      	bne.n	8002e70 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 fb44 	bl	80034ba <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e139      	b.n	80030b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e6e:	e10b      	b.n	8003088 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d14e      	bne.n	8002f16 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7e:	2200      	movs	r2, #0
 8002e80:	4906      	ldr	r1, [pc, #24]	; (8002e9c <HAL_I2C_Mem_Read+0x22c>)
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 fa02 	bl	800328c <I2C_WaitOnFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e10e      	b.n	80030b0 <HAL_I2C_Mem_Read+0x440>
 8002e92:	bf00      	nop
 8002e94:	00100002 	.word	0x00100002
 8002e98:	ffff0000 	.word	0xffff0000
 8002e9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691a      	ldr	r2, [r3, #16]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f14:	e0b8      	b.n	8003088 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	4966      	ldr	r1, [pc, #408]	; (80030b8 <HAL_I2C_Mem_Read+0x448>)
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 f9b3 	bl	800328c <I2C_WaitOnFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0bf      	b.n	80030b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f78:	2200      	movs	r2, #0
 8002f7a:	494f      	ldr	r1, [pc, #316]	; (80030b8 <HAL_I2C_Mem_Read+0x448>)
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 f985 	bl	800328c <I2C_WaitOnFlagUntilTimeout>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e091      	b.n	80030b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003000:	e042      	b.n	8003088 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003004:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 fa57 	bl	80034ba <I2C_WaitOnRXNEFlagUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e04c      	b.n	80030b0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b04      	cmp	r3, #4
 8003054:	d118      	bne.n	8003088 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308c:	2b00      	cmp	r3, #0
 800308e:	f47f aec2 	bne.w	8002e16 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	e000      	b.n	80030b0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80030ae:	2302      	movs	r3, #2
  }
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3728      	adds	r7, #40	; 0x28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	00010004 	.word	0x00010004

080030bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	4608      	mov	r0, r1
 80030c6:	4611      	mov	r1, r2
 80030c8:	461a      	mov	r2, r3
 80030ca:	4603      	mov	r3, r0
 80030cc:	817b      	strh	r3, [r7, #10]
 80030ce:	460b      	mov	r3, r1
 80030d0:	813b      	strh	r3, [r7, #8]
 80030d2:	4613      	mov	r3, r2
 80030d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 f8c2 	bl	800328c <I2C_WaitOnFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00d      	beq.n	800312a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800311c:	d103      	bne.n	8003126 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003124:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e0aa      	b.n	8003280 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800312a:	897b      	ldrh	r3, [r7, #10]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	461a      	mov	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003138:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	6a3a      	ldr	r2, [r7, #32]
 800313e:	4952      	ldr	r1, [pc, #328]	; (8003288 <I2C_RequestMemoryRead+0x1cc>)
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 f8fa 	bl	800333a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e097      	b.n	8003280 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003168:	6a39      	ldr	r1, [r7, #32]
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 f964 	bl	8003438 <I2C_WaitOnTXEFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00d      	beq.n	8003192 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	2b04      	cmp	r3, #4
 800317c:	d107      	bne.n	800318e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e076      	b.n	8003280 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003192:	88fb      	ldrh	r3, [r7, #6]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d105      	bne.n	80031a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003198:	893b      	ldrh	r3, [r7, #8]
 800319a:	b2da      	uxtb	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	611a      	str	r2, [r3, #16]
 80031a2:	e021      	b.n	80031e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031a4:	893b      	ldrh	r3, [r7, #8]
 80031a6:	0a1b      	lsrs	r3, r3, #8
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b4:	6a39      	ldr	r1, [r7, #32]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f93e 	bl	8003438 <I2C_WaitOnTXEFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00d      	beq.n	80031de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d107      	bne.n	80031da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e050      	b.n	8003280 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031de:	893b      	ldrh	r3, [r7, #8]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ea:	6a39      	ldr	r1, [r7, #32]
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 f923 	bl	8003438 <I2C_WaitOnTXEFlagUntilTimeout>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00d      	beq.n	8003214 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	2b04      	cmp	r3, #4
 80031fe:	d107      	bne.n	8003210 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800320e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e035      	b.n	8003280 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003222:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	2200      	movs	r2, #0
 800322c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 f82b 	bl	800328c <I2C_WaitOnFlagUntilTimeout>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00d      	beq.n	8003258 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800324a:	d103      	bne.n	8003254 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003252:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e013      	b.n	8003280 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003258:	897b      	ldrh	r3, [r7, #10]
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	b2da      	uxtb	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	6a3a      	ldr	r2, [r7, #32]
 800326c:	4906      	ldr	r1, [pc, #24]	; (8003288 <I2C_RequestMemoryRead+0x1cc>)
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 f863 	bl	800333a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	00010002 	.word	0x00010002

0800328c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	4613      	mov	r3, r2
 800329a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800329c:	e025      	b.n	80032ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a4:	d021      	beq.n	80032ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a6:	f7fe fd81 	bl	8001dac <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d302      	bcc.n	80032bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d116      	bne.n	80032ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f043 0220 	orr.w	r2, r3, #32
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e023      	b.n	8003332 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	0c1b      	lsrs	r3, r3, #16
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d10d      	bne.n	8003310 <I2C_WaitOnFlagUntilTimeout+0x84>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	43da      	mvns	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	4013      	ands	r3, r2
 8003300:	b29b      	uxth	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	bf0c      	ite	eq
 8003306:	2301      	moveq	r3, #1
 8003308:	2300      	movne	r3, #0
 800330a:	b2db      	uxtb	r3, r3
 800330c:	461a      	mov	r2, r3
 800330e:	e00c      	b.n	800332a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	43da      	mvns	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	4013      	ands	r3, r2
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	bf0c      	ite	eq
 8003322:	2301      	moveq	r3, #1
 8003324:	2300      	movne	r3, #0
 8003326:	b2db      	uxtb	r3, r3
 8003328:	461a      	mov	r2, r3
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	429a      	cmp	r2, r3
 800332e:	d0b6      	beq.n	800329e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b084      	sub	sp, #16
 800333e:	af00      	add	r7, sp, #0
 8003340:	60f8      	str	r0, [r7, #12]
 8003342:	60b9      	str	r1, [r7, #8]
 8003344:	607a      	str	r2, [r7, #4]
 8003346:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003348:	e051      	b.n	80033ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003358:	d123      	bne.n	80033a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003368:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003372:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f043 0204 	orr.w	r2, r3, #4
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e046      	b.n	8003430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a8:	d021      	beq.n	80033ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033aa:	f7fe fcff 	bl	8001dac <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d302      	bcc.n	80033c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d116      	bne.n	80033ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	f043 0220 	orr.w	r2, r3, #32
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e020      	b.n	8003430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	0c1b      	lsrs	r3, r3, #16
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d10c      	bne.n	8003412 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	43da      	mvns	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4013      	ands	r3, r2
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	bf14      	ite	ne
 800340a:	2301      	movne	r3, #1
 800340c:	2300      	moveq	r3, #0
 800340e:	b2db      	uxtb	r3, r3
 8003410:	e00b      	b.n	800342a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	43da      	mvns	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	4013      	ands	r3, r2
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf14      	ite	ne
 8003424:	2301      	movne	r3, #1
 8003426:	2300      	moveq	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d18d      	bne.n	800334a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003444:	e02d      	b.n	80034a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f88d 	bl	8003566 <I2C_IsAcknowledgeFailed>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e02d      	b.n	80034b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345c:	d021      	beq.n	80034a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800345e:	f7fe fca5 	bl	8001dac <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	429a      	cmp	r2, r3
 800346c:	d302      	bcc.n	8003474 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d116      	bne.n	80034a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f043 0220 	orr.w	r2, r3, #32
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e007      	b.n	80034b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ac:	2b80      	cmp	r3, #128	; 0x80
 80034ae:	d1ca      	bne.n	8003446 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b084      	sub	sp, #16
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034c6:	e042      	b.n	800354e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	2b10      	cmp	r3, #16
 80034d4:	d119      	bne.n	800350a <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f06f 0210 	mvn.w	r2, #16
 80034de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2220      	movs	r2, #32
 80034ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e029      	b.n	800355e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350a:	f7fe fc4f 	bl	8001dac <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	429a      	cmp	r2, r3
 8003518:	d302      	bcc.n	8003520 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d116      	bne.n	800354e <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2220      	movs	r2, #32
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f043 0220 	orr.w	r2, r3, #32
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e007      	b.n	800355e <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003558:	2b40      	cmp	r3, #64	; 0x40
 800355a:	d1b5      	bne.n	80034c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003578:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800357c:	d11b      	bne.n	80035b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003586:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2220      	movs	r2, #32
 8003592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f043 0204 	orr.w	r2, r3, #4
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e000      	b.n	80035b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	d129      	bne.n	800362e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2224      	movs	r2, #36	; 0x24
 80035de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0201 	bic.w	r2, r2, #1
 80035f0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0210 	bic.w	r2, r2, #16
 8003600:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0201 	orr.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2220      	movs	r2, #32
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	e000      	b.n	8003630 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800362e:	2302      	movs	r3, #2
  }
}
 8003630:	4618      	mov	r0, r3
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003646:	2300      	movs	r3, #0
 8003648:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003650:	b2db      	uxtb	r3, r3
 8003652:	2b20      	cmp	r3, #32
 8003654:	d12a      	bne.n	80036ac <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2224      	movs	r2, #36	; 0x24
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0201 	bic.w	r2, r2, #1
 800366c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003676:	89fb      	ldrh	r3, [r7, #14]
 8003678:	f023 030f 	bic.w	r3, r3, #15
 800367c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	b29a      	uxth	r2, r3
 8003682:	89fb      	ldrh	r3, [r7, #14]
 8003684:	4313      	orrs	r3, r2
 8003686:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	89fa      	ldrh	r2, [r7, #14]
 800368e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0201 	orr.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036a8:	2300      	movs	r3, #0
 80036aa:	e000      	b.n	80036ae <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80036ac:	2302      	movs	r3, #2
  }
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036bc:	b08f      	sub	sp, #60	; 0x3c
 80036be:	af0a      	add	r7, sp, #40	; 0x28
 80036c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e10f      	b.n	80038ec <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fe fa04 	bl	8001af4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2203      	movs	r2, #3
 80036f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d102      	bne.n	8003706 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f001 fa4f 	bl	8004bae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	603b      	str	r3, [r7, #0]
 8003716:	687e      	ldr	r6, [r7, #4]
 8003718:	466d      	mov	r5, sp
 800371a:	f106 0410 	add.w	r4, r6, #16
 800371e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003720:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003722:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003724:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003726:	e894 0003 	ldmia.w	r4, {r0, r1}
 800372a:	e885 0003 	stmia.w	r5, {r0, r1}
 800372e:	1d33      	adds	r3, r6, #4
 8003730:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003732:	6838      	ldr	r0, [r7, #0]
 8003734:	f001 f9da 	bl	8004aec <USB_CoreInit>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2202      	movs	r2, #2
 8003742:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e0d0      	b.n	80038ec <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2100      	movs	r1, #0
 8003750:	4618      	mov	r0, r3
 8003752:	f001 fa3d 	bl	8004bd0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003756:	2300      	movs	r3, #0
 8003758:	73fb      	strb	r3, [r7, #15]
 800375a:	e04a      	b.n	80037f2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800375c:	7bfa      	ldrb	r2, [r7, #15]
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	4613      	mov	r3, r2
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	4413      	add	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	333d      	adds	r3, #61	; 0x3d
 800376c:	2201      	movs	r2, #1
 800376e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003770:	7bfa      	ldrb	r2, [r7, #15]
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	4613      	mov	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	4413      	add	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	333c      	adds	r3, #60	; 0x3c
 8003780:	7bfa      	ldrb	r2, [r7, #15]
 8003782:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003784:	7bfa      	ldrb	r2, [r7, #15]
 8003786:	7bfb      	ldrb	r3, [r7, #15]
 8003788:	b298      	uxth	r0, r3
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	3344      	adds	r3, #68	; 0x44
 8003798:	4602      	mov	r2, r0
 800379a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800379c:	7bfa      	ldrb	r2, [r7, #15]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	3340      	adds	r3, #64	; 0x40
 80037ac:	2200      	movs	r2, #0
 80037ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037b0:	7bfa      	ldrb	r2, [r7, #15]
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	3348      	adds	r3, #72	; 0x48
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037c4:	7bfa      	ldrb	r2, [r7, #15]
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	334c      	adds	r3, #76	; 0x4c
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037d8:	7bfa      	ldrb	r2, [r7, #15]
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	4613      	mov	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4413      	add	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	3354      	adds	r3, #84	; 0x54
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	3301      	adds	r3, #1
 80037f0:	73fb      	strb	r3, [r7, #15]
 80037f2:	7bfa      	ldrb	r2, [r7, #15]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d3af      	bcc.n	800375c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037fc:	2300      	movs	r3, #0
 80037fe:	73fb      	strb	r3, [r7, #15]
 8003800:	e044      	b.n	800388c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003802:	7bfa      	ldrb	r2, [r7, #15]
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	00db      	lsls	r3, r3, #3
 800380a:	4413      	add	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	440b      	add	r3, r1
 8003810:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003814:	2200      	movs	r2, #0
 8003816:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003818:	7bfa      	ldrb	r2, [r7, #15]
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800382a:	7bfa      	ldrb	r2, [r7, #15]
 800382c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800382e:	7bfa      	ldrb	r2, [r7, #15]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003840:	2200      	movs	r2, #0
 8003842:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003844:	7bfa      	ldrb	r2, [r7, #15]
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	4613      	mov	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800385a:	7bfa      	ldrb	r2, [r7, #15]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003870:	7bfa      	ldrb	r2, [r7, #15]
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003886:	7bfb      	ldrb	r3, [r7, #15]
 8003888:	3301      	adds	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
 800388c:	7bfa      	ldrb	r2, [r7, #15]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	429a      	cmp	r2, r3
 8003894:	d3b5      	bcc.n	8003802 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	603b      	str	r3, [r7, #0]
 800389c:	687e      	ldr	r6, [r7, #4]
 800389e:	466d      	mov	r5, sp
 80038a0:	f106 0410 	add.w	r4, r6, #16
 80038a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80038b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80038b4:	1d33      	adds	r3, r6, #4
 80038b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038b8:	6838      	ldr	r0, [r7, #0]
 80038ba:	f001 f9d5 	bl	8004c68 <USB_DevInit>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e00d      	b.n	80038ec <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f001 fba0 	bl	800502a <USB_DevDisconnect>

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e267      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d075      	beq.n	80039fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003912:	4b88      	ldr	r3, [pc, #544]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	2b04      	cmp	r3, #4
 800391c:	d00c      	beq.n	8003938 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800391e:	4b85      	ldr	r3, [pc, #532]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003926:	2b08      	cmp	r3, #8
 8003928:	d112      	bne.n	8003950 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800392a:	4b82      	ldr	r3, [pc, #520]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003936:	d10b      	bne.n	8003950 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003938:	4b7e      	ldr	r3, [pc, #504]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d05b      	beq.n	80039fc <HAL_RCC_OscConfig+0x108>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d157      	bne.n	80039fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e242      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003958:	d106      	bne.n	8003968 <HAL_RCC_OscConfig+0x74>
 800395a:	4b76      	ldr	r3, [pc, #472]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a75      	ldr	r2, [pc, #468]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	e01d      	b.n	80039a4 <HAL_RCC_OscConfig+0xb0>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003970:	d10c      	bne.n	800398c <HAL_RCC_OscConfig+0x98>
 8003972:	4b70      	ldr	r3, [pc, #448]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a6f      	ldr	r2, [pc, #444]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	4b6d      	ldr	r3, [pc, #436]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a6c      	ldr	r2, [pc, #432]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003988:	6013      	str	r3, [r2, #0]
 800398a:	e00b      	b.n	80039a4 <HAL_RCC_OscConfig+0xb0>
 800398c:	4b69      	ldr	r3, [pc, #420]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a68      	ldr	r2, [pc, #416]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003996:	6013      	str	r3, [r2, #0]
 8003998:	4b66      	ldr	r3, [pc, #408]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a65      	ldr	r2, [pc, #404]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 800399e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d013      	beq.n	80039d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ac:	f7fe f9fe 	bl	8001dac <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039b4:	f7fe f9fa 	bl	8001dac <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b64      	cmp	r3, #100	; 0x64
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e207      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c6:	4b5b      	ldr	r3, [pc, #364]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0xc0>
 80039d2:	e014      	b.n	80039fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d4:	f7fe f9ea 	bl	8001dac <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039dc:	f7fe f9e6 	bl	8001dac <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b64      	cmp	r3, #100	; 0x64
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e1f3      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ee:	4b51      	ldr	r3, [pc, #324]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0xe8>
 80039fa:	e000      	b.n	80039fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d063      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a0a:	4b4a      	ldr	r3, [pc, #296]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00b      	beq.n	8003a2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a16:	4b47      	ldr	r3, [pc, #284]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d11c      	bne.n	8003a5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a22:	4b44      	ldr	r3, [pc, #272]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d116      	bne.n	8003a5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2e:	4b41      	ldr	r3, [pc, #260]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <HAL_RCC_OscConfig+0x152>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d001      	beq.n	8003a46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e1c7      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a46:	4b3b      	ldr	r3, [pc, #236]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4937      	ldr	r1, [pc, #220]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a5a:	e03a      	b.n	8003ad2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d020      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a64:	4b34      	ldr	r3, [pc, #208]	; (8003b38 <HAL_RCC_OscConfig+0x244>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6a:	f7fe f99f 	bl	8001dac <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a72:	f7fe f99b 	bl	8001dac <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e1a8      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a84:	4b2b      	ldr	r3, [pc, #172]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0f0      	beq.n	8003a72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a90:	4b28      	ldr	r3, [pc, #160]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	00db      	lsls	r3, r3, #3
 8003a9e:	4925      	ldr	r1, [pc, #148]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	600b      	str	r3, [r1, #0]
 8003aa4:	e015      	b.n	8003ad2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aa6:	4b24      	ldr	r3, [pc, #144]	; (8003b38 <HAL_RCC_OscConfig+0x244>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aac:	f7fe f97e 	bl	8001dac <HAL_GetTick>
 8003ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ab2:	e008      	b.n	8003ac6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ab4:	f7fe f97a 	bl	8001dac <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e187      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ac6:	4b1b      	ldr	r3, [pc, #108]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0308 	and.w	r3, r3, #8
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d036      	beq.n	8003b4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d016      	beq.n	8003b14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ae6:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <HAL_RCC_OscConfig+0x248>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aec:	f7fe f95e 	bl	8001dac <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af4:	f7fe f95a 	bl	8001dac <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e167      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b06:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <HAL_RCC_OscConfig+0x240>)
 8003b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0f0      	beq.n	8003af4 <HAL_RCC_OscConfig+0x200>
 8003b12:	e01b      	b.n	8003b4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b14:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <HAL_RCC_OscConfig+0x248>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b1a:	f7fe f947 	bl	8001dac <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b20:	e00e      	b.n	8003b40 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b22:	f7fe f943 	bl	8001dac <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d907      	bls.n	8003b40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e150      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
 8003b34:	40023800 	.word	0x40023800
 8003b38:	42470000 	.word	0x42470000
 8003b3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b40:	4b88      	ldr	r3, [pc, #544]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1ea      	bne.n	8003b22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 8097 	beq.w	8003c88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b5e:	4b81      	ldr	r3, [pc, #516]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10f      	bne.n	8003b8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60bb      	str	r3, [r7, #8]
 8003b6e:	4b7d      	ldr	r3, [pc, #500]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b72:	4a7c      	ldr	r2, [pc, #496]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b78:	6413      	str	r3, [r2, #64]	; 0x40
 8003b7a:	4b7a      	ldr	r3, [pc, #488]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b86:	2301      	movs	r3, #1
 8003b88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8a:	4b77      	ldr	r3, [pc, #476]	; (8003d68 <HAL_RCC_OscConfig+0x474>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d118      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b96:	4b74      	ldr	r3, [pc, #464]	; (8003d68 <HAL_RCC_OscConfig+0x474>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a73      	ldr	r2, [pc, #460]	; (8003d68 <HAL_RCC_OscConfig+0x474>)
 8003b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ba2:	f7fe f903 	bl	8001dac <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003baa:	f7fe f8ff 	bl	8001dac <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e10c      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bbc:	4b6a      	ldr	r3, [pc, #424]	; (8003d68 <HAL_RCC_OscConfig+0x474>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0f0      	beq.n	8003baa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d106      	bne.n	8003bde <HAL_RCC_OscConfig+0x2ea>
 8003bd0:	4b64      	ldr	r3, [pc, #400]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd4:	4a63      	ldr	r2, [pc, #396]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	6713      	str	r3, [r2, #112]	; 0x70
 8003bdc:	e01c      	b.n	8003c18 <HAL_RCC_OscConfig+0x324>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	2b05      	cmp	r3, #5
 8003be4:	d10c      	bne.n	8003c00 <HAL_RCC_OscConfig+0x30c>
 8003be6:	4b5f      	ldr	r3, [pc, #380]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bea:	4a5e      	ldr	r2, [pc, #376]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003bec:	f043 0304 	orr.w	r3, r3, #4
 8003bf0:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf2:	4b5c      	ldr	r3, [pc, #368]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf6:	4a5b      	ldr	r2, [pc, #364]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003bf8:	f043 0301 	orr.w	r3, r3, #1
 8003bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8003bfe:	e00b      	b.n	8003c18 <HAL_RCC_OscConfig+0x324>
 8003c00:	4b58      	ldr	r3, [pc, #352]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c04:	4a57      	ldr	r2, [pc, #348]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c0c:	4b55      	ldr	r3, [pc, #340]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c10:	4a54      	ldr	r2, [pc, #336]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c12:	f023 0304 	bic.w	r3, r3, #4
 8003c16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d015      	beq.n	8003c4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c20:	f7fe f8c4 	bl	8001dac <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c26:	e00a      	b.n	8003c3e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c28:	f7fe f8c0 	bl	8001dac <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e0cb      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3e:	4b49      	ldr	r3, [pc, #292]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0ee      	beq.n	8003c28 <HAL_RCC_OscConfig+0x334>
 8003c4a:	e014      	b.n	8003c76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c4c:	f7fe f8ae 	bl	8001dac <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c52:	e00a      	b.n	8003c6a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c54:	f7fe f8aa 	bl	8001dac <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e0b5      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c6a:	4b3e      	ldr	r3, [pc, #248]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1ee      	bne.n	8003c54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c76:	7dfb      	ldrb	r3, [r7, #23]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d105      	bne.n	8003c88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c7c:	4b39      	ldr	r3, [pc, #228]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	4a38      	ldr	r2, [pc, #224]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80a1 	beq.w	8003dd4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c92:	4b34      	ldr	r3, [pc, #208]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b08      	cmp	r3, #8
 8003c9c:	d05c      	beq.n	8003d58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d141      	bne.n	8003d2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ca6:	4b31      	ldr	r3, [pc, #196]	; (8003d6c <HAL_RCC_OscConfig+0x478>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cac:	f7fe f87e 	bl	8001dac <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cb2:	e008      	b.n	8003cc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb4:	f7fe f87a 	bl	8001dac <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e087      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc6:	4b27      	ldr	r3, [pc, #156]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1f0      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69da      	ldr	r2, [r3, #28]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	019b      	lsls	r3, r3, #6
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	085b      	lsrs	r3, r3, #1
 8003cea:	3b01      	subs	r3, #1
 8003cec:	041b      	lsls	r3, r3, #16
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf4:	061b      	lsls	r3, r3, #24
 8003cf6:	491b      	ldr	r1, [pc, #108]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cfc:	4b1b      	ldr	r3, [pc, #108]	; (8003d6c <HAL_RCC_OscConfig+0x478>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d02:	f7fe f853 	bl	8001dac <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d0a:	f7fe f84f 	bl	8001dac <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e05c      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1c:	4b11      	ldr	r3, [pc, #68]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCC_OscConfig+0x416>
 8003d28:	e054      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d2a:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <HAL_RCC_OscConfig+0x478>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d30:	f7fe f83c 	bl	8001dac <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d38:	f7fe f838 	bl	8001dac <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e045      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4a:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x444>
 8003d56:	e03d      	b.n	8003dd4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d107      	bne.n	8003d70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e038      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
 8003d64:	40023800 	.word	0x40023800
 8003d68:	40007000 	.word	0x40007000
 8003d6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d70:	4b1b      	ldr	r3, [pc, #108]	; (8003de0 <HAL_RCC_OscConfig+0x4ec>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d028      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d121      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d11a      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003da0:	4013      	ands	r3, r2
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003da6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d111      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db6:	085b      	lsrs	r3, r3, #1
 8003db8:	3b01      	subs	r3, #1
 8003dba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d107      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d001      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40023800 	.word	0x40023800

08003de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0cc      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003df8:	4b68      	ldr	r3, [pc, #416]	; (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 030f 	and.w	r3, r3, #15
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d90c      	bls.n	8003e20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e06:	4b65      	ldr	r3, [pc, #404]	; (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0e:	4b63      	ldr	r3, [pc, #396]	; (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d001      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0b8      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d020      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d005      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e38:	4b59      	ldr	r3, [pc, #356]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	4a58      	ldr	r2, [pc, #352]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0308 	and.w	r3, r3, #8
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e50:	4b53      	ldr	r3, [pc, #332]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4a52      	ldr	r2, [pc, #328]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e5c:	4b50      	ldr	r3, [pc, #320]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	494d      	ldr	r1, [pc, #308]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d044      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d107      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	4b47      	ldr	r3, [pc, #284]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d119      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e07f      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d003      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e9e:	2b03      	cmp	r3, #3
 8003ea0:	d107      	bne.n	8003eb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea2:	4b3f      	ldr	r3, [pc, #252]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d109      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e06f      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb2:	4b3b      	ldr	r3, [pc, #236]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e067      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ec2:	4b37      	ldr	r3, [pc, #220]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f023 0203 	bic.w	r2, r3, #3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	4934      	ldr	r1, [pc, #208]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ed4:	f7fd ff6a 	bl	8001dac <HAL_GetTick>
 8003ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eda:	e00a      	b.n	8003ef2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003edc:	f7fd ff66 	bl	8001dac <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e04f      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef2:	4b2b      	ldr	r3, [pc, #172]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 020c 	and.w	r2, r3, #12
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d1eb      	bne.n	8003edc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f04:	4b25      	ldr	r3, [pc, #148]	; (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d20c      	bcs.n	8003f2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f12:	4b22      	ldr	r3, [pc, #136]	; (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f1a:	4b20      	ldr	r3, [pc, #128]	; (8003f9c <HAL_RCC_ClockConfig+0x1b8>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d001      	beq.n	8003f2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e032      	b.n	8003f92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f38:	4b19      	ldr	r3, [pc, #100]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	4916      	ldr	r1, [pc, #88]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d009      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f56:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	490e      	ldr	r1, [pc, #56]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f6a:	f000 f821 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	091b      	lsrs	r3, r3, #4
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	490a      	ldr	r1, [pc, #40]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8003f7c:	5ccb      	ldrb	r3, [r1, r3]
 8003f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f82:	4a09      	ldr	r2, [pc, #36]	; (8003fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f86:	4b09      	ldr	r3, [pc, #36]	; (8003fac <HAL_RCC_ClockConfig+0x1c8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fd feca 	bl	8001d24 <HAL_InitTick>

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40023c00 	.word	0x40023c00
 8003fa0:	40023800 	.word	0x40023800
 8003fa4:	08008264 	.word	0x08008264
 8003fa8:	20000000 	.word	0x20000000
 8003fac:	20000004 	.word	0x20000004

08003fb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fb4:	b094      	sub	sp, #80	; 0x50
 8003fb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	647b      	str	r3, [r7, #68]	; 0x44
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fc8:	4b79      	ldr	r3, [pc, #484]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f003 030c 	and.w	r3, r3, #12
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d00d      	beq.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x40>
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	f200 80e1 	bhi.w	800419c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <HAL_RCC_GetSysClockFreq+0x34>
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d003      	beq.n	8003fea <HAL_RCC_GetSysClockFreq+0x3a>
 8003fe2:	e0db      	b.n	800419c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fe4:	4b73      	ldr	r3, [pc, #460]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fe6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003fe8:	e0db      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fea:	4b73      	ldr	r3, [pc, #460]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003fec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fee:	e0d8      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ff0:	4b6f      	ldr	r3, [pc, #444]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ff8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ffa:	4b6d      	ldr	r3, [pc, #436]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d063      	beq.n	80040ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004006:	4b6a      	ldr	r3, [pc, #424]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	099b      	lsrs	r3, r3, #6
 800400c:	2200      	movs	r2, #0
 800400e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004010:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004018:	633b      	str	r3, [r7, #48]	; 0x30
 800401a:	2300      	movs	r3, #0
 800401c:	637b      	str	r3, [r7, #52]	; 0x34
 800401e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004022:	4622      	mov	r2, r4
 8004024:	462b      	mov	r3, r5
 8004026:	f04f 0000 	mov.w	r0, #0
 800402a:	f04f 0100 	mov.w	r1, #0
 800402e:	0159      	lsls	r1, r3, #5
 8004030:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004034:	0150      	lsls	r0, r2, #5
 8004036:	4602      	mov	r2, r0
 8004038:	460b      	mov	r3, r1
 800403a:	4621      	mov	r1, r4
 800403c:	1a51      	subs	r1, r2, r1
 800403e:	6139      	str	r1, [r7, #16]
 8004040:	4629      	mov	r1, r5
 8004042:	eb63 0301 	sbc.w	r3, r3, r1
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004054:	4659      	mov	r1, fp
 8004056:	018b      	lsls	r3, r1, #6
 8004058:	4651      	mov	r1, sl
 800405a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800405e:	4651      	mov	r1, sl
 8004060:	018a      	lsls	r2, r1, #6
 8004062:	4651      	mov	r1, sl
 8004064:	ebb2 0801 	subs.w	r8, r2, r1
 8004068:	4659      	mov	r1, fp
 800406a:	eb63 0901 	sbc.w	r9, r3, r1
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	f04f 0300 	mov.w	r3, #0
 8004076:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800407a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800407e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004082:	4690      	mov	r8, r2
 8004084:	4699      	mov	r9, r3
 8004086:	4623      	mov	r3, r4
 8004088:	eb18 0303 	adds.w	r3, r8, r3
 800408c:	60bb      	str	r3, [r7, #8]
 800408e:	462b      	mov	r3, r5
 8004090:	eb49 0303 	adc.w	r3, r9, r3
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040a2:	4629      	mov	r1, r5
 80040a4:	024b      	lsls	r3, r1, #9
 80040a6:	4621      	mov	r1, r4
 80040a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040ac:	4621      	mov	r1, r4
 80040ae:	024a      	lsls	r2, r1, #9
 80040b0:	4610      	mov	r0, r2
 80040b2:	4619      	mov	r1, r3
 80040b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040b6:	2200      	movs	r2, #0
 80040b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040c0:	f7fc f8e6 	bl	8000290 <__aeabi_uldivmod>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4613      	mov	r3, r2
 80040ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040cc:	e058      	b.n	8004180 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ce:	4b38      	ldr	r3, [pc, #224]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	099b      	lsrs	r3, r3, #6
 80040d4:	2200      	movs	r2, #0
 80040d6:	4618      	mov	r0, r3
 80040d8:	4611      	mov	r1, r2
 80040da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040de:	623b      	str	r3, [r7, #32]
 80040e0:	2300      	movs	r3, #0
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
 80040e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80040e8:	4642      	mov	r2, r8
 80040ea:	464b      	mov	r3, r9
 80040ec:	f04f 0000 	mov.w	r0, #0
 80040f0:	f04f 0100 	mov.w	r1, #0
 80040f4:	0159      	lsls	r1, r3, #5
 80040f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040fa:	0150      	lsls	r0, r2, #5
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4641      	mov	r1, r8
 8004102:	ebb2 0a01 	subs.w	sl, r2, r1
 8004106:	4649      	mov	r1, r9
 8004108:	eb63 0b01 	sbc.w	fp, r3, r1
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004118:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800411c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004120:	ebb2 040a 	subs.w	r4, r2, sl
 8004124:	eb63 050b 	sbc.w	r5, r3, fp
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	00eb      	lsls	r3, r5, #3
 8004132:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004136:	00e2      	lsls	r2, r4, #3
 8004138:	4614      	mov	r4, r2
 800413a:	461d      	mov	r5, r3
 800413c:	4643      	mov	r3, r8
 800413e:	18e3      	adds	r3, r4, r3
 8004140:	603b      	str	r3, [r7, #0]
 8004142:	464b      	mov	r3, r9
 8004144:	eb45 0303 	adc.w	r3, r5, r3
 8004148:	607b      	str	r3, [r7, #4]
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004156:	4629      	mov	r1, r5
 8004158:	028b      	lsls	r3, r1, #10
 800415a:	4621      	mov	r1, r4
 800415c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004160:	4621      	mov	r1, r4
 8004162:	028a      	lsls	r2, r1, #10
 8004164:	4610      	mov	r0, r2
 8004166:	4619      	mov	r1, r3
 8004168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800416a:	2200      	movs	r2, #0
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	61fa      	str	r2, [r7, #28]
 8004170:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004174:	f7fc f88c 	bl	8000290 <__aeabi_uldivmod>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4613      	mov	r3, r2
 800417e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004180:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	0c1b      	lsrs	r3, r3, #16
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	3301      	adds	r3, #1
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004190:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004194:	fbb2 f3f3 	udiv	r3, r2, r3
 8004198:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800419a:	e002      	b.n	80041a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800419c:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800419e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3750      	adds	r7, #80	; 0x50
 80041a8:	46bd      	mov	sp, r7
 80041aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ae:	bf00      	nop
 80041b0:	40023800 	.word	0x40023800
 80041b4:	00f42400 	.word	0x00f42400
 80041b8:	007a1200 	.word	0x007a1200

080041bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041c0:	4b03      	ldr	r3, [pc, #12]	; (80041d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80041c2:	681b      	ldr	r3, [r3, #0]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	20000000 	.word	0x20000000

080041d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041d8:	f7ff fff0 	bl	80041bc <HAL_RCC_GetHCLKFreq>
 80041dc:	4602      	mov	r2, r0
 80041de:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	0a9b      	lsrs	r3, r3, #10
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	4903      	ldr	r1, [pc, #12]	; (80041f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041ea:	5ccb      	ldrb	r3, [r1, r3]
 80041ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40023800 	.word	0x40023800
 80041f8:	08008274 	.word	0x08008274

080041fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004200:	f7ff ffdc 	bl	80041bc <HAL_RCC_GetHCLKFreq>
 8004204:	4602      	mov	r2, r0
 8004206:	4b05      	ldr	r3, [pc, #20]	; (800421c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	0b5b      	lsrs	r3, r3, #13
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	4903      	ldr	r1, [pc, #12]	; (8004220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004212:	5ccb      	ldrb	r3, [r1, r3]
 8004214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004218:	4618      	mov	r0, r3
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40023800 	.word	0x40023800
 8004220:	08008274 	.word	0x08008274

08004224 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e03f      	b.n	80042b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7fd fc0a 	bl	8001a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2224      	movs	r2, #36	; 0x24
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004266:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 f9cb 	bl	8004604 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800427c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	695a      	ldr	r2, [r3, #20]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800428c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800429c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2220      	movs	r2, #32
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b08a      	sub	sp, #40	; 0x28
 80042c2:	af02      	add	r7, sp, #8
 80042c4:	60f8      	str	r0, [r7, #12]
 80042c6:	60b9      	str	r1, [r7, #8]
 80042c8:	603b      	str	r3, [r7, #0]
 80042ca:	4613      	mov	r3, r2
 80042cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b20      	cmp	r3, #32
 80042dc:	d17c      	bne.n	80043d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <HAL_UART_Transmit+0x2c>
 80042e4:	88fb      	ldrh	r3, [r7, #6]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e075      	b.n	80043da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_UART_Transmit+0x3e>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e06e      	b.n	80043da <HAL_UART_Transmit+0x11c>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2221      	movs	r2, #33	; 0x21
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004312:	f7fd fd4b 	bl	8001dac <HAL_GetTick>
 8004316:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	88fa      	ldrh	r2, [r7, #6]
 800431c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	88fa      	ldrh	r2, [r7, #6]
 8004322:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800432c:	d108      	bne.n	8004340 <HAL_UART_Transmit+0x82>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d104      	bne.n	8004340 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004336:	2300      	movs	r3, #0
 8004338:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	61bb      	str	r3, [r7, #24]
 800433e:	e003      	b.n	8004348 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004344:	2300      	movs	r3, #0
 8004346:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004350:	e02a      	b.n	80043a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2200      	movs	r2, #0
 800435a:	2180      	movs	r1, #128	; 0x80
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 f8e2 	bl	8004526 <UART_WaitOnFlagUntilTimeout>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e036      	b.n	80043da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10b      	bne.n	800438a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	461a      	mov	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004380:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	3302      	adds	r3, #2
 8004386:	61bb      	str	r3, [r7, #24]
 8004388:	e007      	b.n	800439a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	781a      	ldrb	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	3301      	adds	r3, #1
 8004398:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1cf      	bne.n	8004352 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2200      	movs	r2, #0
 80043ba:	2140      	movs	r1, #64	; 0x40
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 f8b2 	bl	8004526 <UART_WaitOnFlagUntilTimeout>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d001      	beq.n	80043cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e006      	b.n	80043da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80043d4:	2300      	movs	r3, #0
 80043d6:	e000      	b.n	80043da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80043d8:	2302      	movs	r3, #2
  }
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3720      	adds	r7, #32
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b08a      	sub	sp, #40	; 0x28
 80043e6:	af02      	add	r7, sp, #8
 80043e8:	60f8      	str	r0, [r7, #12]
 80043ea:	60b9      	str	r1, [r7, #8]
 80043ec:	603b      	str	r3, [r7, #0]
 80043ee:	4613      	mov	r3, r2
 80043f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b20      	cmp	r3, #32
 8004400:	f040 808c 	bne.w	800451c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <HAL_UART_Receive+0x2e>
 800440a:	88fb      	ldrh	r3, [r7, #6]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e084      	b.n	800451e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_UART_Receive+0x40>
 800441e:	2302      	movs	r3, #2
 8004420:	e07d      	b.n	800451e <HAL_UART_Receive+0x13c>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2222      	movs	r2, #34	; 0x22
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800443e:	f7fd fcb5 	bl	8001dac <HAL_GetTick>
 8004442:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	88fa      	ldrh	r2, [r7, #6]
 8004448:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	88fa      	ldrh	r2, [r7, #6]
 800444e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004458:	d108      	bne.n	800446c <HAL_UART_Receive+0x8a>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d104      	bne.n	800446c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004462:	2300      	movs	r3, #0
 8004464:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	e003      	b.n	8004474 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004470:	2300      	movs	r3, #0
 8004472:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800447c:	e043      	b.n	8004506 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2200      	movs	r2, #0
 8004486:	2120      	movs	r1, #32
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f84c 	bl	8004526 <UART_WaitOnFlagUntilTimeout>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e042      	b.n	800451e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10c      	bne.n	80044b8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	3302      	adds	r3, #2
 80044b4:	61bb      	str	r3, [r7, #24]
 80044b6:	e01f      	b.n	80044f8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044c0:	d007      	beq.n	80044d2 <HAL_UART_Receive+0xf0>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d10a      	bne.n	80044e0 <HAL_UART_Receive+0xfe>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	701a      	strb	r2, [r3, #0]
 80044de:	e008      	b.n	80044f2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	3301      	adds	r3, #1
 80044f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800450a:	b29b      	uxth	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1b6      	bne.n	800447e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004518:	2300      	movs	r3, #0
 800451a:	e000      	b.n	800451e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800451c:	2302      	movs	r3, #2
  }
}
 800451e:	4618      	mov	r0, r3
 8004520:	3720      	adds	r7, #32
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b090      	sub	sp, #64	; 0x40
 800452a:	af00      	add	r7, sp, #0
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	603b      	str	r3, [r7, #0]
 8004532:	4613      	mov	r3, r2
 8004534:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004536:	e050      	b.n	80045da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800453a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453e:	d04c      	beq.n	80045da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004542:	2b00      	cmp	r3, #0
 8004544:	d007      	beq.n	8004556 <UART_WaitOnFlagUntilTimeout+0x30>
 8004546:	f7fd fc31 	bl	8001dac <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004552:	429a      	cmp	r2, r3
 8004554:	d241      	bcs.n	80045da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	330c      	adds	r3, #12
 800455c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004560:	e853 3f00 	ldrex	r3, [r3]
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800456c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	330c      	adds	r3, #12
 8004574:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004576:	637a      	str	r2, [r7, #52]	; 0x34
 8004578:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800457c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800457e:	e841 2300 	strex	r3, r2, [r1]
 8004582:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1e5      	bne.n	8004556 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3314      	adds	r3, #20
 8004590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	613b      	str	r3, [r7, #16]
   return(result);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f023 0301 	bic.w	r3, r3, #1
 80045a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3314      	adds	r3, #20
 80045a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045aa:	623a      	str	r2, [r7, #32]
 80045ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ae:	69f9      	ldr	r1, [r7, #28]
 80045b0:	6a3a      	ldr	r2, [r7, #32]
 80045b2:	e841 2300 	strex	r3, r2, [r1]
 80045b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1e5      	bne.n	800458a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2220      	movs	r2, #32
 80045c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e00f      	b.n	80045fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4013      	ands	r3, r2
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	bf0c      	ite	eq
 80045ea:	2301      	moveq	r3, #1
 80045ec:	2300      	movne	r3, #0
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	461a      	mov	r2, r3
 80045f2:	79fb      	ldrb	r3, [r7, #7]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d09f      	beq.n	8004538 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3740      	adds	r7, #64	; 0x40
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004608:	b0c0      	sub	sp, #256	; 0x100
 800460a:	af00      	add	r7, sp, #0
 800460c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	691b      	ldr	r3, [r3, #16]
 8004618:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800461c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004620:	68d9      	ldr	r1, [r3, #12]
 8004622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	ea40 0301 	orr.w	r3, r0, r1
 800462c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800462e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	431a      	orrs	r2, r3
 800463c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	431a      	orrs	r2, r3
 8004644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	4313      	orrs	r3, r2
 800464c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800465c:	f021 010c 	bic.w	r1, r1, #12
 8004660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800466a:	430b      	orrs	r3, r1
 800466c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800466e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800467a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800467e:	6999      	ldr	r1, [r3, #24]
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	ea40 0301 	orr.w	r3, r0, r1
 800468a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800468c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	4b8f      	ldr	r3, [pc, #572]	; (80048d0 <UART_SetConfig+0x2cc>)
 8004694:	429a      	cmp	r2, r3
 8004696:	d005      	beq.n	80046a4 <UART_SetConfig+0xa0>
 8004698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	4b8d      	ldr	r3, [pc, #564]	; (80048d4 <UART_SetConfig+0x2d0>)
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d104      	bne.n	80046ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046a4:	f7ff fdaa 	bl	80041fc <HAL_RCC_GetPCLK2Freq>
 80046a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80046ac:	e003      	b.n	80046b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046ae:	f7ff fd91 	bl	80041d4 <HAL_RCC_GetPCLK1Freq>
 80046b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046c0:	f040 810c 	bne.w	80048dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046c8:	2200      	movs	r2, #0
 80046ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80046ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80046d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80046d6:	4622      	mov	r2, r4
 80046d8:	462b      	mov	r3, r5
 80046da:	1891      	adds	r1, r2, r2
 80046dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80046de:	415b      	adcs	r3, r3
 80046e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80046e6:	4621      	mov	r1, r4
 80046e8:	eb12 0801 	adds.w	r8, r2, r1
 80046ec:	4629      	mov	r1, r5
 80046ee:	eb43 0901 	adc.w	r9, r3, r1
 80046f2:	f04f 0200 	mov.w	r2, #0
 80046f6:	f04f 0300 	mov.w	r3, #0
 80046fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004702:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004706:	4690      	mov	r8, r2
 8004708:	4699      	mov	r9, r3
 800470a:	4623      	mov	r3, r4
 800470c:	eb18 0303 	adds.w	r3, r8, r3
 8004710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004714:	462b      	mov	r3, r5
 8004716:	eb49 0303 	adc.w	r3, r9, r3
 800471a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800471e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800472a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800472e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004732:	460b      	mov	r3, r1
 8004734:	18db      	adds	r3, r3, r3
 8004736:	653b      	str	r3, [r7, #80]	; 0x50
 8004738:	4613      	mov	r3, r2
 800473a:	eb42 0303 	adc.w	r3, r2, r3
 800473e:	657b      	str	r3, [r7, #84]	; 0x54
 8004740:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004744:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004748:	f7fb fda2 	bl	8000290 <__aeabi_uldivmod>
 800474c:	4602      	mov	r2, r0
 800474e:	460b      	mov	r3, r1
 8004750:	4b61      	ldr	r3, [pc, #388]	; (80048d8 <UART_SetConfig+0x2d4>)
 8004752:	fba3 2302 	umull	r2, r3, r3, r2
 8004756:	095b      	lsrs	r3, r3, #5
 8004758:	011c      	lsls	r4, r3, #4
 800475a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800475e:	2200      	movs	r2, #0
 8004760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004764:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004768:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800476c:	4642      	mov	r2, r8
 800476e:	464b      	mov	r3, r9
 8004770:	1891      	adds	r1, r2, r2
 8004772:	64b9      	str	r1, [r7, #72]	; 0x48
 8004774:	415b      	adcs	r3, r3
 8004776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004778:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800477c:	4641      	mov	r1, r8
 800477e:	eb12 0a01 	adds.w	sl, r2, r1
 8004782:	4649      	mov	r1, r9
 8004784:	eb43 0b01 	adc.w	fp, r3, r1
 8004788:	f04f 0200 	mov.w	r2, #0
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004794:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004798:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800479c:	4692      	mov	sl, r2
 800479e:	469b      	mov	fp, r3
 80047a0:	4643      	mov	r3, r8
 80047a2:	eb1a 0303 	adds.w	r3, sl, r3
 80047a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047aa:	464b      	mov	r3, r9
 80047ac:	eb4b 0303 	adc.w	r3, fp, r3
 80047b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80047c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80047c8:	460b      	mov	r3, r1
 80047ca:	18db      	adds	r3, r3, r3
 80047cc:	643b      	str	r3, [r7, #64]	; 0x40
 80047ce:	4613      	mov	r3, r2
 80047d0:	eb42 0303 	adc.w	r3, r2, r3
 80047d4:	647b      	str	r3, [r7, #68]	; 0x44
 80047d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80047de:	f7fb fd57 	bl	8000290 <__aeabi_uldivmod>
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	4611      	mov	r1, r2
 80047e8:	4b3b      	ldr	r3, [pc, #236]	; (80048d8 <UART_SetConfig+0x2d4>)
 80047ea:	fba3 2301 	umull	r2, r3, r3, r1
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	2264      	movs	r2, #100	; 0x64
 80047f2:	fb02 f303 	mul.w	r3, r2, r3
 80047f6:	1acb      	subs	r3, r1, r3
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80047fe:	4b36      	ldr	r3, [pc, #216]	; (80048d8 <UART_SetConfig+0x2d4>)
 8004800:	fba3 2302 	umull	r2, r3, r3, r2
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800480c:	441c      	add	r4, r3
 800480e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004812:	2200      	movs	r2, #0
 8004814:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004818:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800481c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004820:	4642      	mov	r2, r8
 8004822:	464b      	mov	r3, r9
 8004824:	1891      	adds	r1, r2, r2
 8004826:	63b9      	str	r1, [r7, #56]	; 0x38
 8004828:	415b      	adcs	r3, r3
 800482a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800482c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004830:	4641      	mov	r1, r8
 8004832:	1851      	adds	r1, r2, r1
 8004834:	6339      	str	r1, [r7, #48]	; 0x30
 8004836:	4649      	mov	r1, r9
 8004838:	414b      	adcs	r3, r1
 800483a:	637b      	str	r3, [r7, #52]	; 0x34
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004848:	4659      	mov	r1, fp
 800484a:	00cb      	lsls	r3, r1, #3
 800484c:	4651      	mov	r1, sl
 800484e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004852:	4651      	mov	r1, sl
 8004854:	00ca      	lsls	r2, r1, #3
 8004856:	4610      	mov	r0, r2
 8004858:	4619      	mov	r1, r3
 800485a:	4603      	mov	r3, r0
 800485c:	4642      	mov	r2, r8
 800485e:	189b      	adds	r3, r3, r2
 8004860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004864:	464b      	mov	r3, r9
 8004866:	460a      	mov	r2, r1
 8004868:	eb42 0303 	adc.w	r3, r2, r3
 800486c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800487c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004880:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004884:	460b      	mov	r3, r1
 8004886:	18db      	adds	r3, r3, r3
 8004888:	62bb      	str	r3, [r7, #40]	; 0x28
 800488a:	4613      	mov	r3, r2
 800488c:	eb42 0303 	adc.w	r3, r2, r3
 8004890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004892:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004896:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800489a:	f7fb fcf9 	bl	8000290 <__aeabi_uldivmod>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	4b0d      	ldr	r3, [pc, #52]	; (80048d8 <UART_SetConfig+0x2d4>)
 80048a4:	fba3 1302 	umull	r1, r3, r3, r2
 80048a8:	095b      	lsrs	r3, r3, #5
 80048aa:	2164      	movs	r1, #100	; 0x64
 80048ac:	fb01 f303 	mul.w	r3, r1, r3
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	3332      	adds	r3, #50	; 0x32
 80048b6:	4a08      	ldr	r2, [pc, #32]	; (80048d8 <UART_SetConfig+0x2d4>)
 80048b8:	fba2 2303 	umull	r2, r3, r2, r3
 80048bc:	095b      	lsrs	r3, r3, #5
 80048be:	f003 0207 	and.w	r2, r3, #7
 80048c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4422      	add	r2, r4
 80048ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048cc:	e105      	b.n	8004ada <UART_SetConfig+0x4d6>
 80048ce:	bf00      	nop
 80048d0:	40011000 	.word	0x40011000
 80048d4:	40011400 	.word	0x40011400
 80048d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e0:	2200      	movs	r2, #0
 80048e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80048e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80048ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80048ee:	4642      	mov	r2, r8
 80048f0:	464b      	mov	r3, r9
 80048f2:	1891      	adds	r1, r2, r2
 80048f4:	6239      	str	r1, [r7, #32]
 80048f6:	415b      	adcs	r3, r3
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
 80048fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048fe:	4641      	mov	r1, r8
 8004900:	1854      	adds	r4, r2, r1
 8004902:	4649      	mov	r1, r9
 8004904:	eb43 0501 	adc.w	r5, r3, r1
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	00eb      	lsls	r3, r5, #3
 8004912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004916:	00e2      	lsls	r2, r4, #3
 8004918:	4614      	mov	r4, r2
 800491a:	461d      	mov	r5, r3
 800491c:	4643      	mov	r3, r8
 800491e:	18e3      	adds	r3, r4, r3
 8004920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004924:	464b      	mov	r3, r9
 8004926:	eb45 0303 	adc.w	r3, r5, r3
 800492a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800492e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800493a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800494a:	4629      	mov	r1, r5
 800494c:	008b      	lsls	r3, r1, #2
 800494e:	4621      	mov	r1, r4
 8004950:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004954:	4621      	mov	r1, r4
 8004956:	008a      	lsls	r2, r1, #2
 8004958:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800495c:	f7fb fc98 	bl	8000290 <__aeabi_uldivmod>
 8004960:	4602      	mov	r2, r0
 8004962:	460b      	mov	r3, r1
 8004964:	4b60      	ldr	r3, [pc, #384]	; (8004ae8 <UART_SetConfig+0x4e4>)
 8004966:	fba3 2302 	umull	r2, r3, r3, r2
 800496a:	095b      	lsrs	r3, r3, #5
 800496c:	011c      	lsls	r4, r3, #4
 800496e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004972:	2200      	movs	r2, #0
 8004974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004978:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800497c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004980:	4642      	mov	r2, r8
 8004982:	464b      	mov	r3, r9
 8004984:	1891      	adds	r1, r2, r2
 8004986:	61b9      	str	r1, [r7, #24]
 8004988:	415b      	adcs	r3, r3
 800498a:	61fb      	str	r3, [r7, #28]
 800498c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004990:	4641      	mov	r1, r8
 8004992:	1851      	adds	r1, r2, r1
 8004994:	6139      	str	r1, [r7, #16]
 8004996:	4649      	mov	r1, r9
 8004998:	414b      	adcs	r3, r1
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049a8:	4659      	mov	r1, fp
 80049aa:	00cb      	lsls	r3, r1, #3
 80049ac:	4651      	mov	r1, sl
 80049ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049b2:	4651      	mov	r1, sl
 80049b4:	00ca      	lsls	r2, r1, #3
 80049b6:	4610      	mov	r0, r2
 80049b8:	4619      	mov	r1, r3
 80049ba:	4603      	mov	r3, r0
 80049bc:	4642      	mov	r2, r8
 80049be:	189b      	adds	r3, r3, r2
 80049c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049c4:	464b      	mov	r3, r9
 80049c6:	460a      	mov	r2, r1
 80049c8:	eb42 0303 	adc.w	r3, r2, r3
 80049cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80049da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80049e8:	4649      	mov	r1, r9
 80049ea:	008b      	lsls	r3, r1, #2
 80049ec:	4641      	mov	r1, r8
 80049ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049f2:	4641      	mov	r1, r8
 80049f4:	008a      	lsls	r2, r1, #2
 80049f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80049fa:	f7fb fc49 	bl	8000290 <__aeabi_uldivmod>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	4b39      	ldr	r3, [pc, #228]	; (8004ae8 <UART_SetConfig+0x4e4>)
 8004a04:	fba3 1302 	umull	r1, r3, r3, r2
 8004a08:	095b      	lsrs	r3, r3, #5
 8004a0a:	2164      	movs	r1, #100	; 0x64
 8004a0c:	fb01 f303 	mul.w	r3, r1, r3
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	3332      	adds	r3, #50	; 0x32
 8004a16:	4a34      	ldr	r2, [pc, #208]	; (8004ae8 <UART_SetConfig+0x4e4>)
 8004a18:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1c:	095b      	lsrs	r3, r3, #5
 8004a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a22:	441c      	add	r4, r3
 8004a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a28:	2200      	movs	r2, #0
 8004a2a:	673b      	str	r3, [r7, #112]	; 0x70
 8004a2c:	677a      	str	r2, [r7, #116]	; 0x74
 8004a2e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a32:	4642      	mov	r2, r8
 8004a34:	464b      	mov	r3, r9
 8004a36:	1891      	adds	r1, r2, r2
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	415b      	adcs	r3, r3
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a42:	4641      	mov	r1, r8
 8004a44:	1851      	adds	r1, r2, r1
 8004a46:	6039      	str	r1, [r7, #0]
 8004a48:	4649      	mov	r1, r9
 8004a4a:	414b      	adcs	r3, r1
 8004a4c:	607b      	str	r3, [r7, #4]
 8004a4e:	f04f 0200 	mov.w	r2, #0
 8004a52:	f04f 0300 	mov.w	r3, #0
 8004a56:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a5a:	4659      	mov	r1, fp
 8004a5c:	00cb      	lsls	r3, r1, #3
 8004a5e:	4651      	mov	r1, sl
 8004a60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a64:	4651      	mov	r1, sl
 8004a66:	00ca      	lsls	r2, r1, #3
 8004a68:	4610      	mov	r0, r2
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	4642      	mov	r2, r8
 8004a70:	189b      	adds	r3, r3, r2
 8004a72:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a74:	464b      	mov	r3, r9
 8004a76:	460a      	mov	r2, r1
 8004a78:	eb42 0303 	adc.w	r3, r2, r3
 8004a7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	663b      	str	r3, [r7, #96]	; 0x60
 8004a88:	667a      	str	r2, [r7, #100]	; 0x64
 8004a8a:	f04f 0200 	mov.w	r2, #0
 8004a8e:	f04f 0300 	mov.w	r3, #0
 8004a92:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a96:	4649      	mov	r1, r9
 8004a98:	008b      	lsls	r3, r1, #2
 8004a9a:	4641      	mov	r1, r8
 8004a9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aa0:	4641      	mov	r1, r8
 8004aa2:	008a      	lsls	r2, r1, #2
 8004aa4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004aa8:	f7fb fbf2 	bl	8000290 <__aeabi_uldivmod>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4b0d      	ldr	r3, [pc, #52]	; (8004ae8 <UART_SetConfig+0x4e4>)
 8004ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	2164      	movs	r1, #100	; 0x64
 8004aba:	fb01 f303 	mul.w	r3, r1, r3
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	3332      	adds	r3, #50	; 0x32
 8004ac4:	4a08      	ldr	r2, [pc, #32]	; (8004ae8 <UART_SetConfig+0x4e4>)
 8004ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	f003 020f 	and.w	r2, r3, #15
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4422      	add	r2, r4
 8004ad8:	609a      	str	r2, [r3, #8]
}
 8004ada:	bf00      	nop
 8004adc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ae6:	bf00      	nop
 8004ae8:	51eb851f 	.word	0x51eb851f

08004aec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004aec:	b084      	sub	sp, #16
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	f107 001c 	add.w	r0, r7, #28
 8004afa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d122      	bne.n	8004b4a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b08:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d105      	bne.n	8004b3e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 faa2 	bl	8005088 <USB_CoreReset>
 8004b44:	4603      	mov	r3, r0
 8004b46:	73fb      	strb	r3, [r7, #15]
 8004b48:	e01a      	b.n	8004b80 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fa96 	bl	8005088 <USB_CoreReset>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004b60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	639a      	str	r2, [r3, #56]	; 0x38
 8004b72:	e005      	b.n	8004b80 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d10b      	bne.n	8004b9e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f043 0206 	orr.w	r2, r3, #6
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f043 0220 	orr.w	r2, r3, #32
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004baa:	b004      	add	sp, #16
 8004bac:	4770      	bx	lr

08004bae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f023 0201 	bic.w	r2, r3, #1
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004bec:	78fb      	ldrb	r3, [r7, #3]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d115      	bne.n	8004c1e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004bfe:	2001      	movs	r0, #1
 8004c00:	f7fd f8e0 	bl	8001dc4 <HAL_Delay>
      ms++;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3301      	adds	r3, #1
 8004c08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fa2e 	bl	800506c <USB_GetMode>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d01e      	beq.n	8004c54 <USB_SetCurrentMode+0x84>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2b31      	cmp	r3, #49	; 0x31
 8004c1a:	d9f0      	bls.n	8004bfe <USB_SetCurrentMode+0x2e>
 8004c1c:	e01a      	b.n	8004c54 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c1e:	78fb      	ldrb	r3, [r7, #3]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d115      	bne.n	8004c50 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c30:	2001      	movs	r0, #1
 8004c32:	f7fd f8c7 	bl	8001dc4 <HAL_Delay>
      ms++;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fa15 	bl	800506c <USB_GetMode>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <USB_SetCurrentMode+0x84>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b31      	cmp	r3, #49	; 0x31
 8004c4c:	d9f0      	bls.n	8004c30 <USB_SetCurrentMode+0x60>
 8004c4e:	e001      	b.n	8004c54 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e005      	b.n	8004c60 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b32      	cmp	r3, #50	; 0x32
 8004c58:	d101      	bne.n	8004c5e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e000      	b.n	8004c60 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c68:	b084      	sub	sp, #16
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b086      	sub	sp, #24
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
 8004c72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c82:	2300      	movs	r3, #0
 8004c84:	613b      	str	r3, [r7, #16]
 8004c86:	e009      	b.n	8004c9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	3340      	adds	r3, #64	; 0x40
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	4413      	add	r3, r2
 8004c92:	2200      	movs	r2, #0
 8004c94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	613b      	str	r3, [r7, #16]
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	2b0e      	cmp	r3, #14
 8004ca0:	d9f2      	bls.n	8004c88 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d11c      	bne.n	8004ce2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cb6:	f043 0302 	orr.w	r3, r3, #2
 8004cba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ccc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	639a      	str	r2, [r3, #56]	; 0x38
 8004ce0:	e00b      	b.n	8004cfa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d00:	461a      	mov	r2, r3
 8004d02:	2300      	movs	r3, #0
 8004d04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d14:	461a      	mov	r2, r3
 8004d16:	680b      	ldr	r3, [r1, #0]
 8004d18:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d10c      	bne.n	8004d3a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d104      	bne.n	8004d30 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d26:	2100      	movs	r1, #0
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f965 	bl	8004ff8 <USB_SetDevSpeed>
 8004d2e:	e008      	b.n	8004d42 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d30:	2101      	movs	r1, #1
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f960 	bl	8004ff8 <USB_SetDevSpeed>
 8004d38:	e003      	b.n	8004d42 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d3a:	2103      	movs	r1, #3
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f95b 	bl	8004ff8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d42:	2110      	movs	r1, #16
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 f8f3 	bl	8004f30 <USB_FlushTxFifo>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f91f 	bl	8004f98 <USB_FlushRxFifo>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d76:	461a      	mov	r2, r3
 8004d78:	2300      	movs	r3, #0
 8004d7a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d82:	461a      	mov	r2, r3
 8004d84:	2300      	movs	r3, #0
 8004d86:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d88:	2300      	movs	r3, #0
 8004d8a:	613b      	str	r3, [r7, #16]
 8004d8c:	e043      	b.n	8004e16 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004da0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004da4:	d118      	bne.n	8004dd8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10a      	bne.n	8004dc2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db8:	461a      	mov	r2, r3
 8004dba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004dbe:	6013      	str	r3, [r2, #0]
 8004dc0:	e013      	b.n	8004dea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	e008      	b.n	8004dea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de4:	461a      	mov	r2, r3
 8004de6:	2300      	movs	r3, #0
 8004de8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df6:	461a      	mov	r2, r3
 8004df8:	2300      	movs	r3, #0
 8004dfa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e08:	461a      	mov	r2, r3
 8004e0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	3301      	adds	r3, #1
 8004e14:	613b      	str	r3, [r7, #16]
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d3b7      	bcc.n	8004d8e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e1e:	2300      	movs	r3, #0
 8004e20:	613b      	str	r3, [r7, #16]
 8004e22:	e043      	b.n	8004eac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e3a:	d118      	bne.n	8004e6e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10a      	bne.n	8004e58 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	015a      	lsls	r2, r3, #5
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4413      	add	r3, r2
 8004e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e54:	6013      	str	r3, [r2, #0]
 8004e56:	e013      	b.n	8004e80 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e64:	461a      	mov	r2, r3
 8004e66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e6a:	6013      	str	r3, [r2, #0]
 8004e6c:	e008      	b.n	8004e80 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	015a      	lsls	r2, r3, #5
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	2300      	movs	r3, #0
 8004e90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ea4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	613b      	str	r3, [r7, #16]
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d3b7      	bcc.n	8004e24 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ec2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ec6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ed4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d105      	bne.n	8004ee8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	f043 0210 	orr.w	r2, r3, #16
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	699a      	ldr	r2, [r3, #24]
 8004eec:	4b0f      	ldr	r3, [pc, #60]	; (8004f2c <USB_DevInit+0x2c4>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d005      	beq.n	8004f06 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	f043 0208 	orr.w	r2, r3, #8
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d107      	bne.n	8004f1c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f14:	f043 0304 	orr.w	r3, r3, #4
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f28:	b004      	add	sp, #16
 8004f2a:	4770      	bx	lr
 8004f2c:	803c3800 	.word	0x803c3800

08004f30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3301      	adds	r3, #1
 8004f42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4a13      	ldr	r2, [pc, #76]	; (8004f94 <USB_FlushTxFifo+0x64>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d901      	bls.n	8004f50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e01b      	b.n	8004f88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	daf2      	bge.n	8004f3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	019b      	lsls	r3, r3, #6
 8004f60:	f043 0220 	orr.w	r2, r3, #32
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4a08      	ldr	r2, [pc, #32]	; (8004f94 <USB_FlushTxFifo+0x64>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d901      	bls.n	8004f7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e006      	b.n	8004f88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b20      	cmp	r3, #32
 8004f84:	d0f0      	beq.n	8004f68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	00030d40 	.word	0x00030d40

08004f98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	4a11      	ldr	r2, [pc, #68]	; (8004ff4 <USB_FlushRxFifo+0x5c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d901      	bls.n	8004fb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e018      	b.n	8004fe8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	daf2      	bge.n	8004fa4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2210      	movs	r2, #16
 8004fc6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4a08      	ldr	r2, [pc, #32]	; (8004ff4 <USB_FlushRxFifo+0x5c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d901      	bls.n	8004fda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e006      	b.n	8004fe8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	2b10      	cmp	r3, #16
 8004fe4:	d0f0      	beq.n	8004fc8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	00030d40 	.word	0x00030d40

08004ff8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	460b      	mov	r3, r1
 8005002:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	68f9      	ldr	r1, [r7, #12]
 8005014:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005018:	4313      	orrs	r3, r2
 800501a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800502a:	b480      	push	{r7}
 800502c:	b085      	sub	sp, #20
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005044:	f023 0303 	bic.w	r3, r3, #3
 8005048:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005058:	f043 0302 	orr.w	r3, r3, #2
 800505c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	f003 0301 	and.w	r3, r3, #1
}
 800507c:	4618      	mov	r0, r3
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	3301      	adds	r3, #1
 8005098:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4a13      	ldr	r2, [pc, #76]	; (80050ec <USB_CoreReset+0x64>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d901      	bls.n	80050a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e01b      	b.n	80050de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	daf2      	bge.n	8005094 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f043 0201 	orr.w	r2, r3, #1
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	3301      	adds	r3, #1
 80050c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4a09      	ldr	r2, [pc, #36]	; (80050ec <USB_CoreReset+0x64>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d901      	bls.n	80050d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e006      	b.n	80050de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d0f0      	beq.n	80050be <USB_CoreReset+0x36>

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	00030d40 	.word	0x00030d40

080050f0 <atoi>:
 80050f0:	220a      	movs	r2, #10
 80050f2:	2100      	movs	r1, #0
 80050f4:	f000 b9cc 	b.w	8005490 <strtol>

080050f8 <__errno>:
 80050f8:	4b01      	ldr	r3, [pc, #4]	; (8005100 <__errno+0x8>)
 80050fa:	6818      	ldr	r0, [r3, #0]
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	2000000c 	.word	0x2000000c

08005104 <__libc_init_array>:
 8005104:	b570      	push	{r4, r5, r6, lr}
 8005106:	4d0d      	ldr	r5, [pc, #52]	; (800513c <__libc_init_array+0x38>)
 8005108:	4c0d      	ldr	r4, [pc, #52]	; (8005140 <__libc_init_array+0x3c>)
 800510a:	1b64      	subs	r4, r4, r5
 800510c:	10a4      	asrs	r4, r4, #2
 800510e:	2600      	movs	r6, #0
 8005110:	42a6      	cmp	r6, r4
 8005112:	d109      	bne.n	8005128 <__libc_init_array+0x24>
 8005114:	4d0b      	ldr	r5, [pc, #44]	; (8005144 <__libc_init_array+0x40>)
 8005116:	4c0c      	ldr	r4, [pc, #48]	; (8005148 <__libc_init_array+0x44>)
 8005118:	f002 f85e 	bl	80071d8 <_init>
 800511c:	1b64      	subs	r4, r4, r5
 800511e:	10a4      	asrs	r4, r4, #2
 8005120:	2600      	movs	r6, #0
 8005122:	42a6      	cmp	r6, r4
 8005124:	d105      	bne.n	8005132 <__libc_init_array+0x2e>
 8005126:	bd70      	pop	{r4, r5, r6, pc}
 8005128:	f855 3b04 	ldr.w	r3, [r5], #4
 800512c:	4798      	blx	r3
 800512e:	3601      	adds	r6, #1
 8005130:	e7ee      	b.n	8005110 <__libc_init_array+0xc>
 8005132:	f855 3b04 	ldr.w	r3, [r5], #4
 8005136:	4798      	blx	r3
 8005138:	3601      	adds	r6, #1
 800513a:	e7f2      	b.n	8005122 <__libc_init_array+0x1e>
 800513c:	0800843c 	.word	0x0800843c
 8005140:	0800843c 	.word	0x0800843c
 8005144:	0800843c 	.word	0x0800843c
 8005148:	08008440 	.word	0x08008440

0800514c <memset>:
 800514c:	4402      	add	r2, r0
 800514e:	4603      	mov	r3, r0
 8005150:	4293      	cmp	r3, r2
 8005152:	d100      	bne.n	8005156 <memset+0xa>
 8005154:	4770      	bx	lr
 8005156:	f803 1b01 	strb.w	r1, [r3], #1
 800515a:	e7f9      	b.n	8005150 <memset+0x4>

0800515c <iprintf>:
 800515c:	b40f      	push	{r0, r1, r2, r3}
 800515e:	4b0a      	ldr	r3, [pc, #40]	; (8005188 <iprintf+0x2c>)
 8005160:	b513      	push	{r0, r1, r4, lr}
 8005162:	681c      	ldr	r4, [r3, #0]
 8005164:	b124      	cbz	r4, 8005170 <iprintf+0x14>
 8005166:	69a3      	ldr	r3, [r4, #24]
 8005168:	b913      	cbnz	r3, 8005170 <iprintf+0x14>
 800516a:	4620      	mov	r0, r4
 800516c:	f000 fac6 	bl	80056fc <__sinit>
 8005170:	ab05      	add	r3, sp, #20
 8005172:	9a04      	ldr	r2, [sp, #16]
 8005174:	68a1      	ldr	r1, [r4, #8]
 8005176:	9301      	str	r3, [sp, #4]
 8005178:	4620      	mov	r0, r4
 800517a:	f000 fe4f 	bl	8005e1c <_vfiprintf_r>
 800517e:	b002      	add	sp, #8
 8005180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005184:	b004      	add	sp, #16
 8005186:	4770      	bx	lr
 8005188:	2000000c 	.word	0x2000000c

0800518c <iscanf>:
 800518c:	b40f      	push	{r0, r1, r2, r3}
 800518e:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <iscanf+0x2c>)
 8005190:	b513      	push	{r0, r1, r4, lr}
 8005192:	681c      	ldr	r4, [r3, #0]
 8005194:	b124      	cbz	r4, 80051a0 <iscanf+0x14>
 8005196:	69a3      	ldr	r3, [r4, #24]
 8005198:	b913      	cbnz	r3, 80051a0 <iscanf+0x14>
 800519a:	4620      	mov	r0, r4
 800519c:	f000 faae 	bl	80056fc <__sinit>
 80051a0:	ab05      	add	r3, sp, #20
 80051a2:	9a04      	ldr	r2, [sp, #16]
 80051a4:	6861      	ldr	r1, [r4, #4]
 80051a6:	9301      	str	r3, [sp, #4]
 80051a8:	4620      	mov	r0, r4
 80051aa:	f001 faa1 	bl	80066f0 <_vfiscanf_r>
 80051ae:	b002      	add	sp, #8
 80051b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051b4:	b004      	add	sp, #16
 80051b6:	4770      	bx	lr
 80051b8:	2000000c 	.word	0x2000000c

080051bc <setvbuf>:
 80051bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80051c0:	461d      	mov	r5, r3
 80051c2:	4b5d      	ldr	r3, [pc, #372]	; (8005338 <setvbuf+0x17c>)
 80051c4:	681f      	ldr	r7, [r3, #0]
 80051c6:	4604      	mov	r4, r0
 80051c8:	460e      	mov	r6, r1
 80051ca:	4690      	mov	r8, r2
 80051cc:	b127      	cbz	r7, 80051d8 <setvbuf+0x1c>
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	b913      	cbnz	r3, 80051d8 <setvbuf+0x1c>
 80051d2:	4638      	mov	r0, r7
 80051d4:	f000 fa92 	bl	80056fc <__sinit>
 80051d8:	4b58      	ldr	r3, [pc, #352]	; (800533c <setvbuf+0x180>)
 80051da:	429c      	cmp	r4, r3
 80051dc:	d167      	bne.n	80052ae <setvbuf+0xf2>
 80051de:	687c      	ldr	r4, [r7, #4]
 80051e0:	f1b8 0f02 	cmp.w	r8, #2
 80051e4:	d006      	beq.n	80051f4 <setvbuf+0x38>
 80051e6:	f1b8 0f01 	cmp.w	r8, #1
 80051ea:	f200 809f 	bhi.w	800532c <setvbuf+0x170>
 80051ee:	2d00      	cmp	r5, #0
 80051f0:	f2c0 809c 	blt.w	800532c <setvbuf+0x170>
 80051f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051f6:	07db      	lsls	r3, r3, #31
 80051f8:	d405      	bmi.n	8005206 <setvbuf+0x4a>
 80051fa:	89a3      	ldrh	r3, [r4, #12]
 80051fc:	0598      	lsls	r0, r3, #22
 80051fe:	d402      	bmi.n	8005206 <setvbuf+0x4a>
 8005200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005202:	f000 fb36 	bl	8005872 <__retarget_lock_acquire_recursive>
 8005206:	4621      	mov	r1, r4
 8005208:	4638      	mov	r0, r7
 800520a:	f000 f9d1 	bl	80055b0 <_fflush_r>
 800520e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005210:	b141      	cbz	r1, 8005224 <setvbuf+0x68>
 8005212:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005216:	4299      	cmp	r1, r3
 8005218:	d002      	beq.n	8005220 <setvbuf+0x64>
 800521a:	4638      	mov	r0, r7
 800521c:	f000 fb98 	bl	8005950 <_free_r>
 8005220:	2300      	movs	r3, #0
 8005222:	6363      	str	r3, [r4, #52]	; 0x34
 8005224:	2300      	movs	r3, #0
 8005226:	61a3      	str	r3, [r4, #24]
 8005228:	6063      	str	r3, [r4, #4]
 800522a:	89a3      	ldrh	r3, [r4, #12]
 800522c:	0619      	lsls	r1, r3, #24
 800522e:	d503      	bpl.n	8005238 <setvbuf+0x7c>
 8005230:	6921      	ldr	r1, [r4, #16]
 8005232:	4638      	mov	r0, r7
 8005234:	f000 fb8c 	bl	8005950 <_free_r>
 8005238:	89a3      	ldrh	r3, [r4, #12]
 800523a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800523e:	f023 0303 	bic.w	r3, r3, #3
 8005242:	f1b8 0f02 	cmp.w	r8, #2
 8005246:	81a3      	strh	r3, [r4, #12]
 8005248:	d06c      	beq.n	8005324 <setvbuf+0x168>
 800524a:	ab01      	add	r3, sp, #4
 800524c:	466a      	mov	r2, sp
 800524e:	4621      	mov	r1, r4
 8005250:	4638      	mov	r0, r7
 8005252:	f000 fb10 	bl	8005876 <__swhatbuf_r>
 8005256:	89a3      	ldrh	r3, [r4, #12]
 8005258:	4318      	orrs	r0, r3
 800525a:	81a0      	strh	r0, [r4, #12]
 800525c:	2d00      	cmp	r5, #0
 800525e:	d130      	bne.n	80052c2 <setvbuf+0x106>
 8005260:	9d00      	ldr	r5, [sp, #0]
 8005262:	4628      	mov	r0, r5
 8005264:	f000 fb6c 	bl	8005940 <malloc>
 8005268:	4606      	mov	r6, r0
 800526a:	2800      	cmp	r0, #0
 800526c:	d155      	bne.n	800531a <setvbuf+0x15e>
 800526e:	f8dd 9000 	ldr.w	r9, [sp]
 8005272:	45a9      	cmp	r9, r5
 8005274:	d14a      	bne.n	800530c <setvbuf+0x150>
 8005276:	f04f 35ff 	mov.w	r5, #4294967295
 800527a:	2200      	movs	r2, #0
 800527c:	60a2      	str	r2, [r4, #8]
 800527e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005282:	6022      	str	r2, [r4, #0]
 8005284:	6122      	str	r2, [r4, #16]
 8005286:	2201      	movs	r2, #1
 8005288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800528c:	6162      	str	r2, [r4, #20]
 800528e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005290:	f043 0302 	orr.w	r3, r3, #2
 8005294:	07d2      	lsls	r2, r2, #31
 8005296:	81a3      	strh	r3, [r4, #12]
 8005298:	d405      	bmi.n	80052a6 <setvbuf+0xea>
 800529a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800529e:	d102      	bne.n	80052a6 <setvbuf+0xea>
 80052a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052a2:	f000 fae7 	bl	8005874 <__retarget_lock_release_recursive>
 80052a6:	4628      	mov	r0, r5
 80052a8:	b003      	add	sp, #12
 80052aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052ae:	4b24      	ldr	r3, [pc, #144]	; (8005340 <setvbuf+0x184>)
 80052b0:	429c      	cmp	r4, r3
 80052b2:	d101      	bne.n	80052b8 <setvbuf+0xfc>
 80052b4:	68bc      	ldr	r4, [r7, #8]
 80052b6:	e793      	b.n	80051e0 <setvbuf+0x24>
 80052b8:	4b22      	ldr	r3, [pc, #136]	; (8005344 <setvbuf+0x188>)
 80052ba:	429c      	cmp	r4, r3
 80052bc:	bf08      	it	eq
 80052be:	68fc      	ldreq	r4, [r7, #12]
 80052c0:	e78e      	b.n	80051e0 <setvbuf+0x24>
 80052c2:	2e00      	cmp	r6, #0
 80052c4:	d0cd      	beq.n	8005262 <setvbuf+0xa6>
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	b913      	cbnz	r3, 80052d0 <setvbuf+0x114>
 80052ca:	4638      	mov	r0, r7
 80052cc:	f000 fa16 	bl	80056fc <__sinit>
 80052d0:	f1b8 0f01 	cmp.w	r8, #1
 80052d4:	bf08      	it	eq
 80052d6:	89a3      	ldrheq	r3, [r4, #12]
 80052d8:	6026      	str	r6, [r4, #0]
 80052da:	bf04      	itt	eq
 80052dc:	f043 0301 	orreq.w	r3, r3, #1
 80052e0:	81a3      	strheq	r3, [r4, #12]
 80052e2:	89a2      	ldrh	r2, [r4, #12]
 80052e4:	f012 0308 	ands.w	r3, r2, #8
 80052e8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80052ec:	d01c      	beq.n	8005328 <setvbuf+0x16c>
 80052ee:	07d3      	lsls	r3, r2, #31
 80052f0:	bf41      	itttt	mi
 80052f2:	2300      	movmi	r3, #0
 80052f4:	426d      	negmi	r5, r5
 80052f6:	60a3      	strmi	r3, [r4, #8]
 80052f8:	61a5      	strmi	r5, [r4, #24]
 80052fa:	bf58      	it	pl
 80052fc:	60a5      	strpl	r5, [r4, #8]
 80052fe:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005300:	f015 0501 	ands.w	r5, r5, #1
 8005304:	d115      	bne.n	8005332 <setvbuf+0x176>
 8005306:	f412 7f00 	tst.w	r2, #512	; 0x200
 800530a:	e7c8      	b.n	800529e <setvbuf+0xe2>
 800530c:	4648      	mov	r0, r9
 800530e:	f000 fb17 	bl	8005940 <malloc>
 8005312:	4606      	mov	r6, r0
 8005314:	2800      	cmp	r0, #0
 8005316:	d0ae      	beq.n	8005276 <setvbuf+0xba>
 8005318:	464d      	mov	r5, r9
 800531a:	89a3      	ldrh	r3, [r4, #12]
 800531c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005320:	81a3      	strh	r3, [r4, #12]
 8005322:	e7d0      	b.n	80052c6 <setvbuf+0x10a>
 8005324:	2500      	movs	r5, #0
 8005326:	e7a8      	b.n	800527a <setvbuf+0xbe>
 8005328:	60a3      	str	r3, [r4, #8]
 800532a:	e7e8      	b.n	80052fe <setvbuf+0x142>
 800532c:	f04f 35ff 	mov.w	r5, #4294967295
 8005330:	e7b9      	b.n	80052a6 <setvbuf+0xea>
 8005332:	2500      	movs	r5, #0
 8005334:	e7b7      	b.n	80052a6 <setvbuf+0xea>
 8005336:	bf00      	nop
 8005338:	2000000c 	.word	0x2000000c
 800533c:	080083a4 	.word	0x080083a4
 8005340:	080083c4 	.word	0x080083c4
 8005344:	08008384 	.word	0x08008384

08005348 <siprintf>:
 8005348:	b40e      	push	{r1, r2, r3}
 800534a:	b500      	push	{lr}
 800534c:	b09c      	sub	sp, #112	; 0x70
 800534e:	ab1d      	add	r3, sp, #116	; 0x74
 8005350:	9002      	str	r0, [sp, #8]
 8005352:	9006      	str	r0, [sp, #24]
 8005354:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005358:	4809      	ldr	r0, [pc, #36]	; (8005380 <siprintf+0x38>)
 800535a:	9107      	str	r1, [sp, #28]
 800535c:	9104      	str	r1, [sp, #16]
 800535e:	4909      	ldr	r1, [pc, #36]	; (8005384 <siprintf+0x3c>)
 8005360:	f853 2b04 	ldr.w	r2, [r3], #4
 8005364:	9105      	str	r1, [sp, #20]
 8005366:	6800      	ldr	r0, [r0, #0]
 8005368:	9301      	str	r3, [sp, #4]
 800536a:	a902      	add	r1, sp, #8
 800536c:	f000 fc2c 	bl	8005bc8 <_svfiprintf_r>
 8005370:	9b02      	ldr	r3, [sp, #8]
 8005372:	2200      	movs	r2, #0
 8005374:	701a      	strb	r2, [r3, #0]
 8005376:	b01c      	add	sp, #112	; 0x70
 8005378:	f85d eb04 	ldr.w	lr, [sp], #4
 800537c:	b003      	add	sp, #12
 800537e:	4770      	bx	lr
 8005380:	2000000c 	.word	0x2000000c
 8005384:	ffff0208 	.word	0xffff0208

08005388 <_strtol_l.constprop.0>:
 8005388:	2b01      	cmp	r3, #1
 800538a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800538e:	d001      	beq.n	8005394 <_strtol_l.constprop.0+0xc>
 8005390:	2b24      	cmp	r3, #36	; 0x24
 8005392:	d906      	bls.n	80053a2 <_strtol_l.constprop.0+0x1a>
 8005394:	f7ff feb0 	bl	80050f8 <__errno>
 8005398:	2316      	movs	r3, #22
 800539a:	6003      	str	r3, [r0, #0]
 800539c:	2000      	movs	r0, #0
 800539e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005488 <_strtol_l.constprop.0+0x100>
 80053a6:	460d      	mov	r5, r1
 80053a8:	462e      	mov	r6, r5
 80053aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80053ae:	f814 700c 	ldrb.w	r7, [r4, ip]
 80053b2:	f017 0708 	ands.w	r7, r7, #8
 80053b6:	d1f7      	bne.n	80053a8 <_strtol_l.constprop.0+0x20>
 80053b8:	2c2d      	cmp	r4, #45	; 0x2d
 80053ba:	d132      	bne.n	8005422 <_strtol_l.constprop.0+0x9a>
 80053bc:	782c      	ldrb	r4, [r5, #0]
 80053be:	2701      	movs	r7, #1
 80053c0:	1cb5      	adds	r5, r6, #2
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d05b      	beq.n	800547e <_strtol_l.constprop.0+0xf6>
 80053c6:	2b10      	cmp	r3, #16
 80053c8:	d109      	bne.n	80053de <_strtol_l.constprop.0+0x56>
 80053ca:	2c30      	cmp	r4, #48	; 0x30
 80053cc:	d107      	bne.n	80053de <_strtol_l.constprop.0+0x56>
 80053ce:	782c      	ldrb	r4, [r5, #0]
 80053d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80053d4:	2c58      	cmp	r4, #88	; 0x58
 80053d6:	d14d      	bne.n	8005474 <_strtol_l.constprop.0+0xec>
 80053d8:	786c      	ldrb	r4, [r5, #1]
 80053da:	2310      	movs	r3, #16
 80053dc:	3502      	adds	r5, #2
 80053de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80053e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80053e6:	f04f 0c00 	mov.w	ip, #0
 80053ea:	fbb8 f9f3 	udiv	r9, r8, r3
 80053ee:	4666      	mov	r6, ip
 80053f0:	fb03 8a19 	mls	sl, r3, r9, r8
 80053f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80053f8:	f1be 0f09 	cmp.w	lr, #9
 80053fc:	d816      	bhi.n	800542c <_strtol_l.constprop.0+0xa4>
 80053fe:	4674      	mov	r4, lr
 8005400:	42a3      	cmp	r3, r4
 8005402:	dd24      	ble.n	800544e <_strtol_l.constprop.0+0xc6>
 8005404:	f1bc 0f00 	cmp.w	ip, #0
 8005408:	db1e      	blt.n	8005448 <_strtol_l.constprop.0+0xc0>
 800540a:	45b1      	cmp	r9, r6
 800540c:	d31c      	bcc.n	8005448 <_strtol_l.constprop.0+0xc0>
 800540e:	d101      	bne.n	8005414 <_strtol_l.constprop.0+0x8c>
 8005410:	45a2      	cmp	sl, r4
 8005412:	db19      	blt.n	8005448 <_strtol_l.constprop.0+0xc0>
 8005414:	fb06 4603 	mla	r6, r6, r3, r4
 8005418:	f04f 0c01 	mov.w	ip, #1
 800541c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005420:	e7e8      	b.n	80053f4 <_strtol_l.constprop.0+0x6c>
 8005422:	2c2b      	cmp	r4, #43	; 0x2b
 8005424:	bf04      	itt	eq
 8005426:	782c      	ldrbeq	r4, [r5, #0]
 8005428:	1cb5      	addeq	r5, r6, #2
 800542a:	e7ca      	b.n	80053c2 <_strtol_l.constprop.0+0x3a>
 800542c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005430:	f1be 0f19 	cmp.w	lr, #25
 8005434:	d801      	bhi.n	800543a <_strtol_l.constprop.0+0xb2>
 8005436:	3c37      	subs	r4, #55	; 0x37
 8005438:	e7e2      	b.n	8005400 <_strtol_l.constprop.0+0x78>
 800543a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800543e:	f1be 0f19 	cmp.w	lr, #25
 8005442:	d804      	bhi.n	800544e <_strtol_l.constprop.0+0xc6>
 8005444:	3c57      	subs	r4, #87	; 0x57
 8005446:	e7db      	b.n	8005400 <_strtol_l.constprop.0+0x78>
 8005448:	f04f 3cff 	mov.w	ip, #4294967295
 800544c:	e7e6      	b.n	800541c <_strtol_l.constprop.0+0x94>
 800544e:	f1bc 0f00 	cmp.w	ip, #0
 8005452:	da05      	bge.n	8005460 <_strtol_l.constprop.0+0xd8>
 8005454:	2322      	movs	r3, #34	; 0x22
 8005456:	6003      	str	r3, [r0, #0]
 8005458:	4646      	mov	r6, r8
 800545a:	b942      	cbnz	r2, 800546e <_strtol_l.constprop.0+0xe6>
 800545c:	4630      	mov	r0, r6
 800545e:	e79e      	b.n	800539e <_strtol_l.constprop.0+0x16>
 8005460:	b107      	cbz	r7, 8005464 <_strtol_l.constprop.0+0xdc>
 8005462:	4276      	negs	r6, r6
 8005464:	2a00      	cmp	r2, #0
 8005466:	d0f9      	beq.n	800545c <_strtol_l.constprop.0+0xd4>
 8005468:	f1bc 0f00 	cmp.w	ip, #0
 800546c:	d000      	beq.n	8005470 <_strtol_l.constprop.0+0xe8>
 800546e:	1e69      	subs	r1, r5, #1
 8005470:	6011      	str	r1, [r2, #0]
 8005472:	e7f3      	b.n	800545c <_strtol_l.constprop.0+0xd4>
 8005474:	2430      	movs	r4, #48	; 0x30
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1b1      	bne.n	80053de <_strtol_l.constprop.0+0x56>
 800547a:	2308      	movs	r3, #8
 800547c:	e7af      	b.n	80053de <_strtol_l.constprop.0+0x56>
 800547e:	2c30      	cmp	r4, #48	; 0x30
 8005480:	d0a5      	beq.n	80053ce <_strtol_l.constprop.0+0x46>
 8005482:	230a      	movs	r3, #10
 8005484:	e7ab      	b.n	80053de <_strtol_l.constprop.0+0x56>
 8005486:	bf00      	nop
 8005488:	08008281 	.word	0x08008281

0800548c <_strtol_r>:
 800548c:	f7ff bf7c 	b.w	8005388 <_strtol_l.constprop.0>

08005490 <strtol>:
 8005490:	4613      	mov	r3, r2
 8005492:	460a      	mov	r2, r1
 8005494:	4601      	mov	r1, r0
 8005496:	4802      	ldr	r0, [pc, #8]	; (80054a0 <strtol+0x10>)
 8005498:	6800      	ldr	r0, [r0, #0]
 800549a:	f7ff bf75 	b.w	8005388 <_strtol_l.constprop.0>
 800549e:	bf00      	nop
 80054a0:	2000000c 	.word	0x2000000c

080054a4 <__sflush_r>:
 80054a4:	898a      	ldrh	r2, [r1, #12]
 80054a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054aa:	4605      	mov	r5, r0
 80054ac:	0710      	lsls	r0, r2, #28
 80054ae:	460c      	mov	r4, r1
 80054b0:	d458      	bmi.n	8005564 <__sflush_r+0xc0>
 80054b2:	684b      	ldr	r3, [r1, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	dc05      	bgt.n	80054c4 <__sflush_r+0x20>
 80054b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	dc02      	bgt.n	80054c4 <__sflush_r+0x20>
 80054be:	2000      	movs	r0, #0
 80054c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054c6:	2e00      	cmp	r6, #0
 80054c8:	d0f9      	beq.n	80054be <__sflush_r+0x1a>
 80054ca:	2300      	movs	r3, #0
 80054cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054d0:	682f      	ldr	r7, [r5, #0]
 80054d2:	602b      	str	r3, [r5, #0]
 80054d4:	d032      	beq.n	800553c <__sflush_r+0x98>
 80054d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054d8:	89a3      	ldrh	r3, [r4, #12]
 80054da:	075a      	lsls	r2, r3, #29
 80054dc:	d505      	bpl.n	80054ea <__sflush_r+0x46>
 80054de:	6863      	ldr	r3, [r4, #4]
 80054e0:	1ac0      	subs	r0, r0, r3
 80054e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054e4:	b10b      	cbz	r3, 80054ea <__sflush_r+0x46>
 80054e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054e8:	1ac0      	subs	r0, r0, r3
 80054ea:	2300      	movs	r3, #0
 80054ec:	4602      	mov	r2, r0
 80054ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054f0:	6a21      	ldr	r1, [r4, #32]
 80054f2:	4628      	mov	r0, r5
 80054f4:	47b0      	blx	r6
 80054f6:	1c43      	adds	r3, r0, #1
 80054f8:	89a3      	ldrh	r3, [r4, #12]
 80054fa:	d106      	bne.n	800550a <__sflush_r+0x66>
 80054fc:	6829      	ldr	r1, [r5, #0]
 80054fe:	291d      	cmp	r1, #29
 8005500:	d82c      	bhi.n	800555c <__sflush_r+0xb8>
 8005502:	4a2a      	ldr	r2, [pc, #168]	; (80055ac <__sflush_r+0x108>)
 8005504:	40ca      	lsrs	r2, r1
 8005506:	07d6      	lsls	r6, r2, #31
 8005508:	d528      	bpl.n	800555c <__sflush_r+0xb8>
 800550a:	2200      	movs	r2, #0
 800550c:	6062      	str	r2, [r4, #4]
 800550e:	04d9      	lsls	r1, r3, #19
 8005510:	6922      	ldr	r2, [r4, #16]
 8005512:	6022      	str	r2, [r4, #0]
 8005514:	d504      	bpl.n	8005520 <__sflush_r+0x7c>
 8005516:	1c42      	adds	r2, r0, #1
 8005518:	d101      	bne.n	800551e <__sflush_r+0x7a>
 800551a:	682b      	ldr	r3, [r5, #0]
 800551c:	b903      	cbnz	r3, 8005520 <__sflush_r+0x7c>
 800551e:	6560      	str	r0, [r4, #84]	; 0x54
 8005520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005522:	602f      	str	r7, [r5, #0]
 8005524:	2900      	cmp	r1, #0
 8005526:	d0ca      	beq.n	80054be <__sflush_r+0x1a>
 8005528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800552c:	4299      	cmp	r1, r3
 800552e:	d002      	beq.n	8005536 <__sflush_r+0x92>
 8005530:	4628      	mov	r0, r5
 8005532:	f000 fa0d 	bl	8005950 <_free_r>
 8005536:	2000      	movs	r0, #0
 8005538:	6360      	str	r0, [r4, #52]	; 0x34
 800553a:	e7c1      	b.n	80054c0 <__sflush_r+0x1c>
 800553c:	6a21      	ldr	r1, [r4, #32]
 800553e:	2301      	movs	r3, #1
 8005540:	4628      	mov	r0, r5
 8005542:	47b0      	blx	r6
 8005544:	1c41      	adds	r1, r0, #1
 8005546:	d1c7      	bne.n	80054d8 <__sflush_r+0x34>
 8005548:	682b      	ldr	r3, [r5, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0c4      	beq.n	80054d8 <__sflush_r+0x34>
 800554e:	2b1d      	cmp	r3, #29
 8005550:	d001      	beq.n	8005556 <__sflush_r+0xb2>
 8005552:	2b16      	cmp	r3, #22
 8005554:	d101      	bne.n	800555a <__sflush_r+0xb6>
 8005556:	602f      	str	r7, [r5, #0]
 8005558:	e7b1      	b.n	80054be <__sflush_r+0x1a>
 800555a:	89a3      	ldrh	r3, [r4, #12]
 800555c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005560:	81a3      	strh	r3, [r4, #12]
 8005562:	e7ad      	b.n	80054c0 <__sflush_r+0x1c>
 8005564:	690f      	ldr	r7, [r1, #16]
 8005566:	2f00      	cmp	r7, #0
 8005568:	d0a9      	beq.n	80054be <__sflush_r+0x1a>
 800556a:	0793      	lsls	r3, r2, #30
 800556c:	680e      	ldr	r6, [r1, #0]
 800556e:	bf08      	it	eq
 8005570:	694b      	ldreq	r3, [r1, #20]
 8005572:	600f      	str	r7, [r1, #0]
 8005574:	bf18      	it	ne
 8005576:	2300      	movne	r3, #0
 8005578:	eba6 0807 	sub.w	r8, r6, r7
 800557c:	608b      	str	r3, [r1, #8]
 800557e:	f1b8 0f00 	cmp.w	r8, #0
 8005582:	dd9c      	ble.n	80054be <__sflush_r+0x1a>
 8005584:	6a21      	ldr	r1, [r4, #32]
 8005586:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005588:	4643      	mov	r3, r8
 800558a:	463a      	mov	r2, r7
 800558c:	4628      	mov	r0, r5
 800558e:	47b0      	blx	r6
 8005590:	2800      	cmp	r0, #0
 8005592:	dc06      	bgt.n	80055a2 <__sflush_r+0xfe>
 8005594:	89a3      	ldrh	r3, [r4, #12]
 8005596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800559a:	81a3      	strh	r3, [r4, #12]
 800559c:	f04f 30ff 	mov.w	r0, #4294967295
 80055a0:	e78e      	b.n	80054c0 <__sflush_r+0x1c>
 80055a2:	4407      	add	r7, r0
 80055a4:	eba8 0800 	sub.w	r8, r8, r0
 80055a8:	e7e9      	b.n	800557e <__sflush_r+0xda>
 80055aa:	bf00      	nop
 80055ac:	20400001 	.word	0x20400001

080055b0 <_fflush_r>:
 80055b0:	b538      	push	{r3, r4, r5, lr}
 80055b2:	690b      	ldr	r3, [r1, #16]
 80055b4:	4605      	mov	r5, r0
 80055b6:	460c      	mov	r4, r1
 80055b8:	b913      	cbnz	r3, 80055c0 <_fflush_r+0x10>
 80055ba:	2500      	movs	r5, #0
 80055bc:	4628      	mov	r0, r5
 80055be:	bd38      	pop	{r3, r4, r5, pc}
 80055c0:	b118      	cbz	r0, 80055ca <_fflush_r+0x1a>
 80055c2:	6983      	ldr	r3, [r0, #24]
 80055c4:	b90b      	cbnz	r3, 80055ca <_fflush_r+0x1a>
 80055c6:	f000 f899 	bl	80056fc <__sinit>
 80055ca:	4b14      	ldr	r3, [pc, #80]	; (800561c <_fflush_r+0x6c>)
 80055cc:	429c      	cmp	r4, r3
 80055ce:	d11b      	bne.n	8005608 <_fflush_r+0x58>
 80055d0:	686c      	ldr	r4, [r5, #4]
 80055d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0ef      	beq.n	80055ba <_fflush_r+0xa>
 80055da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055dc:	07d0      	lsls	r0, r2, #31
 80055de:	d404      	bmi.n	80055ea <_fflush_r+0x3a>
 80055e0:	0599      	lsls	r1, r3, #22
 80055e2:	d402      	bmi.n	80055ea <_fflush_r+0x3a>
 80055e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055e6:	f000 f944 	bl	8005872 <__retarget_lock_acquire_recursive>
 80055ea:	4628      	mov	r0, r5
 80055ec:	4621      	mov	r1, r4
 80055ee:	f7ff ff59 	bl	80054a4 <__sflush_r>
 80055f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055f4:	07da      	lsls	r2, r3, #31
 80055f6:	4605      	mov	r5, r0
 80055f8:	d4e0      	bmi.n	80055bc <_fflush_r+0xc>
 80055fa:	89a3      	ldrh	r3, [r4, #12]
 80055fc:	059b      	lsls	r3, r3, #22
 80055fe:	d4dd      	bmi.n	80055bc <_fflush_r+0xc>
 8005600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005602:	f000 f937 	bl	8005874 <__retarget_lock_release_recursive>
 8005606:	e7d9      	b.n	80055bc <_fflush_r+0xc>
 8005608:	4b05      	ldr	r3, [pc, #20]	; (8005620 <_fflush_r+0x70>)
 800560a:	429c      	cmp	r4, r3
 800560c:	d101      	bne.n	8005612 <_fflush_r+0x62>
 800560e:	68ac      	ldr	r4, [r5, #8]
 8005610:	e7df      	b.n	80055d2 <_fflush_r+0x22>
 8005612:	4b04      	ldr	r3, [pc, #16]	; (8005624 <_fflush_r+0x74>)
 8005614:	429c      	cmp	r4, r3
 8005616:	bf08      	it	eq
 8005618:	68ec      	ldreq	r4, [r5, #12]
 800561a:	e7da      	b.n	80055d2 <_fflush_r+0x22>
 800561c:	080083a4 	.word	0x080083a4
 8005620:	080083c4 	.word	0x080083c4
 8005624:	08008384 	.word	0x08008384

08005628 <fflush>:
 8005628:	4601      	mov	r1, r0
 800562a:	b920      	cbnz	r0, 8005636 <fflush+0xe>
 800562c:	4b04      	ldr	r3, [pc, #16]	; (8005640 <fflush+0x18>)
 800562e:	4905      	ldr	r1, [pc, #20]	; (8005644 <fflush+0x1c>)
 8005630:	6818      	ldr	r0, [r3, #0]
 8005632:	f000 b8fe 	b.w	8005832 <_fwalk_reent>
 8005636:	4b04      	ldr	r3, [pc, #16]	; (8005648 <fflush+0x20>)
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	f7ff bfb9 	b.w	80055b0 <_fflush_r>
 800563e:	bf00      	nop
 8005640:	0800827c 	.word	0x0800827c
 8005644:	080055b1 	.word	0x080055b1
 8005648:	2000000c 	.word	0x2000000c

0800564c <std>:
 800564c:	2300      	movs	r3, #0
 800564e:	b510      	push	{r4, lr}
 8005650:	4604      	mov	r4, r0
 8005652:	e9c0 3300 	strd	r3, r3, [r0]
 8005656:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800565a:	6083      	str	r3, [r0, #8]
 800565c:	8181      	strh	r1, [r0, #12]
 800565e:	6643      	str	r3, [r0, #100]	; 0x64
 8005660:	81c2      	strh	r2, [r0, #14]
 8005662:	6183      	str	r3, [r0, #24]
 8005664:	4619      	mov	r1, r3
 8005666:	2208      	movs	r2, #8
 8005668:	305c      	adds	r0, #92	; 0x5c
 800566a:	f7ff fd6f 	bl	800514c <memset>
 800566e:	4b05      	ldr	r3, [pc, #20]	; (8005684 <std+0x38>)
 8005670:	6263      	str	r3, [r4, #36]	; 0x24
 8005672:	4b05      	ldr	r3, [pc, #20]	; (8005688 <std+0x3c>)
 8005674:	62a3      	str	r3, [r4, #40]	; 0x28
 8005676:	4b05      	ldr	r3, [pc, #20]	; (800568c <std+0x40>)
 8005678:	62e3      	str	r3, [r4, #44]	; 0x2c
 800567a:	4b05      	ldr	r3, [pc, #20]	; (8005690 <std+0x44>)
 800567c:	6224      	str	r4, [r4, #32]
 800567e:	6323      	str	r3, [r4, #48]	; 0x30
 8005680:	bd10      	pop	{r4, pc}
 8005682:	bf00      	nop
 8005684:	08006b9d 	.word	0x08006b9d
 8005688:	08006bbf 	.word	0x08006bbf
 800568c:	08006bf7 	.word	0x08006bf7
 8005690:	08006c1b 	.word	0x08006c1b

08005694 <_cleanup_r>:
 8005694:	4901      	ldr	r1, [pc, #4]	; (800569c <_cleanup_r+0x8>)
 8005696:	f000 b8cc 	b.w	8005832 <_fwalk_reent>
 800569a:	bf00      	nop
 800569c:	080055b1 	.word	0x080055b1

080056a0 <__sfmoreglue>:
 80056a0:	b570      	push	{r4, r5, r6, lr}
 80056a2:	2268      	movs	r2, #104	; 0x68
 80056a4:	1e4d      	subs	r5, r1, #1
 80056a6:	4355      	muls	r5, r2
 80056a8:	460e      	mov	r6, r1
 80056aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80056ae:	f000 f9bb 	bl	8005a28 <_malloc_r>
 80056b2:	4604      	mov	r4, r0
 80056b4:	b140      	cbz	r0, 80056c8 <__sfmoreglue+0x28>
 80056b6:	2100      	movs	r1, #0
 80056b8:	e9c0 1600 	strd	r1, r6, [r0]
 80056bc:	300c      	adds	r0, #12
 80056be:	60a0      	str	r0, [r4, #8]
 80056c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80056c4:	f7ff fd42 	bl	800514c <memset>
 80056c8:	4620      	mov	r0, r4
 80056ca:	bd70      	pop	{r4, r5, r6, pc}

080056cc <__sfp_lock_acquire>:
 80056cc:	4801      	ldr	r0, [pc, #4]	; (80056d4 <__sfp_lock_acquire+0x8>)
 80056ce:	f000 b8d0 	b.w	8005872 <__retarget_lock_acquire_recursive>
 80056d2:	bf00      	nop
 80056d4:	200008b5 	.word	0x200008b5

080056d8 <__sfp_lock_release>:
 80056d8:	4801      	ldr	r0, [pc, #4]	; (80056e0 <__sfp_lock_release+0x8>)
 80056da:	f000 b8cb 	b.w	8005874 <__retarget_lock_release_recursive>
 80056de:	bf00      	nop
 80056e0:	200008b5 	.word	0x200008b5

080056e4 <__sinit_lock_acquire>:
 80056e4:	4801      	ldr	r0, [pc, #4]	; (80056ec <__sinit_lock_acquire+0x8>)
 80056e6:	f000 b8c4 	b.w	8005872 <__retarget_lock_acquire_recursive>
 80056ea:	bf00      	nop
 80056ec:	200008b6 	.word	0x200008b6

080056f0 <__sinit_lock_release>:
 80056f0:	4801      	ldr	r0, [pc, #4]	; (80056f8 <__sinit_lock_release+0x8>)
 80056f2:	f000 b8bf 	b.w	8005874 <__retarget_lock_release_recursive>
 80056f6:	bf00      	nop
 80056f8:	200008b6 	.word	0x200008b6

080056fc <__sinit>:
 80056fc:	b510      	push	{r4, lr}
 80056fe:	4604      	mov	r4, r0
 8005700:	f7ff fff0 	bl	80056e4 <__sinit_lock_acquire>
 8005704:	69a3      	ldr	r3, [r4, #24]
 8005706:	b11b      	cbz	r3, 8005710 <__sinit+0x14>
 8005708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800570c:	f7ff bff0 	b.w	80056f0 <__sinit_lock_release>
 8005710:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005714:	6523      	str	r3, [r4, #80]	; 0x50
 8005716:	4b13      	ldr	r3, [pc, #76]	; (8005764 <__sinit+0x68>)
 8005718:	4a13      	ldr	r2, [pc, #76]	; (8005768 <__sinit+0x6c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	62a2      	str	r2, [r4, #40]	; 0x28
 800571e:	42a3      	cmp	r3, r4
 8005720:	bf04      	itt	eq
 8005722:	2301      	moveq	r3, #1
 8005724:	61a3      	streq	r3, [r4, #24]
 8005726:	4620      	mov	r0, r4
 8005728:	f000 f820 	bl	800576c <__sfp>
 800572c:	6060      	str	r0, [r4, #4]
 800572e:	4620      	mov	r0, r4
 8005730:	f000 f81c 	bl	800576c <__sfp>
 8005734:	60a0      	str	r0, [r4, #8]
 8005736:	4620      	mov	r0, r4
 8005738:	f000 f818 	bl	800576c <__sfp>
 800573c:	2200      	movs	r2, #0
 800573e:	60e0      	str	r0, [r4, #12]
 8005740:	2104      	movs	r1, #4
 8005742:	6860      	ldr	r0, [r4, #4]
 8005744:	f7ff ff82 	bl	800564c <std>
 8005748:	68a0      	ldr	r0, [r4, #8]
 800574a:	2201      	movs	r2, #1
 800574c:	2109      	movs	r1, #9
 800574e:	f7ff ff7d 	bl	800564c <std>
 8005752:	68e0      	ldr	r0, [r4, #12]
 8005754:	2202      	movs	r2, #2
 8005756:	2112      	movs	r1, #18
 8005758:	f7ff ff78 	bl	800564c <std>
 800575c:	2301      	movs	r3, #1
 800575e:	61a3      	str	r3, [r4, #24]
 8005760:	e7d2      	b.n	8005708 <__sinit+0xc>
 8005762:	bf00      	nop
 8005764:	0800827c 	.word	0x0800827c
 8005768:	08005695 	.word	0x08005695

0800576c <__sfp>:
 800576c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800576e:	4607      	mov	r7, r0
 8005770:	f7ff ffac 	bl	80056cc <__sfp_lock_acquire>
 8005774:	4b1e      	ldr	r3, [pc, #120]	; (80057f0 <__sfp+0x84>)
 8005776:	681e      	ldr	r6, [r3, #0]
 8005778:	69b3      	ldr	r3, [r6, #24]
 800577a:	b913      	cbnz	r3, 8005782 <__sfp+0x16>
 800577c:	4630      	mov	r0, r6
 800577e:	f7ff ffbd 	bl	80056fc <__sinit>
 8005782:	3648      	adds	r6, #72	; 0x48
 8005784:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005788:	3b01      	subs	r3, #1
 800578a:	d503      	bpl.n	8005794 <__sfp+0x28>
 800578c:	6833      	ldr	r3, [r6, #0]
 800578e:	b30b      	cbz	r3, 80057d4 <__sfp+0x68>
 8005790:	6836      	ldr	r6, [r6, #0]
 8005792:	e7f7      	b.n	8005784 <__sfp+0x18>
 8005794:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005798:	b9d5      	cbnz	r5, 80057d0 <__sfp+0x64>
 800579a:	4b16      	ldr	r3, [pc, #88]	; (80057f4 <__sfp+0x88>)
 800579c:	60e3      	str	r3, [r4, #12]
 800579e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057a2:	6665      	str	r5, [r4, #100]	; 0x64
 80057a4:	f000 f864 	bl	8005870 <__retarget_lock_init_recursive>
 80057a8:	f7ff ff96 	bl	80056d8 <__sfp_lock_release>
 80057ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80057b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80057b4:	6025      	str	r5, [r4, #0]
 80057b6:	61a5      	str	r5, [r4, #24]
 80057b8:	2208      	movs	r2, #8
 80057ba:	4629      	mov	r1, r5
 80057bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057c0:	f7ff fcc4 	bl	800514c <memset>
 80057c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80057c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80057cc:	4620      	mov	r0, r4
 80057ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057d0:	3468      	adds	r4, #104	; 0x68
 80057d2:	e7d9      	b.n	8005788 <__sfp+0x1c>
 80057d4:	2104      	movs	r1, #4
 80057d6:	4638      	mov	r0, r7
 80057d8:	f7ff ff62 	bl	80056a0 <__sfmoreglue>
 80057dc:	4604      	mov	r4, r0
 80057de:	6030      	str	r0, [r6, #0]
 80057e0:	2800      	cmp	r0, #0
 80057e2:	d1d5      	bne.n	8005790 <__sfp+0x24>
 80057e4:	f7ff ff78 	bl	80056d8 <__sfp_lock_release>
 80057e8:	230c      	movs	r3, #12
 80057ea:	603b      	str	r3, [r7, #0]
 80057ec:	e7ee      	b.n	80057cc <__sfp+0x60>
 80057ee:	bf00      	nop
 80057f0:	0800827c 	.word	0x0800827c
 80057f4:	ffff0001 	.word	0xffff0001

080057f8 <_fwalk>:
 80057f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057fc:	460f      	mov	r7, r1
 80057fe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005802:	2600      	movs	r6, #0
 8005804:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8005808:	f1b8 0801 	subs.w	r8, r8, #1
 800580c:	d505      	bpl.n	800581a <_fwalk+0x22>
 800580e:	6824      	ldr	r4, [r4, #0]
 8005810:	2c00      	cmp	r4, #0
 8005812:	d1f7      	bne.n	8005804 <_fwalk+0xc>
 8005814:	4630      	mov	r0, r6
 8005816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800581a:	89ab      	ldrh	r3, [r5, #12]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d906      	bls.n	800582e <_fwalk+0x36>
 8005820:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005824:	3301      	adds	r3, #1
 8005826:	d002      	beq.n	800582e <_fwalk+0x36>
 8005828:	4628      	mov	r0, r5
 800582a:	47b8      	blx	r7
 800582c:	4306      	orrs	r6, r0
 800582e:	3568      	adds	r5, #104	; 0x68
 8005830:	e7ea      	b.n	8005808 <_fwalk+0x10>

08005832 <_fwalk_reent>:
 8005832:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005836:	4606      	mov	r6, r0
 8005838:	4688      	mov	r8, r1
 800583a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800583e:	2700      	movs	r7, #0
 8005840:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005844:	f1b9 0901 	subs.w	r9, r9, #1
 8005848:	d505      	bpl.n	8005856 <_fwalk_reent+0x24>
 800584a:	6824      	ldr	r4, [r4, #0]
 800584c:	2c00      	cmp	r4, #0
 800584e:	d1f7      	bne.n	8005840 <_fwalk_reent+0xe>
 8005850:	4638      	mov	r0, r7
 8005852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005856:	89ab      	ldrh	r3, [r5, #12]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d907      	bls.n	800586c <_fwalk_reent+0x3a>
 800585c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005860:	3301      	adds	r3, #1
 8005862:	d003      	beq.n	800586c <_fwalk_reent+0x3a>
 8005864:	4629      	mov	r1, r5
 8005866:	4630      	mov	r0, r6
 8005868:	47c0      	blx	r8
 800586a:	4307      	orrs	r7, r0
 800586c:	3568      	adds	r5, #104	; 0x68
 800586e:	e7e9      	b.n	8005844 <_fwalk_reent+0x12>

08005870 <__retarget_lock_init_recursive>:
 8005870:	4770      	bx	lr

08005872 <__retarget_lock_acquire_recursive>:
 8005872:	4770      	bx	lr

08005874 <__retarget_lock_release_recursive>:
 8005874:	4770      	bx	lr

08005876 <__swhatbuf_r>:
 8005876:	b570      	push	{r4, r5, r6, lr}
 8005878:	460e      	mov	r6, r1
 800587a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800587e:	2900      	cmp	r1, #0
 8005880:	b096      	sub	sp, #88	; 0x58
 8005882:	4614      	mov	r4, r2
 8005884:	461d      	mov	r5, r3
 8005886:	da08      	bge.n	800589a <__swhatbuf_r+0x24>
 8005888:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	602a      	str	r2, [r5, #0]
 8005890:	061a      	lsls	r2, r3, #24
 8005892:	d410      	bmi.n	80058b6 <__swhatbuf_r+0x40>
 8005894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005898:	e00e      	b.n	80058b8 <__swhatbuf_r+0x42>
 800589a:	466a      	mov	r2, sp
 800589c:	f001 fbea 	bl	8007074 <_fstat_r>
 80058a0:	2800      	cmp	r0, #0
 80058a2:	dbf1      	blt.n	8005888 <__swhatbuf_r+0x12>
 80058a4:	9a01      	ldr	r2, [sp, #4]
 80058a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80058aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80058ae:	425a      	negs	r2, r3
 80058b0:	415a      	adcs	r2, r3
 80058b2:	602a      	str	r2, [r5, #0]
 80058b4:	e7ee      	b.n	8005894 <__swhatbuf_r+0x1e>
 80058b6:	2340      	movs	r3, #64	; 0x40
 80058b8:	2000      	movs	r0, #0
 80058ba:	6023      	str	r3, [r4, #0]
 80058bc:	b016      	add	sp, #88	; 0x58
 80058be:	bd70      	pop	{r4, r5, r6, pc}

080058c0 <__smakebuf_r>:
 80058c0:	898b      	ldrh	r3, [r1, #12]
 80058c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80058c4:	079d      	lsls	r5, r3, #30
 80058c6:	4606      	mov	r6, r0
 80058c8:	460c      	mov	r4, r1
 80058ca:	d507      	bpl.n	80058dc <__smakebuf_r+0x1c>
 80058cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80058d0:	6023      	str	r3, [r4, #0]
 80058d2:	6123      	str	r3, [r4, #16]
 80058d4:	2301      	movs	r3, #1
 80058d6:	6163      	str	r3, [r4, #20]
 80058d8:	b002      	add	sp, #8
 80058da:	bd70      	pop	{r4, r5, r6, pc}
 80058dc:	ab01      	add	r3, sp, #4
 80058de:	466a      	mov	r2, sp
 80058e0:	f7ff ffc9 	bl	8005876 <__swhatbuf_r>
 80058e4:	9900      	ldr	r1, [sp, #0]
 80058e6:	4605      	mov	r5, r0
 80058e8:	4630      	mov	r0, r6
 80058ea:	f000 f89d 	bl	8005a28 <_malloc_r>
 80058ee:	b948      	cbnz	r0, 8005904 <__smakebuf_r+0x44>
 80058f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058f4:	059a      	lsls	r2, r3, #22
 80058f6:	d4ef      	bmi.n	80058d8 <__smakebuf_r+0x18>
 80058f8:	f023 0303 	bic.w	r3, r3, #3
 80058fc:	f043 0302 	orr.w	r3, r3, #2
 8005900:	81a3      	strh	r3, [r4, #12]
 8005902:	e7e3      	b.n	80058cc <__smakebuf_r+0xc>
 8005904:	4b0d      	ldr	r3, [pc, #52]	; (800593c <__smakebuf_r+0x7c>)
 8005906:	62b3      	str	r3, [r6, #40]	; 0x28
 8005908:	89a3      	ldrh	r3, [r4, #12]
 800590a:	6020      	str	r0, [r4, #0]
 800590c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005910:	81a3      	strh	r3, [r4, #12]
 8005912:	9b00      	ldr	r3, [sp, #0]
 8005914:	6163      	str	r3, [r4, #20]
 8005916:	9b01      	ldr	r3, [sp, #4]
 8005918:	6120      	str	r0, [r4, #16]
 800591a:	b15b      	cbz	r3, 8005934 <__smakebuf_r+0x74>
 800591c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005920:	4630      	mov	r0, r6
 8005922:	f001 fbb9 	bl	8007098 <_isatty_r>
 8005926:	b128      	cbz	r0, 8005934 <__smakebuf_r+0x74>
 8005928:	89a3      	ldrh	r3, [r4, #12]
 800592a:	f023 0303 	bic.w	r3, r3, #3
 800592e:	f043 0301 	orr.w	r3, r3, #1
 8005932:	81a3      	strh	r3, [r4, #12]
 8005934:	89a0      	ldrh	r0, [r4, #12]
 8005936:	4305      	orrs	r5, r0
 8005938:	81a5      	strh	r5, [r4, #12]
 800593a:	e7cd      	b.n	80058d8 <__smakebuf_r+0x18>
 800593c:	08005695 	.word	0x08005695

08005940 <malloc>:
 8005940:	4b02      	ldr	r3, [pc, #8]	; (800594c <malloc+0xc>)
 8005942:	4601      	mov	r1, r0
 8005944:	6818      	ldr	r0, [r3, #0]
 8005946:	f000 b86f 	b.w	8005a28 <_malloc_r>
 800594a:	bf00      	nop
 800594c:	2000000c 	.word	0x2000000c

08005950 <_free_r>:
 8005950:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005952:	2900      	cmp	r1, #0
 8005954:	d044      	beq.n	80059e0 <_free_r+0x90>
 8005956:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800595a:	9001      	str	r0, [sp, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	f1a1 0404 	sub.w	r4, r1, #4
 8005962:	bfb8      	it	lt
 8005964:	18e4      	addlt	r4, r4, r3
 8005966:	f001 fbe1 	bl	800712c <__malloc_lock>
 800596a:	4a1e      	ldr	r2, [pc, #120]	; (80059e4 <_free_r+0x94>)
 800596c:	9801      	ldr	r0, [sp, #4]
 800596e:	6813      	ldr	r3, [r2, #0]
 8005970:	b933      	cbnz	r3, 8005980 <_free_r+0x30>
 8005972:	6063      	str	r3, [r4, #4]
 8005974:	6014      	str	r4, [r2, #0]
 8005976:	b003      	add	sp, #12
 8005978:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800597c:	f001 bbdc 	b.w	8007138 <__malloc_unlock>
 8005980:	42a3      	cmp	r3, r4
 8005982:	d908      	bls.n	8005996 <_free_r+0x46>
 8005984:	6825      	ldr	r5, [r4, #0]
 8005986:	1961      	adds	r1, r4, r5
 8005988:	428b      	cmp	r3, r1
 800598a:	bf01      	itttt	eq
 800598c:	6819      	ldreq	r1, [r3, #0]
 800598e:	685b      	ldreq	r3, [r3, #4]
 8005990:	1949      	addeq	r1, r1, r5
 8005992:	6021      	streq	r1, [r4, #0]
 8005994:	e7ed      	b.n	8005972 <_free_r+0x22>
 8005996:	461a      	mov	r2, r3
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	b10b      	cbz	r3, 80059a0 <_free_r+0x50>
 800599c:	42a3      	cmp	r3, r4
 800599e:	d9fa      	bls.n	8005996 <_free_r+0x46>
 80059a0:	6811      	ldr	r1, [r2, #0]
 80059a2:	1855      	adds	r5, r2, r1
 80059a4:	42a5      	cmp	r5, r4
 80059a6:	d10b      	bne.n	80059c0 <_free_r+0x70>
 80059a8:	6824      	ldr	r4, [r4, #0]
 80059aa:	4421      	add	r1, r4
 80059ac:	1854      	adds	r4, r2, r1
 80059ae:	42a3      	cmp	r3, r4
 80059b0:	6011      	str	r1, [r2, #0]
 80059b2:	d1e0      	bne.n	8005976 <_free_r+0x26>
 80059b4:	681c      	ldr	r4, [r3, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	6053      	str	r3, [r2, #4]
 80059ba:	4421      	add	r1, r4
 80059bc:	6011      	str	r1, [r2, #0]
 80059be:	e7da      	b.n	8005976 <_free_r+0x26>
 80059c0:	d902      	bls.n	80059c8 <_free_r+0x78>
 80059c2:	230c      	movs	r3, #12
 80059c4:	6003      	str	r3, [r0, #0]
 80059c6:	e7d6      	b.n	8005976 <_free_r+0x26>
 80059c8:	6825      	ldr	r5, [r4, #0]
 80059ca:	1961      	adds	r1, r4, r5
 80059cc:	428b      	cmp	r3, r1
 80059ce:	bf04      	itt	eq
 80059d0:	6819      	ldreq	r1, [r3, #0]
 80059d2:	685b      	ldreq	r3, [r3, #4]
 80059d4:	6063      	str	r3, [r4, #4]
 80059d6:	bf04      	itt	eq
 80059d8:	1949      	addeq	r1, r1, r5
 80059da:	6021      	streq	r1, [r4, #0]
 80059dc:	6054      	str	r4, [r2, #4]
 80059de:	e7ca      	b.n	8005976 <_free_r+0x26>
 80059e0:	b003      	add	sp, #12
 80059e2:	bd30      	pop	{r4, r5, pc}
 80059e4:	200008b8 	.word	0x200008b8

080059e8 <sbrk_aligned>:
 80059e8:	b570      	push	{r4, r5, r6, lr}
 80059ea:	4e0e      	ldr	r6, [pc, #56]	; (8005a24 <sbrk_aligned+0x3c>)
 80059ec:	460c      	mov	r4, r1
 80059ee:	6831      	ldr	r1, [r6, #0]
 80059f0:	4605      	mov	r5, r0
 80059f2:	b911      	cbnz	r1, 80059fa <sbrk_aligned+0x12>
 80059f4:	f001 f88a 	bl	8006b0c <_sbrk_r>
 80059f8:	6030      	str	r0, [r6, #0]
 80059fa:	4621      	mov	r1, r4
 80059fc:	4628      	mov	r0, r5
 80059fe:	f001 f885 	bl	8006b0c <_sbrk_r>
 8005a02:	1c43      	adds	r3, r0, #1
 8005a04:	d00a      	beq.n	8005a1c <sbrk_aligned+0x34>
 8005a06:	1cc4      	adds	r4, r0, #3
 8005a08:	f024 0403 	bic.w	r4, r4, #3
 8005a0c:	42a0      	cmp	r0, r4
 8005a0e:	d007      	beq.n	8005a20 <sbrk_aligned+0x38>
 8005a10:	1a21      	subs	r1, r4, r0
 8005a12:	4628      	mov	r0, r5
 8005a14:	f001 f87a 	bl	8006b0c <_sbrk_r>
 8005a18:	3001      	adds	r0, #1
 8005a1a:	d101      	bne.n	8005a20 <sbrk_aligned+0x38>
 8005a1c:	f04f 34ff 	mov.w	r4, #4294967295
 8005a20:	4620      	mov	r0, r4
 8005a22:	bd70      	pop	{r4, r5, r6, pc}
 8005a24:	200008bc 	.word	0x200008bc

08005a28 <_malloc_r>:
 8005a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a2c:	1ccd      	adds	r5, r1, #3
 8005a2e:	f025 0503 	bic.w	r5, r5, #3
 8005a32:	3508      	adds	r5, #8
 8005a34:	2d0c      	cmp	r5, #12
 8005a36:	bf38      	it	cc
 8005a38:	250c      	movcc	r5, #12
 8005a3a:	2d00      	cmp	r5, #0
 8005a3c:	4607      	mov	r7, r0
 8005a3e:	db01      	blt.n	8005a44 <_malloc_r+0x1c>
 8005a40:	42a9      	cmp	r1, r5
 8005a42:	d905      	bls.n	8005a50 <_malloc_r+0x28>
 8005a44:	230c      	movs	r3, #12
 8005a46:	603b      	str	r3, [r7, #0]
 8005a48:	2600      	movs	r6, #0
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a50:	4e2e      	ldr	r6, [pc, #184]	; (8005b0c <_malloc_r+0xe4>)
 8005a52:	f001 fb6b 	bl	800712c <__malloc_lock>
 8005a56:	6833      	ldr	r3, [r6, #0]
 8005a58:	461c      	mov	r4, r3
 8005a5a:	bb34      	cbnz	r4, 8005aaa <_malloc_r+0x82>
 8005a5c:	4629      	mov	r1, r5
 8005a5e:	4638      	mov	r0, r7
 8005a60:	f7ff ffc2 	bl	80059e8 <sbrk_aligned>
 8005a64:	1c43      	adds	r3, r0, #1
 8005a66:	4604      	mov	r4, r0
 8005a68:	d14d      	bne.n	8005b06 <_malloc_r+0xde>
 8005a6a:	6834      	ldr	r4, [r6, #0]
 8005a6c:	4626      	mov	r6, r4
 8005a6e:	2e00      	cmp	r6, #0
 8005a70:	d140      	bne.n	8005af4 <_malloc_r+0xcc>
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	4631      	mov	r1, r6
 8005a76:	4638      	mov	r0, r7
 8005a78:	eb04 0803 	add.w	r8, r4, r3
 8005a7c:	f001 f846 	bl	8006b0c <_sbrk_r>
 8005a80:	4580      	cmp	r8, r0
 8005a82:	d13a      	bne.n	8005afa <_malloc_r+0xd2>
 8005a84:	6821      	ldr	r1, [r4, #0]
 8005a86:	3503      	adds	r5, #3
 8005a88:	1a6d      	subs	r5, r5, r1
 8005a8a:	f025 0503 	bic.w	r5, r5, #3
 8005a8e:	3508      	adds	r5, #8
 8005a90:	2d0c      	cmp	r5, #12
 8005a92:	bf38      	it	cc
 8005a94:	250c      	movcc	r5, #12
 8005a96:	4629      	mov	r1, r5
 8005a98:	4638      	mov	r0, r7
 8005a9a:	f7ff ffa5 	bl	80059e8 <sbrk_aligned>
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	d02b      	beq.n	8005afa <_malloc_r+0xd2>
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	442b      	add	r3, r5
 8005aa6:	6023      	str	r3, [r4, #0]
 8005aa8:	e00e      	b.n	8005ac8 <_malloc_r+0xa0>
 8005aaa:	6822      	ldr	r2, [r4, #0]
 8005aac:	1b52      	subs	r2, r2, r5
 8005aae:	d41e      	bmi.n	8005aee <_malloc_r+0xc6>
 8005ab0:	2a0b      	cmp	r2, #11
 8005ab2:	d916      	bls.n	8005ae2 <_malloc_r+0xba>
 8005ab4:	1961      	adds	r1, r4, r5
 8005ab6:	42a3      	cmp	r3, r4
 8005ab8:	6025      	str	r5, [r4, #0]
 8005aba:	bf18      	it	ne
 8005abc:	6059      	strne	r1, [r3, #4]
 8005abe:	6863      	ldr	r3, [r4, #4]
 8005ac0:	bf08      	it	eq
 8005ac2:	6031      	streq	r1, [r6, #0]
 8005ac4:	5162      	str	r2, [r4, r5]
 8005ac6:	604b      	str	r3, [r1, #4]
 8005ac8:	4638      	mov	r0, r7
 8005aca:	f104 060b 	add.w	r6, r4, #11
 8005ace:	f001 fb33 	bl	8007138 <__malloc_unlock>
 8005ad2:	f026 0607 	bic.w	r6, r6, #7
 8005ad6:	1d23      	adds	r3, r4, #4
 8005ad8:	1af2      	subs	r2, r6, r3
 8005ada:	d0b6      	beq.n	8005a4a <_malloc_r+0x22>
 8005adc:	1b9b      	subs	r3, r3, r6
 8005ade:	50a3      	str	r3, [r4, r2]
 8005ae0:	e7b3      	b.n	8005a4a <_malloc_r+0x22>
 8005ae2:	6862      	ldr	r2, [r4, #4]
 8005ae4:	42a3      	cmp	r3, r4
 8005ae6:	bf0c      	ite	eq
 8005ae8:	6032      	streq	r2, [r6, #0]
 8005aea:	605a      	strne	r2, [r3, #4]
 8005aec:	e7ec      	b.n	8005ac8 <_malloc_r+0xa0>
 8005aee:	4623      	mov	r3, r4
 8005af0:	6864      	ldr	r4, [r4, #4]
 8005af2:	e7b2      	b.n	8005a5a <_malloc_r+0x32>
 8005af4:	4634      	mov	r4, r6
 8005af6:	6876      	ldr	r6, [r6, #4]
 8005af8:	e7b9      	b.n	8005a6e <_malloc_r+0x46>
 8005afa:	230c      	movs	r3, #12
 8005afc:	603b      	str	r3, [r7, #0]
 8005afe:	4638      	mov	r0, r7
 8005b00:	f001 fb1a 	bl	8007138 <__malloc_unlock>
 8005b04:	e7a1      	b.n	8005a4a <_malloc_r+0x22>
 8005b06:	6025      	str	r5, [r4, #0]
 8005b08:	e7de      	b.n	8005ac8 <_malloc_r+0xa0>
 8005b0a:	bf00      	nop
 8005b0c:	200008b8 	.word	0x200008b8

08005b10 <__ssputs_r>:
 8005b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b14:	688e      	ldr	r6, [r1, #8]
 8005b16:	429e      	cmp	r6, r3
 8005b18:	4682      	mov	sl, r0
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	4690      	mov	r8, r2
 8005b1e:	461f      	mov	r7, r3
 8005b20:	d838      	bhi.n	8005b94 <__ssputs_r+0x84>
 8005b22:	898a      	ldrh	r2, [r1, #12]
 8005b24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b28:	d032      	beq.n	8005b90 <__ssputs_r+0x80>
 8005b2a:	6825      	ldr	r5, [r4, #0]
 8005b2c:	6909      	ldr	r1, [r1, #16]
 8005b2e:	eba5 0901 	sub.w	r9, r5, r1
 8005b32:	6965      	ldr	r5, [r4, #20]
 8005b34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	444b      	add	r3, r9
 8005b40:	106d      	asrs	r5, r5, #1
 8005b42:	429d      	cmp	r5, r3
 8005b44:	bf38      	it	cc
 8005b46:	461d      	movcc	r5, r3
 8005b48:	0553      	lsls	r3, r2, #21
 8005b4a:	d531      	bpl.n	8005bb0 <__ssputs_r+0xa0>
 8005b4c:	4629      	mov	r1, r5
 8005b4e:	f7ff ff6b 	bl	8005a28 <_malloc_r>
 8005b52:	4606      	mov	r6, r0
 8005b54:	b950      	cbnz	r0, 8005b6c <__ssputs_r+0x5c>
 8005b56:	230c      	movs	r3, #12
 8005b58:	f8ca 3000 	str.w	r3, [sl]
 8005b5c:	89a3      	ldrh	r3, [r4, #12]
 8005b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b62:	81a3      	strh	r3, [r4, #12]
 8005b64:	f04f 30ff 	mov.w	r0, #4294967295
 8005b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b6c:	6921      	ldr	r1, [r4, #16]
 8005b6e:	464a      	mov	r2, r9
 8005b70:	f001 fab4 	bl	80070dc <memcpy>
 8005b74:	89a3      	ldrh	r3, [r4, #12]
 8005b76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b7e:	81a3      	strh	r3, [r4, #12]
 8005b80:	6126      	str	r6, [r4, #16]
 8005b82:	6165      	str	r5, [r4, #20]
 8005b84:	444e      	add	r6, r9
 8005b86:	eba5 0509 	sub.w	r5, r5, r9
 8005b8a:	6026      	str	r6, [r4, #0]
 8005b8c:	60a5      	str	r5, [r4, #8]
 8005b8e:	463e      	mov	r6, r7
 8005b90:	42be      	cmp	r6, r7
 8005b92:	d900      	bls.n	8005b96 <__ssputs_r+0x86>
 8005b94:	463e      	mov	r6, r7
 8005b96:	6820      	ldr	r0, [r4, #0]
 8005b98:	4632      	mov	r2, r6
 8005b9a:	4641      	mov	r1, r8
 8005b9c:	f001 faac 	bl	80070f8 <memmove>
 8005ba0:	68a3      	ldr	r3, [r4, #8]
 8005ba2:	1b9b      	subs	r3, r3, r6
 8005ba4:	60a3      	str	r3, [r4, #8]
 8005ba6:	6823      	ldr	r3, [r4, #0]
 8005ba8:	4433      	add	r3, r6
 8005baa:	6023      	str	r3, [r4, #0]
 8005bac:	2000      	movs	r0, #0
 8005bae:	e7db      	b.n	8005b68 <__ssputs_r+0x58>
 8005bb0:	462a      	mov	r2, r5
 8005bb2:	f001 fac7 	bl	8007144 <_realloc_r>
 8005bb6:	4606      	mov	r6, r0
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	d1e1      	bne.n	8005b80 <__ssputs_r+0x70>
 8005bbc:	6921      	ldr	r1, [r4, #16]
 8005bbe:	4650      	mov	r0, sl
 8005bc0:	f7ff fec6 	bl	8005950 <_free_r>
 8005bc4:	e7c7      	b.n	8005b56 <__ssputs_r+0x46>
	...

08005bc8 <_svfiprintf_r>:
 8005bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bcc:	4698      	mov	r8, r3
 8005bce:	898b      	ldrh	r3, [r1, #12]
 8005bd0:	061b      	lsls	r3, r3, #24
 8005bd2:	b09d      	sub	sp, #116	; 0x74
 8005bd4:	4607      	mov	r7, r0
 8005bd6:	460d      	mov	r5, r1
 8005bd8:	4614      	mov	r4, r2
 8005bda:	d50e      	bpl.n	8005bfa <_svfiprintf_r+0x32>
 8005bdc:	690b      	ldr	r3, [r1, #16]
 8005bde:	b963      	cbnz	r3, 8005bfa <_svfiprintf_r+0x32>
 8005be0:	2140      	movs	r1, #64	; 0x40
 8005be2:	f7ff ff21 	bl	8005a28 <_malloc_r>
 8005be6:	6028      	str	r0, [r5, #0]
 8005be8:	6128      	str	r0, [r5, #16]
 8005bea:	b920      	cbnz	r0, 8005bf6 <_svfiprintf_r+0x2e>
 8005bec:	230c      	movs	r3, #12
 8005bee:	603b      	str	r3, [r7, #0]
 8005bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf4:	e0d1      	b.n	8005d9a <_svfiprintf_r+0x1d2>
 8005bf6:	2340      	movs	r3, #64	; 0x40
 8005bf8:	616b      	str	r3, [r5, #20]
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8005bfe:	2320      	movs	r3, #32
 8005c00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c04:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c08:	2330      	movs	r3, #48	; 0x30
 8005c0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005db4 <_svfiprintf_r+0x1ec>
 8005c0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c12:	f04f 0901 	mov.w	r9, #1
 8005c16:	4623      	mov	r3, r4
 8005c18:	469a      	mov	sl, r3
 8005c1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c1e:	b10a      	cbz	r2, 8005c24 <_svfiprintf_r+0x5c>
 8005c20:	2a25      	cmp	r2, #37	; 0x25
 8005c22:	d1f9      	bne.n	8005c18 <_svfiprintf_r+0x50>
 8005c24:	ebba 0b04 	subs.w	fp, sl, r4
 8005c28:	d00b      	beq.n	8005c42 <_svfiprintf_r+0x7a>
 8005c2a:	465b      	mov	r3, fp
 8005c2c:	4622      	mov	r2, r4
 8005c2e:	4629      	mov	r1, r5
 8005c30:	4638      	mov	r0, r7
 8005c32:	f7ff ff6d 	bl	8005b10 <__ssputs_r>
 8005c36:	3001      	adds	r0, #1
 8005c38:	f000 80aa 	beq.w	8005d90 <_svfiprintf_r+0x1c8>
 8005c3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c3e:	445a      	add	r2, fp
 8005c40:	9209      	str	r2, [sp, #36]	; 0x24
 8005c42:	f89a 3000 	ldrb.w	r3, [sl]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 80a2 	beq.w	8005d90 <_svfiprintf_r+0x1c8>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c56:	f10a 0a01 	add.w	sl, sl, #1
 8005c5a:	9304      	str	r3, [sp, #16]
 8005c5c:	9307      	str	r3, [sp, #28]
 8005c5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c62:	931a      	str	r3, [sp, #104]	; 0x68
 8005c64:	4654      	mov	r4, sl
 8005c66:	2205      	movs	r2, #5
 8005c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c6c:	4851      	ldr	r0, [pc, #324]	; (8005db4 <_svfiprintf_r+0x1ec>)
 8005c6e:	f7fa fabf 	bl	80001f0 <memchr>
 8005c72:	9a04      	ldr	r2, [sp, #16]
 8005c74:	b9d8      	cbnz	r0, 8005cae <_svfiprintf_r+0xe6>
 8005c76:	06d0      	lsls	r0, r2, #27
 8005c78:	bf44      	itt	mi
 8005c7a:	2320      	movmi	r3, #32
 8005c7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c80:	0711      	lsls	r1, r2, #28
 8005c82:	bf44      	itt	mi
 8005c84:	232b      	movmi	r3, #43	; 0x2b
 8005c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8005c8e:	2b2a      	cmp	r3, #42	; 0x2a
 8005c90:	d015      	beq.n	8005cbe <_svfiprintf_r+0xf6>
 8005c92:	9a07      	ldr	r2, [sp, #28]
 8005c94:	4654      	mov	r4, sl
 8005c96:	2000      	movs	r0, #0
 8005c98:	f04f 0c0a 	mov.w	ip, #10
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ca2:	3b30      	subs	r3, #48	; 0x30
 8005ca4:	2b09      	cmp	r3, #9
 8005ca6:	d94e      	bls.n	8005d46 <_svfiprintf_r+0x17e>
 8005ca8:	b1b0      	cbz	r0, 8005cd8 <_svfiprintf_r+0x110>
 8005caa:	9207      	str	r2, [sp, #28]
 8005cac:	e014      	b.n	8005cd8 <_svfiprintf_r+0x110>
 8005cae:	eba0 0308 	sub.w	r3, r0, r8
 8005cb2:	fa09 f303 	lsl.w	r3, r9, r3
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	9304      	str	r3, [sp, #16]
 8005cba:	46a2      	mov	sl, r4
 8005cbc:	e7d2      	b.n	8005c64 <_svfiprintf_r+0x9c>
 8005cbe:	9b03      	ldr	r3, [sp, #12]
 8005cc0:	1d19      	adds	r1, r3, #4
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	9103      	str	r1, [sp, #12]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	bfbb      	ittet	lt
 8005cca:	425b      	neglt	r3, r3
 8005ccc:	f042 0202 	orrlt.w	r2, r2, #2
 8005cd0:	9307      	strge	r3, [sp, #28]
 8005cd2:	9307      	strlt	r3, [sp, #28]
 8005cd4:	bfb8      	it	lt
 8005cd6:	9204      	strlt	r2, [sp, #16]
 8005cd8:	7823      	ldrb	r3, [r4, #0]
 8005cda:	2b2e      	cmp	r3, #46	; 0x2e
 8005cdc:	d10c      	bne.n	8005cf8 <_svfiprintf_r+0x130>
 8005cde:	7863      	ldrb	r3, [r4, #1]
 8005ce0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ce2:	d135      	bne.n	8005d50 <_svfiprintf_r+0x188>
 8005ce4:	9b03      	ldr	r3, [sp, #12]
 8005ce6:	1d1a      	adds	r2, r3, #4
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	9203      	str	r2, [sp, #12]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	bfb8      	it	lt
 8005cf0:	f04f 33ff 	movlt.w	r3, #4294967295
 8005cf4:	3402      	adds	r4, #2
 8005cf6:	9305      	str	r3, [sp, #20]
 8005cf8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005dc4 <_svfiprintf_r+0x1fc>
 8005cfc:	7821      	ldrb	r1, [r4, #0]
 8005cfe:	2203      	movs	r2, #3
 8005d00:	4650      	mov	r0, sl
 8005d02:	f7fa fa75 	bl	80001f0 <memchr>
 8005d06:	b140      	cbz	r0, 8005d1a <_svfiprintf_r+0x152>
 8005d08:	2340      	movs	r3, #64	; 0x40
 8005d0a:	eba0 000a 	sub.w	r0, r0, sl
 8005d0e:	fa03 f000 	lsl.w	r0, r3, r0
 8005d12:	9b04      	ldr	r3, [sp, #16]
 8005d14:	4303      	orrs	r3, r0
 8005d16:	3401      	adds	r4, #1
 8005d18:	9304      	str	r3, [sp, #16]
 8005d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d1e:	4826      	ldr	r0, [pc, #152]	; (8005db8 <_svfiprintf_r+0x1f0>)
 8005d20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d24:	2206      	movs	r2, #6
 8005d26:	f7fa fa63 	bl	80001f0 <memchr>
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	d038      	beq.n	8005da0 <_svfiprintf_r+0x1d8>
 8005d2e:	4b23      	ldr	r3, [pc, #140]	; (8005dbc <_svfiprintf_r+0x1f4>)
 8005d30:	bb1b      	cbnz	r3, 8005d7a <_svfiprintf_r+0x1b2>
 8005d32:	9b03      	ldr	r3, [sp, #12]
 8005d34:	3307      	adds	r3, #7
 8005d36:	f023 0307 	bic.w	r3, r3, #7
 8005d3a:	3308      	adds	r3, #8
 8005d3c:	9303      	str	r3, [sp, #12]
 8005d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d40:	4433      	add	r3, r6
 8005d42:	9309      	str	r3, [sp, #36]	; 0x24
 8005d44:	e767      	b.n	8005c16 <_svfiprintf_r+0x4e>
 8005d46:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	2001      	movs	r0, #1
 8005d4e:	e7a5      	b.n	8005c9c <_svfiprintf_r+0xd4>
 8005d50:	2300      	movs	r3, #0
 8005d52:	3401      	adds	r4, #1
 8005d54:	9305      	str	r3, [sp, #20]
 8005d56:	4619      	mov	r1, r3
 8005d58:	f04f 0c0a 	mov.w	ip, #10
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d62:	3a30      	subs	r2, #48	; 0x30
 8005d64:	2a09      	cmp	r2, #9
 8005d66:	d903      	bls.n	8005d70 <_svfiprintf_r+0x1a8>
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0c5      	beq.n	8005cf8 <_svfiprintf_r+0x130>
 8005d6c:	9105      	str	r1, [sp, #20]
 8005d6e:	e7c3      	b.n	8005cf8 <_svfiprintf_r+0x130>
 8005d70:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d74:	4604      	mov	r4, r0
 8005d76:	2301      	movs	r3, #1
 8005d78:	e7f0      	b.n	8005d5c <_svfiprintf_r+0x194>
 8005d7a:	ab03      	add	r3, sp, #12
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	462a      	mov	r2, r5
 8005d80:	4b0f      	ldr	r3, [pc, #60]	; (8005dc0 <_svfiprintf_r+0x1f8>)
 8005d82:	a904      	add	r1, sp, #16
 8005d84:	4638      	mov	r0, r7
 8005d86:	f3af 8000 	nop.w
 8005d8a:	1c42      	adds	r2, r0, #1
 8005d8c:	4606      	mov	r6, r0
 8005d8e:	d1d6      	bne.n	8005d3e <_svfiprintf_r+0x176>
 8005d90:	89ab      	ldrh	r3, [r5, #12]
 8005d92:	065b      	lsls	r3, r3, #25
 8005d94:	f53f af2c 	bmi.w	8005bf0 <_svfiprintf_r+0x28>
 8005d98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d9a:	b01d      	add	sp, #116	; 0x74
 8005d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da0:	ab03      	add	r3, sp, #12
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	462a      	mov	r2, r5
 8005da6:	4b06      	ldr	r3, [pc, #24]	; (8005dc0 <_svfiprintf_r+0x1f8>)
 8005da8:	a904      	add	r1, sp, #16
 8005daa:	4638      	mov	r0, r7
 8005dac:	f000 f9d4 	bl	8006158 <_printf_i>
 8005db0:	e7eb      	b.n	8005d8a <_svfiprintf_r+0x1c2>
 8005db2:	bf00      	nop
 8005db4:	080083e4 	.word	0x080083e4
 8005db8:	080083ee 	.word	0x080083ee
 8005dbc:	00000000 	.word	0x00000000
 8005dc0:	08005b11 	.word	0x08005b11
 8005dc4:	080083ea 	.word	0x080083ea

08005dc8 <__sfputc_r>:
 8005dc8:	6893      	ldr	r3, [r2, #8]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	b410      	push	{r4}
 8005dd0:	6093      	str	r3, [r2, #8]
 8005dd2:	da08      	bge.n	8005de6 <__sfputc_r+0x1e>
 8005dd4:	6994      	ldr	r4, [r2, #24]
 8005dd6:	42a3      	cmp	r3, r4
 8005dd8:	db01      	blt.n	8005dde <__sfputc_r+0x16>
 8005dda:	290a      	cmp	r1, #10
 8005ddc:	d103      	bne.n	8005de6 <__sfputc_r+0x1e>
 8005dde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005de2:	f001 b865 	b.w	8006eb0 <__swbuf_r>
 8005de6:	6813      	ldr	r3, [r2, #0]
 8005de8:	1c58      	adds	r0, r3, #1
 8005dea:	6010      	str	r0, [r2, #0]
 8005dec:	7019      	strb	r1, [r3, #0]
 8005dee:	4608      	mov	r0, r1
 8005df0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <__sfputs_r>:
 8005df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df8:	4606      	mov	r6, r0
 8005dfa:	460f      	mov	r7, r1
 8005dfc:	4614      	mov	r4, r2
 8005dfe:	18d5      	adds	r5, r2, r3
 8005e00:	42ac      	cmp	r4, r5
 8005e02:	d101      	bne.n	8005e08 <__sfputs_r+0x12>
 8005e04:	2000      	movs	r0, #0
 8005e06:	e007      	b.n	8005e18 <__sfputs_r+0x22>
 8005e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e0c:	463a      	mov	r2, r7
 8005e0e:	4630      	mov	r0, r6
 8005e10:	f7ff ffda 	bl	8005dc8 <__sfputc_r>
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	d1f3      	bne.n	8005e00 <__sfputs_r+0xa>
 8005e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e1c <_vfiprintf_r>:
 8005e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e20:	460d      	mov	r5, r1
 8005e22:	b09d      	sub	sp, #116	; 0x74
 8005e24:	4614      	mov	r4, r2
 8005e26:	4698      	mov	r8, r3
 8005e28:	4606      	mov	r6, r0
 8005e2a:	b118      	cbz	r0, 8005e34 <_vfiprintf_r+0x18>
 8005e2c:	6983      	ldr	r3, [r0, #24]
 8005e2e:	b90b      	cbnz	r3, 8005e34 <_vfiprintf_r+0x18>
 8005e30:	f7ff fc64 	bl	80056fc <__sinit>
 8005e34:	4b89      	ldr	r3, [pc, #548]	; (800605c <_vfiprintf_r+0x240>)
 8005e36:	429d      	cmp	r5, r3
 8005e38:	d11b      	bne.n	8005e72 <_vfiprintf_r+0x56>
 8005e3a:	6875      	ldr	r5, [r6, #4]
 8005e3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e3e:	07d9      	lsls	r1, r3, #31
 8005e40:	d405      	bmi.n	8005e4e <_vfiprintf_r+0x32>
 8005e42:	89ab      	ldrh	r3, [r5, #12]
 8005e44:	059a      	lsls	r2, r3, #22
 8005e46:	d402      	bmi.n	8005e4e <_vfiprintf_r+0x32>
 8005e48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e4a:	f7ff fd12 	bl	8005872 <__retarget_lock_acquire_recursive>
 8005e4e:	89ab      	ldrh	r3, [r5, #12]
 8005e50:	071b      	lsls	r3, r3, #28
 8005e52:	d501      	bpl.n	8005e58 <_vfiprintf_r+0x3c>
 8005e54:	692b      	ldr	r3, [r5, #16]
 8005e56:	b9eb      	cbnz	r3, 8005e94 <_vfiprintf_r+0x78>
 8005e58:	4629      	mov	r1, r5
 8005e5a:	4630      	mov	r0, r6
 8005e5c:	f001 f88c 	bl	8006f78 <__swsetup_r>
 8005e60:	b1c0      	cbz	r0, 8005e94 <_vfiprintf_r+0x78>
 8005e62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e64:	07dc      	lsls	r4, r3, #31
 8005e66:	d50e      	bpl.n	8005e86 <_vfiprintf_r+0x6a>
 8005e68:	f04f 30ff 	mov.w	r0, #4294967295
 8005e6c:	b01d      	add	sp, #116	; 0x74
 8005e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e72:	4b7b      	ldr	r3, [pc, #492]	; (8006060 <_vfiprintf_r+0x244>)
 8005e74:	429d      	cmp	r5, r3
 8005e76:	d101      	bne.n	8005e7c <_vfiprintf_r+0x60>
 8005e78:	68b5      	ldr	r5, [r6, #8]
 8005e7a:	e7df      	b.n	8005e3c <_vfiprintf_r+0x20>
 8005e7c:	4b79      	ldr	r3, [pc, #484]	; (8006064 <_vfiprintf_r+0x248>)
 8005e7e:	429d      	cmp	r5, r3
 8005e80:	bf08      	it	eq
 8005e82:	68f5      	ldreq	r5, [r6, #12]
 8005e84:	e7da      	b.n	8005e3c <_vfiprintf_r+0x20>
 8005e86:	89ab      	ldrh	r3, [r5, #12]
 8005e88:	0598      	lsls	r0, r3, #22
 8005e8a:	d4ed      	bmi.n	8005e68 <_vfiprintf_r+0x4c>
 8005e8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e8e:	f7ff fcf1 	bl	8005874 <__retarget_lock_release_recursive>
 8005e92:	e7e9      	b.n	8005e68 <_vfiprintf_r+0x4c>
 8005e94:	2300      	movs	r3, #0
 8005e96:	9309      	str	r3, [sp, #36]	; 0x24
 8005e98:	2320      	movs	r3, #32
 8005e9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ea2:	2330      	movs	r3, #48	; 0x30
 8005ea4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006068 <_vfiprintf_r+0x24c>
 8005ea8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005eac:	f04f 0901 	mov.w	r9, #1
 8005eb0:	4623      	mov	r3, r4
 8005eb2:	469a      	mov	sl, r3
 8005eb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005eb8:	b10a      	cbz	r2, 8005ebe <_vfiprintf_r+0xa2>
 8005eba:	2a25      	cmp	r2, #37	; 0x25
 8005ebc:	d1f9      	bne.n	8005eb2 <_vfiprintf_r+0x96>
 8005ebe:	ebba 0b04 	subs.w	fp, sl, r4
 8005ec2:	d00b      	beq.n	8005edc <_vfiprintf_r+0xc0>
 8005ec4:	465b      	mov	r3, fp
 8005ec6:	4622      	mov	r2, r4
 8005ec8:	4629      	mov	r1, r5
 8005eca:	4630      	mov	r0, r6
 8005ecc:	f7ff ff93 	bl	8005df6 <__sfputs_r>
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	f000 80aa 	beq.w	800602a <_vfiprintf_r+0x20e>
 8005ed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ed8:	445a      	add	r2, fp
 8005eda:	9209      	str	r2, [sp, #36]	; 0x24
 8005edc:	f89a 3000 	ldrb.w	r3, [sl]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 80a2 	beq.w	800602a <_vfiprintf_r+0x20e>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8005eec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ef0:	f10a 0a01 	add.w	sl, sl, #1
 8005ef4:	9304      	str	r3, [sp, #16]
 8005ef6:	9307      	str	r3, [sp, #28]
 8005ef8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005efc:	931a      	str	r3, [sp, #104]	; 0x68
 8005efe:	4654      	mov	r4, sl
 8005f00:	2205      	movs	r2, #5
 8005f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f06:	4858      	ldr	r0, [pc, #352]	; (8006068 <_vfiprintf_r+0x24c>)
 8005f08:	f7fa f972 	bl	80001f0 <memchr>
 8005f0c:	9a04      	ldr	r2, [sp, #16]
 8005f0e:	b9d8      	cbnz	r0, 8005f48 <_vfiprintf_r+0x12c>
 8005f10:	06d1      	lsls	r1, r2, #27
 8005f12:	bf44      	itt	mi
 8005f14:	2320      	movmi	r3, #32
 8005f16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f1a:	0713      	lsls	r3, r2, #28
 8005f1c:	bf44      	itt	mi
 8005f1e:	232b      	movmi	r3, #43	; 0x2b
 8005f20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f24:	f89a 3000 	ldrb.w	r3, [sl]
 8005f28:	2b2a      	cmp	r3, #42	; 0x2a
 8005f2a:	d015      	beq.n	8005f58 <_vfiprintf_r+0x13c>
 8005f2c:	9a07      	ldr	r2, [sp, #28]
 8005f2e:	4654      	mov	r4, sl
 8005f30:	2000      	movs	r0, #0
 8005f32:	f04f 0c0a 	mov.w	ip, #10
 8005f36:	4621      	mov	r1, r4
 8005f38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f3c:	3b30      	subs	r3, #48	; 0x30
 8005f3e:	2b09      	cmp	r3, #9
 8005f40:	d94e      	bls.n	8005fe0 <_vfiprintf_r+0x1c4>
 8005f42:	b1b0      	cbz	r0, 8005f72 <_vfiprintf_r+0x156>
 8005f44:	9207      	str	r2, [sp, #28]
 8005f46:	e014      	b.n	8005f72 <_vfiprintf_r+0x156>
 8005f48:	eba0 0308 	sub.w	r3, r0, r8
 8005f4c:	fa09 f303 	lsl.w	r3, r9, r3
 8005f50:	4313      	orrs	r3, r2
 8005f52:	9304      	str	r3, [sp, #16]
 8005f54:	46a2      	mov	sl, r4
 8005f56:	e7d2      	b.n	8005efe <_vfiprintf_r+0xe2>
 8005f58:	9b03      	ldr	r3, [sp, #12]
 8005f5a:	1d19      	adds	r1, r3, #4
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	9103      	str	r1, [sp, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	bfbb      	ittet	lt
 8005f64:	425b      	neglt	r3, r3
 8005f66:	f042 0202 	orrlt.w	r2, r2, #2
 8005f6a:	9307      	strge	r3, [sp, #28]
 8005f6c:	9307      	strlt	r3, [sp, #28]
 8005f6e:	bfb8      	it	lt
 8005f70:	9204      	strlt	r2, [sp, #16]
 8005f72:	7823      	ldrb	r3, [r4, #0]
 8005f74:	2b2e      	cmp	r3, #46	; 0x2e
 8005f76:	d10c      	bne.n	8005f92 <_vfiprintf_r+0x176>
 8005f78:	7863      	ldrb	r3, [r4, #1]
 8005f7a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f7c:	d135      	bne.n	8005fea <_vfiprintf_r+0x1ce>
 8005f7e:	9b03      	ldr	r3, [sp, #12]
 8005f80:	1d1a      	adds	r2, r3, #4
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	9203      	str	r2, [sp, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	bfb8      	it	lt
 8005f8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f8e:	3402      	adds	r4, #2
 8005f90:	9305      	str	r3, [sp, #20]
 8005f92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006078 <_vfiprintf_r+0x25c>
 8005f96:	7821      	ldrb	r1, [r4, #0]
 8005f98:	2203      	movs	r2, #3
 8005f9a:	4650      	mov	r0, sl
 8005f9c:	f7fa f928 	bl	80001f0 <memchr>
 8005fa0:	b140      	cbz	r0, 8005fb4 <_vfiprintf_r+0x198>
 8005fa2:	2340      	movs	r3, #64	; 0x40
 8005fa4:	eba0 000a 	sub.w	r0, r0, sl
 8005fa8:	fa03 f000 	lsl.w	r0, r3, r0
 8005fac:	9b04      	ldr	r3, [sp, #16]
 8005fae:	4303      	orrs	r3, r0
 8005fb0:	3401      	adds	r4, #1
 8005fb2:	9304      	str	r3, [sp, #16]
 8005fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fb8:	482c      	ldr	r0, [pc, #176]	; (800606c <_vfiprintf_r+0x250>)
 8005fba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fbe:	2206      	movs	r2, #6
 8005fc0:	f7fa f916 	bl	80001f0 <memchr>
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	d03f      	beq.n	8006048 <_vfiprintf_r+0x22c>
 8005fc8:	4b29      	ldr	r3, [pc, #164]	; (8006070 <_vfiprintf_r+0x254>)
 8005fca:	bb1b      	cbnz	r3, 8006014 <_vfiprintf_r+0x1f8>
 8005fcc:	9b03      	ldr	r3, [sp, #12]
 8005fce:	3307      	adds	r3, #7
 8005fd0:	f023 0307 	bic.w	r3, r3, #7
 8005fd4:	3308      	adds	r3, #8
 8005fd6:	9303      	str	r3, [sp, #12]
 8005fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fda:	443b      	add	r3, r7
 8005fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8005fde:	e767      	b.n	8005eb0 <_vfiprintf_r+0x94>
 8005fe0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fe4:	460c      	mov	r4, r1
 8005fe6:	2001      	movs	r0, #1
 8005fe8:	e7a5      	b.n	8005f36 <_vfiprintf_r+0x11a>
 8005fea:	2300      	movs	r3, #0
 8005fec:	3401      	adds	r4, #1
 8005fee:	9305      	str	r3, [sp, #20]
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	f04f 0c0a 	mov.w	ip, #10
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ffc:	3a30      	subs	r2, #48	; 0x30
 8005ffe:	2a09      	cmp	r2, #9
 8006000:	d903      	bls.n	800600a <_vfiprintf_r+0x1ee>
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0c5      	beq.n	8005f92 <_vfiprintf_r+0x176>
 8006006:	9105      	str	r1, [sp, #20]
 8006008:	e7c3      	b.n	8005f92 <_vfiprintf_r+0x176>
 800600a:	fb0c 2101 	mla	r1, ip, r1, r2
 800600e:	4604      	mov	r4, r0
 8006010:	2301      	movs	r3, #1
 8006012:	e7f0      	b.n	8005ff6 <_vfiprintf_r+0x1da>
 8006014:	ab03      	add	r3, sp, #12
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	462a      	mov	r2, r5
 800601a:	4b16      	ldr	r3, [pc, #88]	; (8006074 <_vfiprintf_r+0x258>)
 800601c:	a904      	add	r1, sp, #16
 800601e:	4630      	mov	r0, r6
 8006020:	f3af 8000 	nop.w
 8006024:	4607      	mov	r7, r0
 8006026:	1c78      	adds	r0, r7, #1
 8006028:	d1d6      	bne.n	8005fd8 <_vfiprintf_r+0x1bc>
 800602a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800602c:	07d9      	lsls	r1, r3, #31
 800602e:	d405      	bmi.n	800603c <_vfiprintf_r+0x220>
 8006030:	89ab      	ldrh	r3, [r5, #12]
 8006032:	059a      	lsls	r2, r3, #22
 8006034:	d402      	bmi.n	800603c <_vfiprintf_r+0x220>
 8006036:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006038:	f7ff fc1c 	bl	8005874 <__retarget_lock_release_recursive>
 800603c:	89ab      	ldrh	r3, [r5, #12]
 800603e:	065b      	lsls	r3, r3, #25
 8006040:	f53f af12 	bmi.w	8005e68 <_vfiprintf_r+0x4c>
 8006044:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006046:	e711      	b.n	8005e6c <_vfiprintf_r+0x50>
 8006048:	ab03      	add	r3, sp, #12
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	462a      	mov	r2, r5
 800604e:	4b09      	ldr	r3, [pc, #36]	; (8006074 <_vfiprintf_r+0x258>)
 8006050:	a904      	add	r1, sp, #16
 8006052:	4630      	mov	r0, r6
 8006054:	f000 f880 	bl	8006158 <_printf_i>
 8006058:	e7e4      	b.n	8006024 <_vfiprintf_r+0x208>
 800605a:	bf00      	nop
 800605c:	080083a4 	.word	0x080083a4
 8006060:	080083c4 	.word	0x080083c4
 8006064:	08008384 	.word	0x08008384
 8006068:	080083e4 	.word	0x080083e4
 800606c:	080083ee 	.word	0x080083ee
 8006070:	00000000 	.word	0x00000000
 8006074:	08005df7 	.word	0x08005df7
 8006078:	080083ea 	.word	0x080083ea

0800607c <_printf_common>:
 800607c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006080:	4616      	mov	r6, r2
 8006082:	4699      	mov	r9, r3
 8006084:	688a      	ldr	r2, [r1, #8]
 8006086:	690b      	ldr	r3, [r1, #16]
 8006088:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800608c:	4293      	cmp	r3, r2
 800608e:	bfb8      	it	lt
 8006090:	4613      	movlt	r3, r2
 8006092:	6033      	str	r3, [r6, #0]
 8006094:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006098:	4607      	mov	r7, r0
 800609a:	460c      	mov	r4, r1
 800609c:	b10a      	cbz	r2, 80060a2 <_printf_common+0x26>
 800609e:	3301      	adds	r3, #1
 80060a0:	6033      	str	r3, [r6, #0]
 80060a2:	6823      	ldr	r3, [r4, #0]
 80060a4:	0699      	lsls	r1, r3, #26
 80060a6:	bf42      	ittt	mi
 80060a8:	6833      	ldrmi	r3, [r6, #0]
 80060aa:	3302      	addmi	r3, #2
 80060ac:	6033      	strmi	r3, [r6, #0]
 80060ae:	6825      	ldr	r5, [r4, #0]
 80060b0:	f015 0506 	ands.w	r5, r5, #6
 80060b4:	d106      	bne.n	80060c4 <_printf_common+0x48>
 80060b6:	f104 0a19 	add.w	sl, r4, #25
 80060ba:	68e3      	ldr	r3, [r4, #12]
 80060bc:	6832      	ldr	r2, [r6, #0]
 80060be:	1a9b      	subs	r3, r3, r2
 80060c0:	42ab      	cmp	r3, r5
 80060c2:	dc26      	bgt.n	8006112 <_printf_common+0x96>
 80060c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060c8:	1e13      	subs	r3, r2, #0
 80060ca:	6822      	ldr	r2, [r4, #0]
 80060cc:	bf18      	it	ne
 80060ce:	2301      	movne	r3, #1
 80060d0:	0692      	lsls	r2, r2, #26
 80060d2:	d42b      	bmi.n	800612c <_printf_common+0xb0>
 80060d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060d8:	4649      	mov	r1, r9
 80060da:	4638      	mov	r0, r7
 80060dc:	47c0      	blx	r8
 80060de:	3001      	adds	r0, #1
 80060e0:	d01e      	beq.n	8006120 <_printf_common+0xa4>
 80060e2:	6823      	ldr	r3, [r4, #0]
 80060e4:	68e5      	ldr	r5, [r4, #12]
 80060e6:	6832      	ldr	r2, [r6, #0]
 80060e8:	f003 0306 	and.w	r3, r3, #6
 80060ec:	2b04      	cmp	r3, #4
 80060ee:	bf08      	it	eq
 80060f0:	1aad      	subeq	r5, r5, r2
 80060f2:	68a3      	ldr	r3, [r4, #8]
 80060f4:	6922      	ldr	r2, [r4, #16]
 80060f6:	bf0c      	ite	eq
 80060f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060fc:	2500      	movne	r5, #0
 80060fe:	4293      	cmp	r3, r2
 8006100:	bfc4      	itt	gt
 8006102:	1a9b      	subgt	r3, r3, r2
 8006104:	18ed      	addgt	r5, r5, r3
 8006106:	2600      	movs	r6, #0
 8006108:	341a      	adds	r4, #26
 800610a:	42b5      	cmp	r5, r6
 800610c:	d11a      	bne.n	8006144 <_printf_common+0xc8>
 800610e:	2000      	movs	r0, #0
 8006110:	e008      	b.n	8006124 <_printf_common+0xa8>
 8006112:	2301      	movs	r3, #1
 8006114:	4652      	mov	r2, sl
 8006116:	4649      	mov	r1, r9
 8006118:	4638      	mov	r0, r7
 800611a:	47c0      	blx	r8
 800611c:	3001      	adds	r0, #1
 800611e:	d103      	bne.n	8006128 <_printf_common+0xac>
 8006120:	f04f 30ff 	mov.w	r0, #4294967295
 8006124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006128:	3501      	adds	r5, #1
 800612a:	e7c6      	b.n	80060ba <_printf_common+0x3e>
 800612c:	18e1      	adds	r1, r4, r3
 800612e:	1c5a      	adds	r2, r3, #1
 8006130:	2030      	movs	r0, #48	; 0x30
 8006132:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006136:	4422      	add	r2, r4
 8006138:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800613c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006140:	3302      	adds	r3, #2
 8006142:	e7c7      	b.n	80060d4 <_printf_common+0x58>
 8006144:	2301      	movs	r3, #1
 8006146:	4622      	mov	r2, r4
 8006148:	4649      	mov	r1, r9
 800614a:	4638      	mov	r0, r7
 800614c:	47c0      	blx	r8
 800614e:	3001      	adds	r0, #1
 8006150:	d0e6      	beq.n	8006120 <_printf_common+0xa4>
 8006152:	3601      	adds	r6, #1
 8006154:	e7d9      	b.n	800610a <_printf_common+0x8e>
	...

08006158 <_printf_i>:
 8006158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800615c:	7e0f      	ldrb	r7, [r1, #24]
 800615e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006160:	2f78      	cmp	r7, #120	; 0x78
 8006162:	4691      	mov	r9, r2
 8006164:	4680      	mov	r8, r0
 8006166:	460c      	mov	r4, r1
 8006168:	469a      	mov	sl, r3
 800616a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800616e:	d807      	bhi.n	8006180 <_printf_i+0x28>
 8006170:	2f62      	cmp	r7, #98	; 0x62
 8006172:	d80a      	bhi.n	800618a <_printf_i+0x32>
 8006174:	2f00      	cmp	r7, #0
 8006176:	f000 80d8 	beq.w	800632a <_printf_i+0x1d2>
 800617a:	2f58      	cmp	r7, #88	; 0x58
 800617c:	f000 80a3 	beq.w	80062c6 <_printf_i+0x16e>
 8006180:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006184:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006188:	e03a      	b.n	8006200 <_printf_i+0xa8>
 800618a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800618e:	2b15      	cmp	r3, #21
 8006190:	d8f6      	bhi.n	8006180 <_printf_i+0x28>
 8006192:	a101      	add	r1, pc, #4	; (adr r1, 8006198 <_printf_i+0x40>)
 8006194:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006198:	080061f1 	.word	0x080061f1
 800619c:	08006205 	.word	0x08006205
 80061a0:	08006181 	.word	0x08006181
 80061a4:	08006181 	.word	0x08006181
 80061a8:	08006181 	.word	0x08006181
 80061ac:	08006181 	.word	0x08006181
 80061b0:	08006205 	.word	0x08006205
 80061b4:	08006181 	.word	0x08006181
 80061b8:	08006181 	.word	0x08006181
 80061bc:	08006181 	.word	0x08006181
 80061c0:	08006181 	.word	0x08006181
 80061c4:	08006311 	.word	0x08006311
 80061c8:	08006235 	.word	0x08006235
 80061cc:	080062f3 	.word	0x080062f3
 80061d0:	08006181 	.word	0x08006181
 80061d4:	08006181 	.word	0x08006181
 80061d8:	08006333 	.word	0x08006333
 80061dc:	08006181 	.word	0x08006181
 80061e0:	08006235 	.word	0x08006235
 80061e4:	08006181 	.word	0x08006181
 80061e8:	08006181 	.word	0x08006181
 80061ec:	080062fb 	.word	0x080062fb
 80061f0:	682b      	ldr	r3, [r5, #0]
 80061f2:	1d1a      	adds	r2, r3, #4
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	602a      	str	r2, [r5, #0]
 80061f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006200:	2301      	movs	r3, #1
 8006202:	e0a3      	b.n	800634c <_printf_i+0x1f4>
 8006204:	6820      	ldr	r0, [r4, #0]
 8006206:	6829      	ldr	r1, [r5, #0]
 8006208:	0606      	lsls	r6, r0, #24
 800620a:	f101 0304 	add.w	r3, r1, #4
 800620e:	d50a      	bpl.n	8006226 <_printf_i+0xce>
 8006210:	680e      	ldr	r6, [r1, #0]
 8006212:	602b      	str	r3, [r5, #0]
 8006214:	2e00      	cmp	r6, #0
 8006216:	da03      	bge.n	8006220 <_printf_i+0xc8>
 8006218:	232d      	movs	r3, #45	; 0x2d
 800621a:	4276      	negs	r6, r6
 800621c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006220:	485e      	ldr	r0, [pc, #376]	; (800639c <_printf_i+0x244>)
 8006222:	230a      	movs	r3, #10
 8006224:	e019      	b.n	800625a <_printf_i+0x102>
 8006226:	680e      	ldr	r6, [r1, #0]
 8006228:	602b      	str	r3, [r5, #0]
 800622a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800622e:	bf18      	it	ne
 8006230:	b236      	sxthne	r6, r6
 8006232:	e7ef      	b.n	8006214 <_printf_i+0xbc>
 8006234:	682b      	ldr	r3, [r5, #0]
 8006236:	6820      	ldr	r0, [r4, #0]
 8006238:	1d19      	adds	r1, r3, #4
 800623a:	6029      	str	r1, [r5, #0]
 800623c:	0601      	lsls	r1, r0, #24
 800623e:	d501      	bpl.n	8006244 <_printf_i+0xec>
 8006240:	681e      	ldr	r6, [r3, #0]
 8006242:	e002      	b.n	800624a <_printf_i+0xf2>
 8006244:	0646      	lsls	r6, r0, #25
 8006246:	d5fb      	bpl.n	8006240 <_printf_i+0xe8>
 8006248:	881e      	ldrh	r6, [r3, #0]
 800624a:	4854      	ldr	r0, [pc, #336]	; (800639c <_printf_i+0x244>)
 800624c:	2f6f      	cmp	r7, #111	; 0x6f
 800624e:	bf0c      	ite	eq
 8006250:	2308      	moveq	r3, #8
 8006252:	230a      	movne	r3, #10
 8006254:	2100      	movs	r1, #0
 8006256:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800625a:	6865      	ldr	r5, [r4, #4]
 800625c:	60a5      	str	r5, [r4, #8]
 800625e:	2d00      	cmp	r5, #0
 8006260:	bfa2      	ittt	ge
 8006262:	6821      	ldrge	r1, [r4, #0]
 8006264:	f021 0104 	bicge.w	r1, r1, #4
 8006268:	6021      	strge	r1, [r4, #0]
 800626a:	b90e      	cbnz	r6, 8006270 <_printf_i+0x118>
 800626c:	2d00      	cmp	r5, #0
 800626e:	d04d      	beq.n	800630c <_printf_i+0x1b4>
 8006270:	4615      	mov	r5, r2
 8006272:	fbb6 f1f3 	udiv	r1, r6, r3
 8006276:	fb03 6711 	mls	r7, r3, r1, r6
 800627a:	5dc7      	ldrb	r7, [r0, r7]
 800627c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006280:	4637      	mov	r7, r6
 8006282:	42bb      	cmp	r3, r7
 8006284:	460e      	mov	r6, r1
 8006286:	d9f4      	bls.n	8006272 <_printf_i+0x11a>
 8006288:	2b08      	cmp	r3, #8
 800628a:	d10b      	bne.n	80062a4 <_printf_i+0x14c>
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	07de      	lsls	r6, r3, #31
 8006290:	d508      	bpl.n	80062a4 <_printf_i+0x14c>
 8006292:	6923      	ldr	r3, [r4, #16]
 8006294:	6861      	ldr	r1, [r4, #4]
 8006296:	4299      	cmp	r1, r3
 8006298:	bfde      	ittt	le
 800629a:	2330      	movle	r3, #48	; 0x30
 800629c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062a4:	1b52      	subs	r2, r2, r5
 80062a6:	6122      	str	r2, [r4, #16]
 80062a8:	f8cd a000 	str.w	sl, [sp]
 80062ac:	464b      	mov	r3, r9
 80062ae:	aa03      	add	r2, sp, #12
 80062b0:	4621      	mov	r1, r4
 80062b2:	4640      	mov	r0, r8
 80062b4:	f7ff fee2 	bl	800607c <_printf_common>
 80062b8:	3001      	adds	r0, #1
 80062ba:	d14c      	bne.n	8006356 <_printf_i+0x1fe>
 80062bc:	f04f 30ff 	mov.w	r0, #4294967295
 80062c0:	b004      	add	sp, #16
 80062c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062c6:	4835      	ldr	r0, [pc, #212]	; (800639c <_printf_i+0x244>)
 80062c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80062cc:	6829      	ldr	r1, [r5, #0]
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80062d4:	6029      	str	r1, [r5, #0]
 80062d6:	061d      	lsls	r5, r3, #24
 80062d8:	d514      	bpl.n	8006304 <_printf_i+0x1ac>
 80062da:	07df      	lsls	r7, r3, #31
 80062dc:	bf44      	itt	mi
 80062de:	f043 0320 	orrmi.w	r3, r3, #32
 80062e2:	6023      	strmi	r3, [r4, #0]
 80062e4:	b91e      	cbnz	r6, 80062ee <_printf_i+0x196>
 80062e6:	6823      	ldr	r3, [r4, #0]
 80062e8:	f023 0320 	bic.w	r3, r3, #32
 80062ec:	6023      	str	r3, [r4, #0]
 80062ee:	2310      	movs	r3, #16
 80062f0:	e7b0      	b.n	8006254 <_printf_i+0xfc>
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	f043 0320 	orr.w	r3, r3, #32
 80062f8:	6023      	str	r3, [r4, #0]
 80062fa:	2378      	movs	r3, #120	; 0x78
 80062fc:	4828      	ldr	r0, [pc, #160]	; (80063a0 <_printf_i+0x248>)
 80062fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006302:	e7e3      	b.n	80062cc <_printf_i+0x174>
 8006304:	0659      	lsls	r1, r3, #25
 8006306:	bf48      	it	mi
 8006308:	b2b6      	uxthmi	r6, r6
 800630a:	e7e6      	b.n	80062da <_printf_i+0x182>
 800630c:	4615      	mov	r5, r2
 800630e:	e7bb      	b.n	8006288 <_printf_i+0x130>
 8006310:	682b      	ldr	r3, [r5, #0]
 8006312:	6826      	ldr	r6, [r4, #0]
 8006314:	6961      	ldr	r1, [r4, #20]
 8006316:	1d18      	adds	r0, r3, #4
 8006318:	6028      	str	r0, [r5, #0]
 800631a:	0635      	lsls	r5, r6, #24
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	d501      	bpl.n	8006324 <_printf_i+0x1cc>
 8006320:	6019      	str	r1, [r3, #0]
 8006322:	e002      	b.n	800632a <_printf_i+0x1d2>
 8006324:	0670      	lsls	r0, r6, #25
 8006326:	d5fb      	bpl.n	8006320 <_printf_i+0x1c8>
 8006328:	8019      	strh	r1, [r3, #0]
 800632a:	2300      	movs	r3, #0
 800632c:	6123      	str	r3, [r4, #16]
 800632e:	4615      	mov	r5, r2
 8006330:	e7ba      	b.n	80062a8 <_printf_i+0x150>
 8006332:	682b      	ldr	r3, [r5, #0]
 8006334:	1d1a      	adds	r2, r3, #4
 8006336:	602a      	str	r2, [r5, #0]
 8006338:	681d      	ldr	r5, [r3, #0]
 800633a:	6862      	ldr	r2, [r4, #4]
 800633c:	2100      	movs	r1, #0
 800633e:	4628      	mov	r0, r5
 8006340:	f7f9 ff56 	bl	80001f0 <memchr>
 8006344:	b108      	cbz	r0, 800634a <_printf_i+0x1f2>
 8006346:	1b40      	subs	r0, r0, r5
 8006348:	6060      	str	r0, [r4, #4]
 800634a:	6863      	ldr	r3, [r4, #4]
 800634c:	6123      	str	r3, [r4, #16]
 800634e:	2300      	movs	r3, #0
 8006350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006354:	e7a8      	b.n	80062a8 <_printf_i+0x150>
 8006356:	6923      	ldr	r3, [r4, #16]
 8006358:	462a      	mov	r2, r5
 800635a:	4649      	mov	r1, r9
 800635c:	4640      	mov	r0, r8
 800635e:	47d0      	blx	sl
 8006360:	3001      	adds	r0, #1
 8006362:	d0ab      	beq.n	80062bc <_printf_i+0x164>
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	079b      	lsls	r3, r3, #30
 8006368:	d413      	bmi.n	8006392 <_printf_i+0x23a>
 800636a:	68e0      	ldr	r0, [r4, #12]
 800636c:	9b03      	ldr	r3, [sp, #12]
 800636e:	4298      	cmp	r0, r3
 8006370:	bfb8      	it	lt
 8006372:	4618      	movlt	r0, r3
 8006374:	e7a4      	b.n	80062c0 <_printf_i+0x168>
 8006376:	2301      	movs	r3, #1
 8006378:	4632      	mov	r2, r6
 800637a:	4649      	mov	r1, r9
 800637c:	4640      	mov	r0, r8
 800637e:	47d0      	blx	sl
 8006380:	3001      	adds	r0, #1
 8006382:	d09b      	beq.n	80062bc <_printf_i+0x164>
 8006384:	3501      	adds	r5, #1
 8006386:	68e3      	ldr	r3, [r4, #12]
 8006388:	9903      	ldr	r1, [sp, #12]
 800638a:	1a5b      	subs	r3, r3, r1
 800638c:	42ab      	cmp	r3, r5
 800638e:	dcf2      	bgt.n	8006376 <_printf_i+0x21e>
 8006390:	e7eb      	b.n	800636a <_printf_i+0x212>
 8006392:	2500      	movs	r5, #0
 8006394:	f104 0619 	add.w	r6, r4, #25
 8006398:	e7f5      	b.n	8006386 <_printf_i+0x22e>
 800639a:	bf00      	nop
 800639c:	080083f5 	.word	0x080083f5
 80063a0:	08008406 	.word	0x08008406

080063a4 <__svfiscanf_r>:
 80063a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063a8:	461d      	mov	r5, r3
 80063aa:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80063ac:	07df      	lsls	r7, r3, #31
 80063ae:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80063b2:	4606      	mov	r6, r0
 80063b4:	460c      	mov	r4, r1
 80063b6:	4692      	mov	sl, r2
 80063b8:	d405      	bmi.n	80063c6 <__svfiscanf_r+0x22>
 80063ba:	898b      	ldrh	r3, [r1, #12]
 80063bc:	0598      	lsls	r0, r3, #22
 80063be:	d402      	bmi.n	80063c6 <__svfiscanf_r+0x22>
 80063c0:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80063c2:	f7ff fa56 	bl	8005872 <__retarget_lock_acquire_recursive>
 80063c6:	2300      	movs	r3, #0
 80063c8:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 80063cc:	4ba6      	ldr	r3, [pc, #664]	; (8006668 <__svfiscanf_r+0x2c4>)
 80063ce:	93a0      	str	r3, [sp, #640]	; 0x280
 80063d0:	f10d 0804 	add.w	r8, sp, #4
 80063d4:	4ba5      	ldr	r3, [pc, #660]	; (800666c <__svfiscanf_r+0x2c8>)
 80063d6:	4fa6      	ldr	r7, [pc, #664]	; (8006670 <__svfiscanf_r+0x2cc>)
 80063d8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8006674 <__svfiscanf_r+0x2d0>
 80063dc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80063e0:	93a1      	str	r3, [sp, #644]	; 0x284
 80063e2:	9500      	str	r5, [sp, #0]
 80063e4:	f89a 3000 	ldrb.w	r3, [sl]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 8173 	beq.w	80066d4 <__svfiscanf_r+0x330>
 80063ee:	5dd9      	ldrb	r1, [r3, r7]
 80063f0:	f011 0108 	ands.w	r1, r1, #8
 80063f4:	f10a 0501 	add.w	r5, sl, #1
 80063f8:	d019      	beq.n	800642e <__svfiscanf_r+0x8a>
 80063fa:	6863      	ldr	r3, [r4, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	dd0f      	ble.n	8006420 <__svfiscanf_r+0x7c>
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	781a      	ldrb	r2, [r3, #0]
 8006404:	5cba      	ldrb	r2, [r7, r2]
 8006406:	0711      	lsls	r1, r2, #28
 8006408:	d401      	bmi.n	800640e <__svfiscanf_r+0x6a>
 800640a:	46aa      	mov	sl, r5
 800640c:	e7ea      	b.n	80063e4 <__svfiscanf_r+0x40>
 800640e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006410:	3201      	adds	r2, #1
 8006412:	9245      	str	r2, [sp, #276]	; 0x114
 8006414:	6862      	ldr	r2, [r4, #4]
 8006416:	3301      	adds	r3, #1
 8006418:	3a01      	subs	r2, #1
 800641a:	6062      	str	r2, [r4, #4]
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	e7ec      	b.n	80063fa <__svfiscanf_r+0x56>
 8006420:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006422:	4621      	mov	r1, r4
 8006424:	4630      	mov	r0, r6
 8006426:	4798      	blx	r3
 8006428:	2800      	cmp	r0, #0
 800642a:	d0e9      	beq.n	8006400 <__svfiscanf_r+0x5c>
 800642c:	e7ed      	b.n	800640a <__svfiscanf_r+0x66>
 800642e:	2b25      	cmp	r3, #37	; 0x25
 8006430:	d012      	beq.n	8006458 <__svfiscanf_r+0xb4>
 8006432:	469a      	mov	sl, r3
 8006434:	6863      	ldr	r3, [r4, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	f340 8095 	ble.w	8006566 <__svfiscanf_r+0x1c2>
 800643c:	6822      	ldr	r2, [r4, #0]
 800643e:	7813      	ldrb	r3, [r2, #0]
 8006440:	4553      	cmp	r3, sl
 8006442:	f040 8147 	bne.w	80066d4 <__svfiscanf_r+0x330>
 8006446:	6863      	ldr	r3, [r4, #4]
 8006448:	3b01      	subs	r3, #1
 800644a:	6063      	str	r3, [r4, #4]
 800644c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800644e:	3201      	adds	r2, #1
 8006450:	3301      	adds	r3, #1
 8006452:	6022      	str	r2, [r4, #0]
 8006454:	9345      	str	r3, [sp, #276]	; 0x114
 8006456:	e7d8      	b.n	800640a <__svfiscanf_r+0x66>
 8006458:	9141      	str	r1, [sp, #260]	; 0x104
 800645a:	9143      	str	r1, [sp, #268]	; 0x10c
 800645c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8006460:	2b2a      	cmp	r3, #42	; 0x2a
 8006462:	bf02      	ittt	eq
 8006464:	2310      	moveq	r3, #16
 8006466:	9341      	streq	r3, [sp, #260]	; 0x104
 8006468:	f10a 0502 	addeq.w	r5, sl, #2
 800646c:	220a      	movs	r2, #10
 800646e:	46aa      	mov	sl, r5
 8006470:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006474:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006478:	2b09      	cmp	r3, #9
 800647a:	d91e      	bls.n	80064ba <__svfiscanf_r+0x116>
 800647c:	487d      	ldr	r0, [pc, #500]	; (8006674 <__svfiscanf_r+0x2d0>)
 800647e:	2203      	movs	r2, #3
 8006480:	f7f9 feb6 	bl	80001f0 <memchr>
 8006484:	b140      	cbz	r0, 8006498 <__svfiscanf_r+0xf4>
 8006486:	2301      	movs	r3, #1
 8006488:	eba0 0009 	sub.w	r0, r0, r9
 800648c:	fa03 f000 	lsl.w	r0, r3, r0
 8006490:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006492:	4318      	orrs	r0, r3
 8006494:	9041      	str	r0, [sp, #260]	; 0x104
 8006496:	4655      	mov	r5, sl
 8006498:	f815 3b01 	ldrb.w	r3, [r5], #1
 800649c:	2b78      	cmp	r3, #120	; 0x78
 800649e:	d807      	bhi.n	80064b0 <__svfiscanf_r+0x10c>
 80064a0:	2b57      	cmp	r3, #87	; 0x57
 80064a2:	d811      	bhi.n	80064c8 <__svfiscanf_r+0x124>
 80064a4:	2b25      	cmp	r3, #37	; 0x25
 80064a6:	d0c4      	beq.n	8006432 <__svfiscanf_r+0x8e>
 80064a8:	d858      	bhi.n	800655c <__svfiscanf_r+0x1b8>
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 80c8 	beq.w	8006640 <__svfiscanf_r+0x29c>
 80064b0:	2303      	movs	r3, #3
 80064b2:	9347      	str	r3, [sp, #284]	; 0x11c
 80064b4:	230a      	movs	r3, #10
 80064b6:	9342      	str	r3, [sp, #264]	; 0x108
 80064b8:	e07c      	b.n	80065b4 <__svfiscanf_r+0x210>
 80064ba:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80064bc:	fb02 1103 	mla	r1, r2, r3, r1
 80064c0:	3930      	subs	r1, #48	; 0x30
 80064c2:	9143      	str	r1, [sp, #268]	; 0x10c
 80064c4:	4655      	mov	r5, sl
 80064c6:	e7d2      	b.n	800646e <__svfiscanf_r+0xca>
 80064c8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80064cc:	2a20      	cmp	r2, #32
 80064ce:	d8ef      	bhi.n	80064b0 <__svfiscanf_r+0x10c>
 80064d0:	a101      	add	r1, pc, #4	; (adr r1, 80064d8 <__svfiscanf_r+0x134>)
 80064d2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80064d6:	bf00      	nop
 80064d8:	0800659f 	.word	0x0800659f
 80064dc:	080064b1 	.word	0x080064b1
 80064e0:	080064b1 	.word	0x080064b1
 80064e4:	080065fd 	.word	0x080065fd
 80064e8:	080064b1 	.word	0x080064b1
 80064ec:	080064b1 	.word	0x080064b1
 80064f0:	080064b1 	.word	0x080064b1
 80064f4:	080064b1 	.word	0x080064b1
 80064f8:	080064b1 	.word	0x080064b1
 80064fc:	080064b1 	.word	0x080064b1
 8006500:	080064b1 	.word	0x080064b1
 8006504:	08006613 	.word	0x08006613
 8006508:	080065e9 	.word	0x080065e9
 800650c:	08006563 	.word	0x08006563
 8006510:	08006563 	.word	0x08006563
 8006514:	08006563 	.word	0x08006563
 8006518:	080064b1 	.word	0x080064b1
 800651c:	080065ed 	.word	0x080065ed
 8006520:	080064b1 	.word	0x080064b1
 8006524:	080064b1 	.word	0x080064b1
 8006528:	080064b1 	.word	0x080064b1
 800652c:	080064b1 	.word	0x080064b1
 8006530:	08006623 	.word	0x08006623
 8006534:	080065f5 	.word	0x080065f5
 8006538:	08006597 	.word	0x08006597
 800653c:	080064b1 	.word	0x080064b1
 8006540:	080064b1 	.word	0x080064b1
 8006544:	0800661f 	.word	0x0800661f
 8006548:	080064b1 	.word	0x080064b1
 800654c:	080065e9 	.word	0x080065e9
 8006550:	080064b1 	.word	0x080064b1
 8006554:	080064b1 	.word	0x080064b1
 8006558:	0800659f 	.word	0x0800659f
 800655c:	3b45      	subs	r3, #69	; 0x45
 800655e:	2b02      	cmp	r3, #2
 8006560:	d8a6      	bhi.n	80064b0 <__svfiscanf_r+0x10c>
 8006562:	2305      	movs	r3, #5
 8006564:	e025      	b.n	80065b2 <__svfiscanf_r+0x20e>
 8006566:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006568:	4621      	mov	r1, r4
 800656a:	4630      	mov	r0, r6
 800656c:	4798      	blx	r3
 800656e:	2800      	cmp	r0, #0
 8006570:	f43f af64 	beq.w	800643c <__svfiscanf_r+0x98>
 8006574:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006576:	07da      	lsls	r2, r3, #31
 8006578:	f140 80a4 	bpl.w	80066c4 <__svfiscanf_r+0x320>
 800657c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800657e:	2800      	cmp	r0, #0
 8006580:	d067      	beq.n	8006652 <__svfiscanf_r+0x2ae>
 8006582:	89a3      	ldrh	r3, [r4, #12]
 8006584:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006588:	bf18      	it	ne
 800658a:	f04f 30ff 	movne.w	r0, #4294967295
 800658e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8006592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006596:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006598:	f042 0220 	orr.w	r2, r2, #32
 800659c:	9241      	str	r2, [sp, #260]	; 0x104
 800659e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80065a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065a4:	9241      	str	r2, [sp, #260]	; 0x104
 80065a6:	2210      	movs	r2, #16
 80065a8:	2b6f      	cmp	r3, #111	; 0x6f
 80065aa:	9242      	str	r2, [sp, #264]	; 0x108
 80065ac:	bf34      	ite	cc
 80065ae:	2303      	movcc	r3, #3
 80065b0:	2304      	movcs	r3, #4
 80065b2:	9347      	str	r3, [sp, #284]	; 0x11c
 80065b4:	6863      	ldr	r3, [r4, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	dd4e      	ble.n	8006658 <__svfiscanf_r+0x2b4>
 80065ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80065bc:	065b      	lsls	r3, r3, #25
 80065be:	d404      	bmi.n	80065ca <__svfiscanf_r+0x226>
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	781a      	ldrb	r2, [r3, #0]
 80065c4:	5cba      	ldrb	r2, [r7, r2]
 80065c6:	0710      	lsls	r0, r2, #28
 80065c8:	d456      	bmi.n	8006678 <__svfiscanf_r+0x2d4>
 80065ca:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	dc65      	bgt.n	800669c <__svfiscanf_r+0x2f8>
 80065d0:	466b      	mov	r3, sp
 80065d2:	4622      	mov	r2, r4
 80065d4:	a941      	add	r1, sp, #260	; 0x104
 80065d6:	4630      	mov	r0, r6
 80065d8:	f000 f8b2 	bl	8006740 <_scanf_chars>
 80065dc:	2801      	cmp	r0, #1
 80065de:	d079      	beq.n	80066d4 <__svfiscanf_r+0x330>
 80065e0:	2802      	cmp	r0, #2
 80065e2:	f47f af12 	bne.w	800640a <__svfiscanf_r+0x66>
 80065e6:	e7c5      	b.n	8006574 <__svfiscanf_r+0x1d0>
 80065e8:	220a      	movs	r2, #10
 80065ea:	e7dd      	b.n	80065a8 <__svfiscanf_r+0x204>
 80065ec:	2300      	movs	r3, #0
 80065ee:	9342      	str	r3, [sp, #264]	; 0x108
 80065f0:	2303      	movs	r3, #3
 80065f2:	e7de      	b.n	80065b2 <__svfiscanf_r+0x20e>
 80065f4:	2308      	movs	r3, #8
 80065f6:	9342      	str	r3, [sp, #264]	; 0x108
 80065f8:	2304      	movs	r3, #4
 80065fa:	e7da      	b.n	80065b2 <__svfiscanf_r+0x20e>
 80065fc:	4629      	mov	r1, r5
 80065fe:	4640      	mov	r0, r8
 8006600:	f000 fa94 	bl	8006b2c <__sccl>
 8006604:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800660a:	9341      	str	r3, [sp, #260]	; 0x104
 800660c:	4605      	mov	r5, r0
 800660e:	2301      	movs	r3, #1
 8006610:	e7cf      	b.n	80065b2 <__svfiscanf_r+0x20e>
 8006612:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006618:	9341      	str	r3, [sp, #260]	; 0x104
 800661a:	2300      	movs	r3, #0
 800661c:	e7c9      	b.n	80065b2 <__svfiscanf_r+0x20e>
 800661e:	2302      	movs	r3, #2
 8006620:	e7c7      	b.n	80065b2 <__svfiscanf_r+0x20e>
 8006622:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006624:	06c3      	lsls	r3, r0, #27
 8006626:	f53f aef0 	bmi.w	800640a <__svfiscanf_r+0x66>
 800662a:	9b00      	ldr	r3, [sp, #0]
 800662c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800662e:	1d19      	adds	r1, r3, #4
 8006630:	9100      	str	r1, [sp, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f010 0f01 	tst.w	r0, #1
 8006638:	bf14      	ite	ne
 800663a:	801a      	strhne	r2, [r3, #0]
 800663c:	601a      	streq	r2, [r3, #0]
 800663e:	e6e4      	b.n	800640a <__svfiscanf_r+0x66>
 8006640:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006642:	07d8      	lsls	r0, r3, #31
 8006644:	d405      	bmi.n	8006652 <__svfiscanf_r+0x2ae>
 8006646:	89a3      	ldrh	r3, [r4, #12]
 8006648:	0599      	lsls	r1, r3, #22
 800664a:	d402      	bmi.n	8006652 <__svfiscanf_r+0x2ae>
 800664c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800664e:	f7ff f911 	bl	8005874 <__retarget_lock_release_recursive>
 8006652:	f04f 30ff 	mov.w	r0, #4294967295
 8006656:	e79a      	b.n	800658e <__svfiscanf_r+0x1ea>
 8006658:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800665a:	4621      	mov	r1, r4
 800665c:	4630      	mov	r0, r6
 800665e:	4798      	blx	r3
 8006660:	2800      	cmp	r0, #0
 8006662:	d0aa      	beq.n	80065ba <__svfiscanf_r+0x216>
 8006664:	e786      	b.n	8006574 <__svfiscanf_r+0x1d0>
 8006666:	bf00      	nop
 8006668:	08006d81 	.word	0x08006d81
 800666c:	080069f9 	.word	0x080069f9
 8006670:	08008281 	.word	0x08008281
 8006674:	080083ea 	.word	0x080083ea
 8006678:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800667a:	3201      	adds	r2, #1
 800667c:	9245      	str	r2, [sp, #276]	; 0x114
 800667e:	6862      	ldr	r2, [r4, #4]
 8006680:	3a01      	subs	r2, #1
 8006682:	2a00      	cmp	r2, #0
 8006684:	6062      	str	r2, [r4, #4]
 8006686:	dd02      	ble.n	800668e <__svfiscanf_r+0x2ea>
 8006688:	3301      	adds	r3, #1
 800668a:	6023      	str	r3, [r4, #0]
 800668c:	e798      	b.n	80065c0 <__svfiscanf_r+0x21c>
 800668e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006690:	4621      	mov	r1, r4
 8006692:	4630      	mov	r0, r6
 8006694:	4798      	blx	r3
 8006696:	2800      	cmp	r0, #0
 8006698:	d092      	beq.n	80065c0 <__svfiscanf_r+0x21c>
 800669a:	e76b      	b.n	8006574 <__svfiscanf_r+0x1d0>
 800669c:	2b04      	cmp	r3, #4
 800669e:	dc06      	bgt.n	80066ae <__svfiscanf_r+0x30a>
 80066a0:	466b      	mov	r3, sp
 80066a2:	4622      	mov	r2, r4
 80066a4:	a941      	add	r1, sp, #260	; 0x104
 80066a6:	4630      	mov	r0, r6
 80066a8:	f000 f8a4 	bl	80067f4 <_scanf_i>
 80066ac:	e796      	b.n	80065dc <__svfiscanf_r+0x238>
 80066ae:	4b0f      	ldr	r3, [pc, #60]	; (80066ec <__svfiscanf_r+0x348>)
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f43f aeaa 	beq.w	800640a <__svfiscanf_r+0x66>
 80066b6:	466b      	mov	r3, sp
 80066b8:	4622      	mov	r2, r4
 80066ba:	a941      	add	r1, sp, #260	; 0x104
 80066bc:	4630      	mov	r0, r6
 80066be:	f3af 8000 	nop.w
 80066c2:	e78b      	b.n	80065dc <__svfiscanf_r+0x238>
 80066c4:	89a3      	ldrh	r3, [r4, #12]
 80066c6:	0599      	lsls	r1, r3, #22
 80066c8:	f53f af58 	bmi.w	800657c <__svfiscanf_r+0x1d8>
 80066cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066ce:	f7ff f8d1 	bl	8005874 <__retarget_lock_release_recursive>
 80066d2:	e753      	b.n	800657c <__svfiscanf_r+0x1d8>
 80066d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066d6:	07da      	lsls	r2, r3, #31
 80066d8:	d405      	bmi.n	80066e6 <__svfiscanf_r+0x342>
 80066da:	89a3      	ldrh	r3, [r4, #12]
 80066dc:	059b      	lsls	r3, r3, #22
 80066de:	d402      	bmi.n	80066e6 <__svfiscanf_r+0x342>
 80066e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066e2:	f7ff f8c7 	bl	8005874 <__retarget_lock_release_recursive>
 80066e6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80066e8:	e751      	b.n	800658e <__svfiscanf_r+0x1ea>
 80066ea:	bf00      	nop
 80066ec:	00000000 	.word	0x00000000

080066f0 <_vfiscanf_r>:
 80066f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066f2:	460c      	mov	r4, r1
 80066f4:	4605      	mov	r5, r0
 80066f6:	b138      	cbz	r0, 8006708 <_vfiscanf_r+0x18>
 80066f8:	6981      	ldr	r1, [r0, #24]
 80066fa:	b929      	cbnz	r1, 8006708 <_vfiscanf_r+0x18>
 80066fc:	e9cd 2300 	strd	r2, r3, [sp]
 8006700:	f7fe fffc 	bl	80056fc <__sinit>
 8006704:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006708:	490a      	ldr	r1, [pc, #40]	; (8006734 <_vfiscanf_r+0x44>)
 800670a:	428c      	cmp	r4, r1
 800670c:	d107      	bne.n	800671e <_vfiscanf_r+0x2e>
 800670e:	686c      	ldr	r4, [r5, #4]
 8006710:	4621      	mov	r1, r4
 8006712:	4628      	mov	r0, r5
 8006714:	b003      	add	sp, #12
 8006716:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800671a:	f7ff be43 	b.w	80063a4 <__svfiscanf_r>
 800671e:	4906      	ldr	r1, [pc, #24]	; (8006738 <_vfiscanf_r+0x48>)
 8006720:	428c      	cmp	r4, r1
 8006722:	d101      	bne.n	8006728 <_vfiscanf_r+0x38>
 8006724:	68ac      	ldr	r4, [r5, #8]
 8006726:	e7f3      	b.n	8006710 <_vfiscanf_r+0x20>
 8006728:	4904      	ldr	r1, [pc, #16]	; (800673c <_vfiscanf_r+0x4c>)
 800672a:	428c      	cmp	r4, r1
 800672c:	bf08      	it	eq
 800672e:	68ec      	ldreq	r4, [r5, #12]
 8006730:	e7ee      	b.n	8006710 <_vfiscanf_r+0x20>
 8006732:	bf00      	nop
 8006734:	080083a4 	.word	0x080083a4
 8006738:	080083c4 	.word	0x080083c4
 800673c:	08008384 	.word	0x08008384

08006740 <_scanf_chars>:
 8006740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006744:	4615      	mov	r5, r2
 8006746:	688a      	ldr	r2, [r1, #8]
 8006748:	4680      	mov	r8, r0
 800674a:	460c      	mov	r4, r1
 800674c:	b932      	cbnz	r2, 800675c <_scanf_chars+0x1c>
 800674e:	698a      	ldr	r2, [r1, #24]
 8006750:	2a00      	cmp	r2, #0
 8006752:	bf0c      	ite	eq
 8006754:	2201      	moveq	r2, #1
 8006756:	f04f 32ff 	movne.w	r2, #4294967295
 800675a:	608a      	str	r2, [r1, #8]
 800675c:	6822      	ldr	r2, [r4, #0]
 800675e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80067f0 <_scanf_chars+0xb0>
 8006762:	06d1      	lsls	r1, r2, #27
 8006764:	bf5f      	itttt	pl
 8006766:	681a      	ldrpl	r2, [r3, #0]
 8006768:	1d11      	addpl	r1, r2, #4
 800676a:	6019      	strpl	r1, [r3, #0]
 800676c:	6816      	ldrpl	r6, [r2, #0]
 800676e:	2700      	movs	r7, #0
 8006770:	69a0      	ldr	r0, [r4, #24]
 8006772:	b188      	cbz	r0, 8006798 <_scanf_chars+0x58>
 8006774:	2801      	cmp	r0, #1
 8006776:	d107      	bne.n	8006788 <_scanf_chars+0x48>
 8006778:	682a      	ldr	r2, [r5, #0]
 800677a:	7811      	ldrb	r1, [r2, #0]
 800677c:	6962      	ldr	r2, [r4, #20]
 800677e:	5c52      	ldrb	r2, [r2, r1]
 8006780:	b952      	cbnz	r2, 8006798 <_scanf_chars+0x58>
 8006782:	2f00      	cmp	r7, #0
 8006784:	d031      	beq.n	80067ea <_scanf_chars+0xaa>
 8006786:	e022      	b.n	80067ce <_scanf_chars+0x8e>
 8006788:	2802      	cmp	r0, #2
 800678a:	d120      	bne.n	80067ce <_scanf_chars+0x8e>
 800678c:	682b      	ldr	r3, [r5, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	f813 3009 	ldrb.w	r3, [r3, r9]
 8006794:	071b      	lsls	r3, r3, #28
 8006796:	d41a      	bmi.n	80067ce <_scanf_chars+0x8e>
 8006798:	6823      	ldr	r3, [r4, #0]
 800679a:	06da      	lsls	r2, r3, #27
 800679c:	bf5e      	ittt	pl
 800679e:	682b      	ldrpl	r3, [r5, #0]
 80067a0:	781b      	ldrbpl	r3, [r3, #0]
 80067a2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80067a6:	682a      	ldr	r2, [r5, #0]
 80067a8:	686b      	ldr	r3, [r5, #4]
 80067aa:	3201      	adds	r2, #1
 80067ac:	602a      	str	r2, [r5, #0]
 80067ae:	68a2      	ldr	r2, [r4, #8]
 80067b0:	3b01      	subs	r3, #1
 80067b2:	3a01      	subs	r2, #1
 80067b4:	606b      	str	r3, [r5, #4]
 80067b6:	3701      	adds	r7, #1
 80067b8:	60a2      	str	r2, [r4, #8]
 80067ba:	b142      	cbz	r2, 80067ce <_scanf_chars+0x8e>
 80067bc:	2b00      	cmp	r3, #0
 80067be:	dcd7      	bgt.n	8006770 <_scanf_chars+0x30>
 80067c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80067c4:	4629      	mov	r1, r5
 80067c6:	4640      	mov	r0, r8
 80067c8:	4798      	blx	r3
 80067ca:	2800      	cmp	r0, #0
 80067cc:	d0d0      	beq.n	8006770 <_scanf_chars+0x30>
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	f013 0310 	ands.w	r3, r3, #16
 80067d4:	d105      	bne.n	80067e2 <_scanf_chars+0xa2>
 80067d6:	68e2      	ldr	r2, [r4, #12]
 80067d8:	3201      	adds	r2, #1
 80067da:	60e2      	str	r2, [r4, #12]
 80067dc:	69a2      	ldr	r2, [r4, #24]
 80067de:	b102      	cbz	r2, 80067e2 <_scanf_chars+0xa2>
 80067e0:	7033      	strb	r3, [r6, #0]
 80067e2:	6923      	ldr	r3, [r4, #16]
 80067e4:	443b      	add	r3, r7
 80067e6:	6123      	str	r3, [r4, #16]
 80067e8:	2000      	movs	r0, #0
 80067ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ee:	bf00      	nop
 80067f0:	08008281 	.word	0x08008281

080067f4 <_scanf_i>:
 80067f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f8:	4698      	mov	r8, r3
 80067fa:	4b76      	ldr	r3, [pc, #472]	; (80069d4 <_scanf_i+0x1e0>)
 80067fc:	460c      	mov	r4, r1
 80067fe:	4682      	mov	sl, r0
 8006800:	4616      	mov	r6, r2
 8006802:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006806:	b087      	sub	sp, #28
 8006808:	ab03      	add	r3, sp, #12
 800680a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800680e:	4b72      	ldr	r3, [pc, #456]	; (80069d8 <_scanf_i+0x1e4>)
 8006810:	69a1      	ldr	r1, [r4, #24]
 8006812:	4a72      	ldr	r2, [pc, #456]	; (80069dc <_scanf_i+0x1e8>)
 8006814:	2903      	cmp	r1, #3
 8006816:	bf18      	it	ne
 8006818:	461a      	movne	r2, r3
 800681a:	68a3      	ldr	r3, [r4, #8]
 800681c:	9201      	str	r2, [sp, #4]
 800681e:	1e5a      	subs	r2, r3, #1
 8006820:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006824:	bf88      	it	hi
 8006826:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800682a:	4627      	mov	r7, r4
 800682c:	bf82      	ittt	hi
 800682e:	eb03 0905 	addhi.w	r9, r3, r5
 8006832:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006836:	60a3      	strhi	r3, [r4, #8]
 8006838:	f857 3b1c 	ldr.w	r3, [r7], #28
 800683c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006840:	bf98      	it	ls
 8006842:	f04f 0900 	movls.w	r9, #0
 8006846:	6023      	str	r3, [r4, #0]
 8006848:	463d      	mov	r5, r7
 800684a:	f04f 0b00 	mov.w	fp, #0
 800684e:	6831      	ldr	r1, [r6, #0]
 8006850:	ab03      	add	r3, sp, #12
 8006852:	7809      	ldrb	r1, [r1, #0]
 8006854:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006858:	2202      	movs	r2, #2
 800685a:	f7f9 fcc9 	bl	80001f0 <memchr>
 800685e:	b328      	cbz	r0, 80068ac <_scanf_i+0xb8>
 8006860:	f1bb 0f01 	cmp.w	fp, #1
 8006864:	d159      	bne.n	800691a <_scanf_i+0x126>
 8006866:	6862      	ldr	r2, [r4, #4]
 8006868:	b92a      	cbnz	r2, 8006876 <_scanf_i+0x82>
 800686a:	6822      	ldr	r2, [r4, #0]
 800686c:	2308      	movs	r3, #8
 800686e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006872:	6063      	str	r3, [r4, #4]
 8006874:	6022      	str	r2, [r4, #0]
 8006876:	6822      	ldr	r2, [r4, #0]
 8006878:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800687c:	6022      	str	r2, [r4, #0]
 800687e:	68a2      	ldr	r2, [r4, #8]
 8006880:	1e51      	subs	r1, r2, #1
 8006882:	60a1      	str	r1, [r4, #8]
 8006884:	b192      	cbz	r2, 80068ac <_scanf_i+0xb8>
 8006886:	6832      	ldr	r2, [r6, #0]
 8006888:	1c51      	adds	r1, r2, #1
 800688a:	6031      	str	r1, [r6, #0]
 800688c:	7812      	ldrb	r2, [r2, #0]
 800688e:	f805 2b01 	strb.w	r2, [r5], #1
 8006892:	6872      	ldr	r2, [r6, #4]
 8006894:	3a01      	subs	r2, #1
 8006896:	2a00      	cmp	r2, #0
 8006898:	6072      	str	r2, [r6, #4]
 800689a:	dc07      	bgt.n	80068ac <_scanf_i+0xb8>
 800689c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80068a0:	4631      	mov	r1, r6
 80068a2:	4650      	mov	r0, sl
 80068a4:	4790      	blx	r2
 80068a6:	2800      	cmp	r0, #0
 80068a8:	f040 8085 	bne.w	80069b6 <_scanf_i+0x1c2>
 80068ac:	f10b 0b01 	add.w	fp, fp, #1
 80068b0:	f1bb 0f03 	cmp.w	fp, #3
 80068b4:	d1cb      	bne.n	800684e <_scanf_i+0x5a>
 80068b6:	6863      	ldr	r3, [r4, #4]
 80068b8:	b90b      	cbnz	r3, 80068be <_scanf_i+0xca>
 80068ba:	230a      	movs	r3, #10
 80068bc:	6063      	str	r3, [r4, #4]
 80068be:	6863      	ldr	r3, [r4, #4]
 80068c0:	4947      	ldr	r1, [pc, #284]	; (80069e0 <_scanf_i+0x1ec>)
 80068c2:	6960      	ldr	r0, [r4, #20]
 80068c4:	1ac9      	subs	r1, r1, r3
 80068c6:	f000 f931 	bl	8006b2c <__sccl>
 80068ca:	f04f 0b00 	mov.w	fp, #0
 80068ce:	68a3      	ldr	r3, [r4, #8]
 80068d0:	6822      	ldr	r2, [r4, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d03d      	beq.n	8006952 <_scanf_i+0x15e>
 80068d6:	6831      	ldr	r1, [r6, #0]
 80068d8:	6960      	ldr	r0, [r4, #20]
 80068da:	f891 c000 	ldrb.w	ip, [r1]
 80068de:	f810 000c 	ldrb.w	r0, [r0, ip]
 80068e2:	2800      	cmp	r0, #0
 80068e4:	d035      	beq.n	8006952 <_scanf_i+0x15e>
 80068e6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80068ea:	d124      	bne.n	8006936 <_scanf_i+0x142>
 80068ec:	0510      	lsls	r0, r2, #20
 80068ee:	d522      	bpl.n	8006936 <_scanf_i+0x142>
 80068f0:	f10b 0b01 	add.w	fp, fp, #1
 80068f4:	f1b9 0f00 	cmp.w	r9, #0
 80068f8:	d003      	beq.n	8006902 <_scanf_i+0x10e>
 80068fa:	3301      	adds	r3, #1
 80068fc:	f109 39ff 	add.w	r9, r9, #4294967295
 8006900:	60a3      	str	r3, [r4, #8]
 8006902:	6873      	ldr	r3, [r6, #4]
 8006904:	3b01      	subs	r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	6073      	str	r3, [r6, #4]
 800690a:	dd1b      	ble.n	8006944 <_scanf_i+0x150>
 800690c:	6833      	ldr	r3, [r6, #0]
 800690e:	3301      	adds	r3, #1
 8006910:	6033      	str	r3, [r6, #0]
 8006912:	68a3      	ldr	r3, [r4, #8]
 8006914:	3b01      	subs	r3, #1
 8006916:	60a3      	str	r3, [r4, #8]
 8006918:	e7d9      	b.n	80068ce <_scanf_i+0xda>
 800691a:	f1bb 0f02 	cmp.w	fp, #2
 800691e:	d1ae      	bne.n	800687e <_scanf_i+0x8a>
 8006920:	6822      	ldr	r2, [r4, #0]
 8006922:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006926:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800692a:	d1bf      	bne.n	80068ac <_scanf_i+0xb8>
 800692c:	2310      	movs	r3, #16
 800692e:	6063      	str	r3, [r4, #4]
 8006930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006934:	e7a2      	b.n	800687c <_scanf_i+0x88>
 8006936:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800693a:	6022      	str	r2, [r4, #0]
 800693c:	780b      	ldrb	r3, [r1, #0]
 800693e:	f805 3b01 	strb.w	r3, [r5], #1
 8006942:	e7de      	b.n	8006902 <_scanf_i+0x10e>
 8006944:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006948:	4631      	mov	r1, r6
 800694a:	4650      	mov	r0, sl
 800694c:	4798      	blx	r3
 800694e:	2800      	cmp	r0, #0
 8006950:	d0df      	beq.n	8006912 <_scanf_i+0x11e>
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	05db      	lsls	r3, r3, #23
 8006956:	d50d      	bpl.n	8006974 <_scanf_i+0x180>
 8006958:	42bd      	cmp	r5, r7
 800695a:	d909      	bls.n	8006970 <_scanf_i+0x17c>
 800695c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006960:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006964:	4632      	mov	r2, r6
 8006966:	4650      	mov	r0, sl
 8006968:	4798      	blx	r3
 800696a:	f105 39ff 	add.w	r9, r5, #4294967295
 800696e:	464d      	mov	r5, r9
 8006970:	42bd      	cmp	r5, r7
 8006972:	d02d      	beq.n	80069d0 <_scanf_i+0x1dc>
 8006974:	6822      	ldr	r2, [r4, #0]
 8006976:	f012 0210 	ands.w	r2, r2, #16
 800697a:	d113      	bne.n	80069a4 <_scanf_i+0x1b0>
 800697c:	702a      	strb	r2, [r5, #0]
 800697e:	6863      	ldr	r3, [r4, #4]
 8006980:	9e01      	ldr	r6, [sp, #4]
 8006982:	4639      	mov	r1, r7
 8006984:	4650      	mov	r0, sl
 8006986:	47b0      	blx	r6
 8006988:	6821      	ldr	r1, [r4, #0]
 800698a:	f8d8 3000 	ldr.w	r3, [r8]
 800698e:	f011 0f20 	tst.w	r1, #32
 8006992:	d013      	beq.n	80069bc <_scanf_i+0x1c8>
 8006994:	1d1a      	adds	r2, r3, #4
 8006996:	f8c8 2000 	str.w	r2, [r8]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6018      	str	r0, [r3, #0]
 800699e:	68e3      	ldr	r3, [r4, #12]
 80069a0:	3301      	adds	r3, #1
 80069a2:	60e3      	str	r3, [r4, #12]
 80069a4:	1bed      	subs	r5, r5, r7
 80069a6:	44ab      	add	fp, r5
 80069a8:	6925      	ldr	r5, [r4, #16]
 80069aa:	445d      	add	r5, fp
 80069ac:	6125      	str	r5, [r4, #16]
 80069ae:	2000      	movs	r0, #0
 80069b0:	b007      	add	sp, #28
 80069b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b6:	f04f 0b00 	mov.w	fp, #0
 80069ba:	e7ca      	b.n	8006952 <_scanf_i+0x15e>
 80069bc:	1d1a      	adds	r2, r3, #4
 80069be:	f8c8 2000 	str.w	r2, [r8]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f011 0f01 	tst.w	r1, #1
 80069c8:	bf14      	ite	ne
 80069ca:	8018      	strhne	r0, [r3, #0]
 80069cc:	6018      	streq	r0, [r3, #0]
 80069ce:	e7e6      	b.n	800699e <_scanf_i+0x1aa>
 80069d0:	2001      	movs	r0, #1
 80069d2:	e7ed      	b.n	80069b0 <_scanf_i+0x1bc>
 80069d4:	08008258 	.word	0x08008258
 80069d8:	08006d09 	.word	0x08006d09
 80069dc:	0800548d 	.word	0x0800548d
 80069e0:	08008430 	.word	0x08008430

080069e4 <lflush>:
 80069e4:	8983      	ldrh	r3, [r0, #12]
 80069e6:	f003 0309 	and.w	r3, r3, #9
 80069ea:	2b09      	cmp	r3, #9
 80069ec:	d101      	bne.n	80069f2 <lflush+0xe>
 80069ee:	f7fe be1b 	b.w	8005628 <fflush>
 80069f2:	2000      	movs	r0, #0
 80069f4:	4770      	bx	lr
	...

080069f8 <__srefill_r>:
 80069f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fa:	460c      	mov	r4, r1
 80069fc:	4605      	mov	r5, r0
 80069fe:	b118      	cbz	r0, 8006a08 <__srefill_r+0x10>
 8006a00:	6983      	ldr	r3, [r0, #24]
 8006a02:	b90b      	cbnz	r3, 8006a08 <__srefill_r+0x10>
 8006a04:	f7fe fe7a 	bl	80056fc <__sinit>
 8006a08:	4b3b      	ldr	r3, [pc, #236]	; (8006af8 <__srefill_r+0x100>)
 8006a0a:	429c      	cmp	r4, r3
 8006a0c:	d10a      	bne.n	8006a24 <__srefill_r+0x2c>
 8006a0e:	686c      	ldr	r4, [r5, #4]
 8006a10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a14:	2300      	movs	r3, #0
 8006a16:	6063      	str	r3, [r4, #4]
 8006a18:	89a3      	ldrh	r3, [r4, #12]
 8006a1a:	069e      	lsls	r6, r3, #26
 8006a1c:	d50c      	bpl.n	8006a38 <__srefill_r+0x40>
 8006a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a22:	e066      	b.n	8006af2 <__srefill_r+0xfa>
 8006a24:	4b35      	ldr	r3, [pc, #212]	; (8006afc <__srefill_r+0x104>)
 8006a26:	429c      	cmp	r4, r3
 8006a28:	d101      	bne.n	8006a2e <__srefill_r+0x36>
 8006a2a:	68ac      	ldr	r4, [r5, #8]
 8006a2c:	e7f0      	b.n	8006a10 <__srefill_r+0x18>
 8006a2e:	4b34      	ldr	r3, [pc, #208]	; (8006b00 <__srefill_r+0x108>)
 8006a30:	429c      	cmp	r4, r3
 8006a32:	bf08      	it	eq
 8006a34:	68ec      	ldreq	r4, [r5, #12]
 8006a36:	e7eb      	b.n	8006a10 <__srefill_r+0x18>
 8006a38:	0758      	lsls	r0, r3, #29
 8006a3a:	d448      	bmi.n	8006ace <__srefill_r+0xd6>
 8006a3c:	06d9      	lsls	r1, r3, #27
 8006a3e:	d405      	bmi.n	8006a4c <__srefill_r+0x54>
 8006a40:	2309      	movs	r3, #9
 8006a42:	602b      	str	r3, [r5, #0]
 8006a44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a48:	81a3      	strh	r3, [r4, #12]
 8006a4a:	e7e8      	b.n	8006a1e <__srefill_r+0x26>
 8006a4c:	071a      	lsls	r2, r3, #28
 8006a4e:	d50b      	bpl.n	8006a68 <__srefill_r+0x70>
 8006a50:	4621      	mov	r1, r4
 8006a52:	4628      	mov	r0, r5
 8006a54:	f7fe fdac 	bl	80055b0 <_fflush_r>
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	d1e0      	bne.n	8006a1e <__srefill_r+0x26>
 8006a5c:	89a3      	ldrh	r3, [r4, #12]
 8006a5e:	60a0      	str	r0, [r4, #8]
 8006a60:	f023 0308 	bic.w	r3, r3, #8
 8006a64:	81a3      	strh	r3, [r4, #12]
 8006a66:	61a0      	str	r0, [r4, #24]
 8006a68:	89a3      	ldrh	r3, [r4, #12]
 8006a6a:	f043 0304 	orr.w	r3, r3, #4
 8006a6e:	81a3      	strh	r3, [r4, #12]
 8006a70:	6923      	ldr	r3, [r4, #16]
 8006a72:	b91b      	cbnz	r3, 8006a7c <__srefill_r+0x84>
 8006a74:	4621      	mov	r1, r4
 8006a76:	4628      	mov	r0, r5
 8006a78:	f7fe ff22 	bl	80058c0 <__smakebuf_r>
 8006a7c:	89a6      	ldrh	r6, [r4, #12]
 8006a7e:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8006a82:	07b3      	lsls	r3, r6, #30
 8006a84:	d00f      	beq.n	8006aa6 <__srefill_r+0xae>
 8006a86:	2301      	movs	r3, #1
 8006a88:	81a3      	strh	r3, [r4, #12]
 8006a8a:	4b1e      	ldr	r3, [pc, #120]	; (8006b04 <__srefill_r+0x10c>)
 8006a8c:	491e      	ldr	r1, [pc, #120]	; (8006b08 <__srefill_r+0x110>)
 8006a8e:	6818      	ldr	r0, [r3, #0]
 8006a90:	f006 0609 	and.w	r6, r6, #9
 8006a94:	f7fe feb0 	bl	80057f8 <_fwalk>
 8006a98:	2e09      	cmp	r6, #9
 8006a9a:	81a7      	strh	r7, [r4, #12]
 8006a9c:	d103      	bne.n	8006aa6 <__srefill_r+0xae>
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	f7fe fcff 	bl	80054a4 <__sflush_r>
 8006aa6:	6922      	ldr	r2, [r4, #16]
 8006aa8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006aaa:	6963      	ldr	r3, [r4, #20]
 8006aac:	6a21      	ldr	r1, [r4, #32]
 8006aae:	6022      	str	r2, [r4, #0]
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	47b0      	blx	r6
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	6060      	str	r0, [r4, #4]
 8006ab8:	dc1c      	bgt.n	8006af4 <__srefill_r+0xfc>
 8006aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006abe:	bf17      	itett	ne
 8006ac0:	2200      	movne	r2, #0
 8006ac2:	f043 0320 	orreq.w	r3, r3, #32
 8006ac6:	6062      	strne	r2, [r4, #4]
 8006ac8:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8006acc:	e7bc      	b.n	8006a48 <__srefill_r+0x50>
 8006ace:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ad0:	2900      	cmp	r1, #0
 8006ad2:	d0cd      	beq.n	8006a70 <__srefill_r+0x78>
 8006ad4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ad8:	4299      	cmp	r1, r3
 8006ada:	d002      	beq.n	8006ae2 <__srefill_r+0xea>
 8006adc:	4628      	mov	r0, r5
 8006ade:	f7fe ff37 	bl	8005950 <_free_r>
 8006ae2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ae4:	6063      	str	r3, [r4, #4]
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	6360      	str	r0, [r4, #52]	; 0x34
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d0c0      	beq.n	8006a70 <__srefill_r+0x78>
 8006aee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006af0:	6023      	str	r3, [r4, #0]
 8006af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006af4:	2000      	movs	r0, #0
 8006af6:	e7fc      	b.n	8006af2 <__srefill_r+0xfa>
 8006af8:	080083a4 	.word	0x080083a4
 8006afc:	080083c4 	.word	0x080083c4
 8006b00:	08008384 	.word	0x08008384
 8006b04:	0800827c 	.word	0x0800827c
 8006b08:	080069e5 	.word	0x080069e5

08006b0c <_sbrk_r>:
 8006b0c:	b538      	push	{r3, r4, r5, lr}
 8006b0e:	4d06      	ldr	r5, [pc, #24]	; (8006b28 <_sbrk_r+0x1c>)
 8006b10:	2300      	movs	r3, #0
 8006b12:	4604      	mov	r4, r0
 8006b14:	4608      	mov	r0, r1
 8006b16:	602b      	str	r3, [r5, #0]
 8006b18:	f7fb f870 	bl	8001bfc <_sbrk>
 8006b1c:	1c43      	adds	r3, r0, #1
 8006b1e:	d102      	bne.n	8006b26 <_sbrk_r+0x1a>
 8006b20:	682b      	ldr	r3, [r5, #0]
 8006b22:	b103      	cbz	r3, 8006b26 <_sbrk_r+0x1a>
 8006b24:	6023      	str	r3, [r4, #0]
 8006b26:	bd38      	pop	{r3, r4, r5, pc}
 8006b28:	200008c0 	.word	0x200008c0

08006b2c <__sccl>:
 8006b2c:	b570      	push	{r4, r5, r6, lr}
 8006b2e:	780b      	ldrb	r3, [r1, #0]
 8006b30:	4604      	mov	r4, r0
 8006b32:	2b5e      	cmp	r3, #94	; 0x5e
 8006b34:	bf0b      	itete	eq
 8006b36:	784b      	ldrbeq	r3, [r1, #1]
 8006b38:	1c48      	addne	r0, r1, #1
 8006b3a:	1c88      	addeq	r0, r1, #2
 8006b3c:	2200      	movne	r2, #0
 8006b3e:	bf08      	it	eq
 8006b40:	2201      	moveq	r2, #1
 8006b42:	1e61      	subs	r1, r4, #1
 8006b44:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006b48:	f801 2f01 	strb.w	r2, [r1, #1]!
 8006b4c:	42a9      	cmp	r1, r5
 8006b4e:	d1fb      	bne.n	8006b48 <__sccl+0x1c>
 8006b50:	b90b      	cbnz	r3, 8006b56 <__sccl+0x2a>
 8006b52:	3801      	subs	r0, #1
 8006b54:	bd70      	pop	{r4, r5, r6, pc}
 8006b56:	f082 0201 	eor.w	r2, r2, #1
 8006b5a:	54e2      	strb	r2, [r4, r3]
 8006b5c:	4605      	mov	r5, r0
 8006b5e:	4628      	mov	r0, r5
 8006b60:	f810 1b01 	ldrb.w	r1, [r0], #1
 8006b64:	292d      	cmp	r1, #45	; 0x2d
 8006b66:	d006      	beq.n	8006b76 <__sccl+0x4a>
 8006b68:	295d      	cmp	r1, #93	; 0x5d
 8006b6a:	d0f3      	beq.n	8006b54 <__sccl+0x28>
 8006b6c:	b909      	cbnz	r1, 8006b72 <__sccl+0x46>
 8006b6e:	4628      	mov	r0, r5
 8006b70:	e7f0      	b.n	8006b54 <__sccl+0x28>
 8006b72:	460b      	mov	r3, r1
 8006b74:	e7f1      	b.n	8006b5a <__sccl+0x2e>
 8006b76:	786e      	ldrb	r6, [r5, #1]
 8006b78:	2e5d      	cmp	r6, #93	; 0x5d
 8006b7a:	d0fa      	beq.n	8006b72 <__sccl+0x46>
 8006b7c:	42b3      	cmp	r3, r6
 8006b7e:	dcf8      	bgt.n	8006b72 <__sccl+0x46>
 8006b80:	3502      	adds	r5, #2
 8006b82:	4619      	mov	r1, r3
 8006b84:	3101      	adds	r1, #1
 8006b86:	428e      	cmp	r6, r1
 8006b88:	5462      	strb	r2, [r4, r1]
 8006b8a:	dcfb      	bgt.n	8006b84 <__sccl+0x58>
 8006b8c:	1af1      	subs	r1, r6, r3
 8006b8e:	3901      	subs	r1, #1
 8006b90:	1c58      	adds	r0, r3, #1
 8006b92:	42b3      	cmp	r3, r6
 8006b94:	bfa8      	it	ge
 8006b96:	2100      	movge	r1, #0
 8006b98:	1843      	adds	r3, r0, r1
 8006b9a:	e7e0      	b.n	8006b5e <__sccl+0x32>

08006b9c <__sread>:
 8006b9c:	b510      	push	{r4, lr}
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ba4:	f000 fafe 	bl	80071a4 <_read_r>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	bfab      	itete	ge
 8006bac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006bae:	89a3      	ldrhlt	r3, [r4, #12]
 8006bb0:	181b      	addge	r3, r3, r0
 8006bb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006bb6:	bfac      	ite	ge
 8006bb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006bba:	81a3      	strhlt	r3, [r4, #12]
 8006bbc:	bd10      	pop	{r4, pc}

08006bbe <__swrite>:
 8006bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc2:	461f      	mov	r7, r3
 8006bc4:	898b      	ldrh	r3, [r1, #12]
 8006bc6:	05db      	lsls	r3, r3, #23
 8006bc8:	4605      	mov	r5, r0
 8006bca:	460c      	mov	r4, r1
 8006bcc:	4616      	mov	r6, r2
 8006bce:	d505      	bpl.n	8006bdc <__swrite+0x1e>
 8006bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f000 fa6e 	bl	80070b8 <_lseek_r>
 8006bdc:	89a3      	ldrh	r3, [r4, #12]
 8006bde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006be2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006be6:	81a3      	strh	r3, [r4, #12]
 8006be8:	4632      	mov	r2, r6
 8006bea:	463b      	mov	r3, r7
 8006bec:	4628      	mov	r0, r5
 8006bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bf2:	f000 b9af 	b.w	8006f54 <_write_r>

08006bf6 <__sseek>:
 8006bf6:	b510      	push	{r4, lr}
 8006bf8:	460c      	mov	r4, r1
 8006bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bfe:	f000 fa5b 	bl	80070b8 <_lseek_r>
 8006c02:	1c43      	adds	r3, r0, #1
 8006c04:	89a3      	ldrh	r3, [r4, #12]
 8006c06:	bf15      	itete	ne
 8006c08:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c12:	81a3      	strheq	r3, [r4, #12]
 8006c14:	bf18      	it	ne
 8006c16:	81a3      	strhne	r3, [r4, #12]
 8006c18:	bd10      	pop	{r4, pc}

08006c1a <__sclose>:
 8006c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c1e:	f000 ba19 	b.w	8007054 <_close_r>
	...

08006c24 <_strtoul_l.constprop.0>:
 8006c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c28:	4f36      	ldr	r7, [pc, #216]	; (8006d04 <_strtoul_l.constprop.0+0xe0>)
 8006c2a:	4686      	mov	lr, r0
 8006c2c:	460d      	mov	r5, r1
 8006c2e:	4628      	mov	r0, r5
 8006c30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c34:	5de6      	ldrb	r6, [r4, r7]
 8006c36:	f016 0608 	ands.w	r6, r6, #8
 8006c3a:	d1f8      	bne.n	8006c2e <_strtoul_l.constprop.0+0xa>
 8006c3c:	2c2d      	cmp	r4, #45	; 0x2d
 8006c3e:	d12f      	bne.n	8006ca0 <_strtoul_l.constprop.0+0x7c>
 8006c40:	782c      	ldrb	r4, [r5, #0]
 8006c42:	2601      	movs	r6, #1
 8006c44:	1c85      	adds	r5, r0, #2
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d057      	beq.n	8006cfa <_strtoul_l.constprop.0+0xd6>
 8006c4a:	2b10      	cmp	r3, #16
 8006c4c:	d109      	bne.n	8006c62 <_strtoul_l.constprop.0+0x3e>
 8006c4e:	2c30      	cmp	r4, #48	; 0x30
 8006c50:	d107      	bne.n	8006c62 <_strtoul_l.constprop.0+0x3e>
 8006c52:	7828      	ldrb	r0, [r5, #0]
 8006c54:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006c58:	2858      	cmp	r0, #88	; 0x58
 8006c5a:	d149      	bne.n	8006cf0 <_strtoul_l.constprop.0+0xcc>
 8006c5c:	786c      	ldrb	r4, [r5, #1]
 8006c5e:	2310      	movs	r3, #16
 8006c60:	3502      	adds	r5, #2
 8006c62:	f04f 38ff 	mov.w	r8, #4294967295
 8006c66:	2700      	movs	r7, #0
 8006c68:	fbb8 f8f3 	udiv	r8, r8, r3
 8006c6c:	fb03 f908 	mul.w	r9, r3, r8
 8006c70:	ea6f 0909 	mvn.w	r9, r9
 8006c74:	4638      	mov	r0, r7
 8006c76:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006c7a:	f1bc 0f09 	cmp.w	ip, #9
 8006c7e:	d814      	bhi.n	8006caa <_strtoul_l.constprop.0+0x86>
 8006c80:	4664      	mov	r4, ip
 8006c82:	42a3      	cmp	r3, r4
 8006c84:	dd22      	ble.n	8006ccc <_strtoul_l.constprop.0+0xa8>
 8006c86:	2f00      	cmp	r7, #0
 8006c88:	db1d      	blt.n	8006cc6 <_strtoul_l.constprop.0+0xa2>
 8006c8a:	4580      	cmp	r8, r0
 8006c8c:	d31b      	bcc.n	8006cc6 <_strtoul_l.constprop.0+0xa2>
 8006c8e:	d101      	bne.n	8006c94 <_strtoul_l.constprop.0+0x70>
 8006c90:	45a1      	cmp	r9, r4
 8006c92:	db18      	blt.n	8006cc6 <_strtoul_l.constprop.0+0xa2>
 8006c94:	fb00 4003 	mla	r0, r0, r3, r4
 8006c98:	2701      	movs	r7, #1
 8006c9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c9e:	e7ea      	b.n	8006c76 <_strtoul_l.constprop.0+0x52>
 8006ca0:	2c2b      	cmp	r4, #43	; 0x2b
 8006ca2:	bf04      	itt	eq
 8006ca4:	782c      	ldrbeq	r4, [r5, #0]
 8006ca6:	1c85      	addeq	r5, r0, #2
 8006ca8:	e7cd      	b.n	8006c46 <_strtoul_l.constprop.0+0x22>
 8006caa:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006cae:	f1bc 0f19 	cmp.w	ip, #25
 8006cb2:	d801      	bhi.n	8006cb8 <_strtoul_l.constprop.0+0x94>
 8006cb4:	3c37      	subs	r4, #55	; 0x37
 8006cb6:	e7e4      	b.n	8006c82 <_strtoul_l.constprop.0+0x5e>
 8006cb8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006cbc:	f1bc 0f19 	cmp.w	ip, #25
 8006cc0:	d804      	bhi.n	8006ccc <_strtoul_l.constprop.0+0xa8>
 8006cc2:	3c57      	subs	r4, #87	; 0x57
 8006cc4:	e7dd      	b.n	8006c82 <_strtoul_l.constprop.0+0x5e>
 8006cc6:	f04f 37ff 	mov.w	r7, #4294967295
 8006cca:	e7e6      	b.n	8006c9a <_strtoul_l.constprop.0+0x76>
 8006ccc:	2f00      	cmp	r7, #0
 8006cce:	da07      	bge.n	8006ce0 <_strtoul_l.constprop.0+0xbc>
 8006cd0:	2322      	movs	r3, #34	; 0x22
 8006cd2:	f8ce 3000 	str.w	r3, [lr]
 8006cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8006cda:	b932      	cbnz	r2, 8006cea <_strtoul_l.constprop.0+0xc6>
 8006cdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ce0:	b106      	cbz	r6, 8006ce4 <_strtoul_l.constprop.0+0xc0>
 8006ce2:	4240      	negs	r0, r0
 8006ce4:	2a00      	cmp	r2, #0
 8006ce6:	d0f9      	beq.n	8006cdc <_strtoul_l.constprop.0+0xb8>
 8006ce8:	b107      	cbz	r7, 8006cec <_strtoul_l.constprop.0+0xc8>
 8006cea:	1e69      	subs	r1, r5, #1
 8006cec:	6011      	str	r1, [r2, #0]
 8006cee:	e7f5      	b.n	8006cdc <_strtoul_l.constprop.0+0xb8>
 8006cf0:	2430      	movs	r4, #48	; 0x30
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1b5      	bne.n	8006c62 <_strtoul_l.constprop.0+0x3e>
 8006cf6:	2308      	movs	r3, #8
 8006cf8:	e7b3      	b.n	8006c62 <_strtoul_l.constprop.0+0x3e>
 8006cfa:	2c30      	cmp	r4, #48	; 0x30
 8006cfc:	d0a9      	beq.n	8006c52 <_strtoul_l.constprop.0+0x2e>
 8006cfe:	230a      	movs	r3, #10
 8006d00:	e7af      	b.n	8006c62 <_strtoul_l.constprop.0+0x3e>
 8006d02:	bf00      	nop
 8006d04:	08008281 	.word	0x08008281

08006d08 <_strtoul_r>:
 8006d08:	f7ff bf8c 	b.w	8006c24 <_strtoul_l.constprop.0>

08006d0c <__submore>:
 8006d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d10:	460c      	mov	r4, r1
 8006d12:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006d14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d18:	4299      	cmp	r1, r3
 8006d1a:	d11d      	bne.n	8006d58 <__submore+0x4c>
 8006d1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006d20:	f7fe fe82 	bl	8005a28 <_malloc_r>
 8006d24:	b918      	cbnz	r0, 8006d2e <__submore+0x22>
 8006d26:	f04f 30ff 	mov.w	r0, #4294967295
 8006d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d32:	63a3      	str	r3, [r4, #56]	; 0x38
 8006d34:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006d38:	6360      	str	r0, [r4, #52]	; 0x34
 8006d3a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006d3e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006d42:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8006d46:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006d4a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8006d4e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8006d52:	6020      	str	r0, [r4, #0]
 8006d54:	2000      	movs	r0, #0
 8006d56:	e7e8      	b.n	8006d2a <__submore+0x1e>
 8006d58:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006d5a:	0077      	lsls	r7, r6, #1
 8006d5c:	463a      	mov	r2, r7
 8006d5e:	f000 f9f1 	bl	8007144 <_realloc_r>
 8006d62:	4605      	mov	r5, r0
 8006d64:	2800      	cmp	r0, #0
 8006d66:	d0de      	beq.n	8006d26 <__submore+0x1a>
 8006d68:	eb00 0806 	add.w	r8, r0, r6
 8006d6c:	4601      	mov	r1, r0
 8006d6e:	4632      	mov	r2, r6
 8006d70:	4640      	mov	r0, r8
 8006d72:	f000 f9b3 	bl	80070dc <memcpy>
 8006d76:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006d7a:	f8c4 8000 	str.w	r8, [r4]
 8006d7e:	e7e9      	b.n	8006d54 <__submore+0x48>

08006d80 <_ungetc_r>:
 8006d80:	b570      	push	{r4, r5, r6, lr}
 8006d82:	4614      	mov	r4, r2
 8006d84:	1c4a      	adds	r2, r1, #1
 8006d86:	4606      	mov	r6, r0
 8006d88:	460d      	mov	r5, r1
 8006d8a:	d103      	bne.n	8006d94 <_ungetc_r+0x14>
 8006d8c:	f04f 35ff 	mov.w	r5, #4294967295
 8006d90:	4628      	mov	r0, r5
 8006d92:	bd70      	pop	{r4, r5, r6, pc}
 8006d94:	b118      	cbz	r0, 8006d9e <_ungetc_r+0x1e>
 8006d96:	6983      	ldr	r3, [r0, #24]
 8006d98:	b90b      	cbnz	r3, 8006d9e <_ungetc_r+0x1e>
 8006d9a:	f7fe fcaf 	bl	80056fc <__sinit>
 8006d9e:	4b41      	ldr	r3, [pc, #260]	; (8006ea4 <_ungetc_r+0x124>)
 8006da0:	429c      	cmp	r4, r3
 8006da2:	d11d      	bne.n	8006de0 <_ungetc_r+0x60>
 8006da4:	6874      	ldr	r4, [r6, #4]
 8006da6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006da8:	07db      	lsls	r3, r3, #31
 8006daa:	d405      	bmi.n	8006db8 <_ungetc_r+0x38>
 8006dac:	89a3      	ldrh	r3, [r4, #12]
 8006dae:	0598      	lsls	r0, r3, #22
 8006db0:	d402      	bmi.n	8006db8 <_ungetc_r+0x38>
 8006db2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006db4:	f7fe fd5d 	bl	8005872 <__retarget_lock_acquire_recursive>
 8006db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dbc:	f023 0320 	bic.w	r3, r3, #32
 8006dc0:	0759      	lsls	r1, r3, #29
 8006dc2:	81a3      	strh	r3, [r4, #12]
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	d42d      	bmi.n	8006e24 <_ungetc_r+0xa4>
 8006dc8:	06d3      	lsls	r3, r2, #27
 8006dca:	d413      	bmi.n	8006df4 <_ungetc_r+0x74>
 8006dcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006dce:	07dd      	lsls	r5, r3, #31
 8006dd0:	d4dc      	bmi.n	8006d8c <_ungetc_r+0xc>
 8006dd2:	f412 7f00 	tst.w	r2, #512	; 0x200
 8006dd6:	d1d9      	bne.n	8006d8c <_ungetc_r+0xc>
 8006dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dda:	f7fe fd4b 	bl	8005874 <__retarget_lock_release_recursive>
 8006dde:	e7d5      	b.n	8006d8c <_ungetc_r+0xc>
 8006de0:	4b31      	ldr	r3, [pc, #196]	; (8006ea8 <_ungetc_r+0x128>)
 8006de2:	429c      	cmp	r4, r3
 8006de4:	d101      	bne.n	8006dea <_ungetc_r+0x6a>
 8006de6:	68b4      	ldr	r4, [r6, #8]
 8006de8:	e7dd      	b.n	8006da6 <_ungetc_r+0x26>
 8006dea:	4b30      	ldr	r3, [pc, #192]	; (8006eac <_ungetc_r+0x12c>)
 8006dec:	429c      	cmp	r4, r3
 8006dee:	bf08      	it	eq
 8006df0:	68f4      	ldreq	r4, [r6, #12]
 8006df2:	e7d8      	b.n	8006da6 <_ungetc_r+0x26>
 8006df4:	0710      	lsls	r0, r2, #28
 8006df6:	d511      	bpl.n	8006e1c <_ungetc_r+0x9c>
 8006df8:	4621      	mov	r1, r4
 8006dfa:	4630      	mov	r0, r6
 8006dfc:	f7fe fbd8 	bl	80055b0 <_fflush_r>
 8006e00:	b130      	cbz	r0, 8006e10 <_ungetc_r+0x90>
 8006e02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e04:	07d9      	lsls	r1, r3, #31
 8006e06:	d4c1      	bmi.n	8006d8c <_ungetc_r+0xc>
 8006e08:	89a3      	ldrh	r3, [r4, #12]
 8006e0a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006e0e:	e7e2      	b.n	8006dd6 <_ungetc_r+0x56>
 8006e10:	89a3      	ldrh	r3, [r4, #12]
 8006e12:	60a0      	str	r0, [r4, #8]
 8006e14:	f023 0308 	bic.w	r3, r3, #8
 8006e18:	81a3      	strh	r3, [r4, #12]
 8006e1a:	61a0      	str	r0, [r4, #24]
 8006e1c:	89a3      	ldrh	r3, [r4, #12]
 8006e1e:	f043 0304 	orr.w	r3, r3, #4
 8006e22:	81a3      	strh	r3, [r4, #12]
 8006e24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e26:	6862      	ldr	r2, [r4, #4]
 8006e28:	b2ed      	uxtb	r5, r5
 8006e2a:	b1d3      	cbz	r3, 8006e62 <_ungetc_r+0xe2>
 8006e2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	dc05      	bgt.n	8006e3e <_ungetc_r+0xbe>
 8006e32:	4621      	mov	r1, r4
 8006e34:	4630      	mov	r0, r6
 8006e36:	f7ff ff69 	bl	8006d0c <__submore>
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	d1e1      	bne.n	8006e02 <_ungetc_r+0x82>
 8006e3e:	6823      	ldr	r3, [r4, #0]
 8006e40:	1e5a      	subs	r2, r3, #1
 8006e42:	6022      	str	r2, [r4, #0]
 8006e44:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006e48:	6863      	ldr	r3, [r4, #4]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	6063      	str	r3, [r4, #4]
 8006e4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e50:	07da      	lsls	r2, r3, #31
 8006e52:	d49d      	bmi.n	8006d90 <_ungetc_r+0x10>
 8006e54:	89a3      	ldrh	r3, [r4, #12]
 8006e56:	059b      	lsls	r3, r3, #22
 8006e58:	d49a      	bmi.n	8006d90 <_ungetc_r+0x10>
 8006e5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e5c:	f7fe fd0a 	bl	8005874 <__retarget_lock_release_recursive>
 8006e60:	e796      	b.n	8006d90 <_ungetc_r+0x10>
 8006e62:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006e64:	6920      	ldr	r0, [r4, #16]
 8006e66:	6823      	ldr	r3, [r4, #0]
 8006e68:	f001 0101 	and.w	r1, r1, #1
 8006e6c:	b160      	cbz	r0, 8006e88 <_ungetc_r+0x108>
 8006e6e:	4298      	cmp	r0, r3
 8006e70:	d20a      	bcs.n	8006e88 <_ungetc_r+0x108>
 8006e72:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8006e76:	42a8      	cmp	r0, r5
 8006e78:	d106      	bne.n	8006e88 <_ungetc_r+0x108>
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	3201      	adds	r2, #1
 8006e7e:	6023      	str	r3, [r4, #0]
 8006e80:	6062      	str	r2, [r4, #4]
 8006e82:	2900      	cmp	r1, #0
 8006e84:	d184      	bne.n	8006d90 <_ungetc_r+0x10>
 8006e86:	e7e5      	b.n	8006e54 <_ungetc_r+0xd4>
 8006e88:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006e8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e90:	6363      	str	r3, [r4, #52]	; 0x34
 8006e92:	2303      	movs	r3, #3
 8006e94:	63a3      	str	r3, [r4, #56]	; 0x38
 8006e96:	4623      	mov	r3, r4
 8006e98:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006e9c:	6023      	str	r3, [r4, #0]
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	6063      	str	r3, [r4, #4]
 8006ea2:	e7ee      	b.n	8006e82 <_ungetc_r+0x102>
 8006ea4:	080083a4 	.word	0x080083a4
 8006ea8:	080083c4 	.word	0x080083c4
 8006eac:	08008384 	.word	0x08008384

08006eb0 <__swbuf_r>:
 8006eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eb2:	460e      	mov	r6, r1
 8006eb4:	4614      	mov	r4, r2
 8006eb6:	4605      	mov	r5, r0
 8006eb8:	b118      	cbz	r0, 8006ec2 <__swbuf_r+0x12>
 8006eba:	6983      	ldr	r3, [r0, #24]
 8006ebc:	b90b      	cbnz	r3, 8006ec2 <__swbuf_r+0x12>
 8006ebe:	f7fe fc1d 	bl	80056fc <__sinit>
 8006ec2:	4b21      	ldr	r3, [pc, #132]	; (8006f48 <__swbuf_r+0x98>)
 8006ec4:	429c      	cmp	r4, r3
 8006ec6:	d12b      	bne.n	8006f20 <__swbuf_r+0x70>
 8006ec8:	686c      	ldr	r4, [r5, #4]
 8006eca:	69a3      	ldr	r3, [r4, #24]
 8006ecc:	60a3      	str	r3, [r4, #8]
 8006ece:	89a3      	ldrh	r3, [r4, #12]
 8006ed0:	071a      	lsls	r2, r3, #28
 8006ed2:	d52f      	bpl.n	8006f34 <__swbuf_r+0x84>
 8006ed4:	6923      	ldr	r3, [r4, #16]
 8006ed6:	b36b      	cbz	r3, 8006f34 <__swbuf_r+0x84>
 8006ed8:	6923      	ldr	r3, [r4, #16]
 8006eda:	6820      	ldr	r0, [r4, #0]
 8006edc:	1ac0      	subs	r0, r0, r3
 8006ede:	6963      	ldr	r3, [r4, #20]
 8006ee0:	b2f6      	uxtb	r6, r6
 8006ee2:	4283      	cmp	r3, r0
 8006ee4:	4637      	mov	r7, r6
 8006ee6:	dc04      	bgt.n	8006ef2 <__swbuf_r+0x42>
 8006ee8:	4621      	mov	r1, r4
 8006eea:	4628      	mov	r0, r5
 8006eec:	f7fe fb60 	bl	80055b0 <_fflush_r>
 8006ef0:	bb30      	cbnz	r0, 8006f40 <__swbuf_r+0x90>
 8006ef2:	68a3      	ldr	r3, [r4, #8]
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	60a3      	str	r3, [r4, #8]
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	6022      	str	r2, [r4, #0]
 8006efe:	701e      	strb	r6, [r3, #0]
 8006f00:	6963      	ldr	r3, [r4, #20]
 8006f02:	3001      	adds	r0, #1
 8006f04:	4283      	cmp	r3, r0
 8006f06:	d004      	beq.n	8006f12 <__swbuf_r+0x62>
 8006f08:	89a3      	ldrh	r3, [r4, #12]
 8006f0a:	07db      	lsls	r3, r3, #31
 8006f0c:	d506      	bpl.n	8006f1c <__swbuf_r+0x6c>
 8006f0e:	2e0a      	cmp	r6, #10
 8006f10:	d104      	bne.n	8006f1c <__swbuf_r+0x6c>
 8006f12:	4621      	mov	r1, r4
 8006f14:	4628      	mov	r0, r5
 8006f16:	f7fe fb4b 	bl	80055b0 <_fflush_r>
 8006f1a:	b988      	cbnz	r0, 8006f40 <__swbuf_r+0x90>
 8006f1c:	4638      	mov	r0, r7
 8006f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f20:	4b0a      	ldr	r3, [pc, #40]	; (8006f4c <__swbuf_r+0x9c>)
 8006f22:	429c      	cmp	r4, r3
 8006f24:	d101      	bne.n	8006f2a <__swbuf_r+0x7a>
 8006f26:	68ac      	ldr	r4, [r5, #8]
 8006f28:	e7cf      	b.n	8006eca <__swbuf_r+0x1a>
 8006f2a:	4b09      	ldr	r3, [pc, #36]	; (8006f50 <__swbuf_r+0xa0>)
 8006f2c:	429c      	cmp	r4, r3
 8006f2e:	bf08      	it	eq
 8006f30:	68ec      	ldreq	r4, [r5, #12]
 8006f32:	e7ca      	b.n	8006eca <__swbuf_r+0x1a>
 8006f34:	4621      	mov	r1, r4
 8006f36:	4628      	mov	r0, r5
 8006f38:	f000 f81e 	bl	8006f78 <__swsetup_r>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	d0cb      	beq.n	8006ed8 <__swbuf_r+0x28>
 8006f40:	f04f 37ff 	mov.w	r7, #4294967295
 8006f44:	e7ea      	b.n	8006f1c <__swbuf_r+0x6c>
 8006f46:	bf00      	nop
 8006f48:	080083a4 	.word	0x080083a4
 8006f4c:	080083c4 	.word	0x080083c4
 8006f50:	08008384 	.word	0x08008384

08006f54 <_write_r>:
 8006f54:	b538      	push	{r3, r4, r5, lr}
 8006f56:	4d07      	ldr	r5, [pc, #28]	; (8006f74 <_write_r+0x20>)
 8006f58:	4604      	mov	r4, r0
 8006f5a:	4608      	mov	r0, r1
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	2200      	movs	r2, #0
 8006f60:	602a      	str	r2, [r5, #0]
 8006f62:	461a      	mov	r2, r3
 8006f64:	f7fa fbb0 	bl	80016c8 <_write>
 8006f68:	1c43      	adds	r3, r0, #1
 8006f6a:	d102      	bne.n	8006f72 <_write_r+0x1e>
 8006f6c:	682b      	ldr	r3, [r5, #0]
 8006f6e:	b103      	cbz	r3, 8006f72 <_write_r+0x1e>
 8006f70:	6023      	str	r3, [r4, #0]
 8006f72:	bd38      	pop	{r3, r4, r5, pc}
 8006f74:	200008c0 	.word	0x200008c0

08006f78 <__swsetup_r>:
 8006f78:	4b32      	ldr	r3, [pc, #200]	; (8007044 <__swsetup_r+0xcc>)
 8006f7a:	b570      	push	{r4, r5, r6, lr}
 8006f7c:	681d      	ldr	r5, [r3, #0]
 8006f7e:	4606      	mov	r6, r0
 8006f80:	460c      	mov	r4, r1
 8006f82:	b125      	cbz	r5, 8006f8e <__swsetup_r+0x16>
 8006f84:	69ab      	ldr	r3, [r5, #24]
 8006f86:	b913      	cbnz	r3, 8006f8e <__swsetup_r+0x16>
 8006f88:	4628      	mov	r0, r5
 8006f8a:	f7fe fbb7 	bl	80056fc <__sinit>
 8006f8e:	4b2e      	ldr	r3, [pc, #184]	; (8007048 <__swsetup_r+0xd0>)
 8006f90:	429c      	cmp	r4, r3
 8006f92:	d10f      	bne.n	8006fb4 <__swsetup_r+0x3c>
 8006f94:	686c      	ldr	r4, [r5, #4]
 8006f96:	89a3      	ldrh	r3, [r4, #12]
 8006f98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f9c:	0719      	lsls	r1, r3, #28
 8006f9e:	d42c      	bmi.n	8006ffa <__swsetup_r+0x82>
 8006fa0:	06dd      	lsls	r5, r3, #27
 8006fa2:	d411      	bmi.n	8006fc8 <__swsetup_r+0x50>
 8006fa4:	2309      	movs	r3, #9
 8006fa6:	6033      	str	r3, [r6, #0]
 8006fa8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006fac:	81a3      	strh	r3, [r4, #12]
 8006fae:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb2:	e03e      	b.n	8007032 <__swsetup_r+0xba>
 8006fb4:	4b25      	ldr	r3, [pc, #148]	; (800704c <__swsetup_r+0xd4>)
 8006fb6:	429c      	cmp	r4, r3
 8006fb8:	d101      	bne.n	8006fbe <__swsetup_r+0x46>
 8006fba:	68ac      	ldr	r4, [r5, #8]
 8006fbc:	e7eb      	b.n	8006f96 <__swsetup_r+0x1e>
 8006fbe:	4b24      	ldr	r3, [pc, #144]	; (8007050 <__swsetup_r+0xd8>)
 8006fc0:	429c      	cmp	r4, r3
 8006fc2:	bf08      	it	eq
 8006fc4:	68ec      	ldreq	r4, [r5, #12]
 8006fc6:	e7e6      	b.n	8006f96 <__swsetup_r+0x1e>
 8006fc8:	0758      	lsls	r0, r3, #29
 8006fca:	d512      	bpl.n	8006ff2 <__swsetup_r+0x7a>
 8006fcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fce:	b141      	cbz	r1, 8006fe2 <__swsetup_r+0x6a>
 8006fd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fd4:	4299      	cmp	r1, r3
 8006fd6:	d002      	beq.n	8006fde <__swsetup_r+0x66>
 8006fd8:	4630      	mov	r0, r6
 8006fda:	f7fe fcb9 	bl	8005950 <_free_r>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	6363      	str	r3, [r4, #52]	; 0x34
 8006fe2:	89a3      	ldrh	r3, [r4, #12]
 8006fe4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006fe8:	81a3      	strh	r3, [r4, #12]
 8006fea:	2300      	movs	r3, #0
 8006fec:	6063      	str	r3, [r4, #4]
 8006fee:	6923      	ldr	r3, [r4, #16]
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	89a3      	ldrh	r3, [r4, #12]
 8006ff4:	f043 0308 	orr.w	r3, r3, #8
 8006ff8:	81a3      	strh	r3, [r4, #12]
 8006ffa:	6923      	ldr	r3, [r4, #16]
 8006ffc:	b94b      	cbnz	r3, 8007012 <__swsetup_r+0x9a>
 8006ffe:	89a3      	ldrh	r3, [r4, #12]
 8007000:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007008:	d003      	beq.n	8007012 <__swsetup_r+0x9a>
 800700a:	4621      	mov	r1, r4
 800700c:	4630      	mov	r0, r6
 800700e:	f7fe fc57 	bl	80058c0 <__smakebuf_r>
 8007012:	89a0      	ldrh	r0, [r4, #12]
 8007014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007018:	f010 0301 	ands.w	r3, r0, #1
 800701c:	d00a      	beq.n	8007034 <__swsetup_r+0xbc>
 800701e:	2300      	movs	r3, #0
 8007020:	60a3      	str	r3, [r4, #8]
 8007022:	6963      	ldr	r3, [r4, #20]
 8007024:	425b      	negs	r3, r3
 8007026:	61a3      	str	r3, [r4, #24]
 8007028:	6923      	ldr	r3, [r4, #16]
 800702a:	b943      	cbnz	r3, 800703e <__swsetup_r+0xc6>
 800702c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007030:	d1ba      	bne.n	8006fa8 <__swsetup_r+0x30>
 8007032:	bd70      	pop	{r4, r5, r6, pc}
 8007034:	0781      	lsls	r1, r0, #30
 8007036:	bf58      	it	pl
 8007038:	6963      	ldrpl	r3, [r4, #20]
 800703a:	60a3      	str	r3, [r4, #8]
 800703c:	e7f4      	b.n	8007028 <__swsetup_r+0xb0>
 800703e:	2000      	movs	r0, #0
 8007040:	e7f7      	b.n	8007032 <__swsetup_r+0xba>
 8007042:	bf00      	nop
 8007044:	2000000c 	.word	0x2000000c
 8007048:	080083a4 	.word	0x080083a4
 800704c:	080083c4 	.word	0x080083c4
 8007050:	08008384 	.word	0x08008384

08007054 <_close_r>:
 8007054:	b538      	push	{r3, r4, r5, lr}
 8007056:	4d06      	ldr	r5, [pc, #24]	; (8007070 <_close_r+0x1c>)
 8007058:	2300      	movs	r3, #0
 800705a:	4604      	mov	r4, r0
 800705c:	4608      	mov	r0, r1
 800705e:	602b      	str	r3, [r5, #0]
 8007060:	f7fa fb5e 	bl	8001720 <_close>
 8007064:	1c43      	adds	r3, r0, #1
 8007066:	d102      	bne.n	800706e <_close_r+0x1a>
 8007068:	682b      	ldr	r3, [r5, #0]
 800706a:	b103      	cbz	r3, 800706e <_close_r+0x1a>
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	bd38      	pop	{r3, r4, r5, pc}
 8007070:	200008c0 	.word	0x200008c0

08007074 <_fstat_r>:
 8007074:	b538      	push	{r3, r4, r5, lr}
 8007076:	4d07      	ldr	r5, [pc, #28]	; (8007094 <_fstat_r+0x20>)
 8007078:	2300      	movs	r3, #0
 800707a:	4604      	mov	r4, r0
 800707c:	4608      	mov	r0, r1
 800707e:	4611      	mov	r1, r2
 8007080:	602b      	str	r3, [r5, #0]
 8007082:	f7fa fb9d 	bl	80017c0 <_fstat>
 8007086:	1c43      	adds	r3, r0, #1
 8007088:	d102      	bne.n	8007090 <_fstat_r+0x1c>
 800708a:	682b      	ldr	r3, [r5, #0]
 800708c:	b103      	cbz	r3, 8007090 <_fstat_r+0x1c>
 800708e:	6023      	str	r3, [r4, #0]
 8007090:	bd38      	pop	{r3, r4, r5, pc}
 8007092:	bf00      	nop
 8007094:	200008c0 	.word	0x200008c0

08007098 <_isatty_r>:
 8007098:	b538      	push	{r3, r4, r5, lr}
 800709a:	4d06      	ldr	r5, [pc, #24]	; (80070b4 <_isatty_r+0x1c>)
 800709c:	2300      	movs	r3, #0
 800709e:	4604      	mov	r4, r0
 80070a0:	4608      	mov	r0, r1
 80070a2:	602b      	str	r3, [r5, #0]
 80070a4:	f7fa fafa 	bl	800169c <_isatty>
 80070a8:	1c43      	adds	r3, r0, #1
 80070aa:	d102      	bne.n	80070b2 <_isatty_r+0x1a>
 80070ac:	682b      	ldr	r3, [r5, #0]
 80070ae:	b103      	cbz	r3, 80070b2 <_isatty_r+0x1a>
 80070b0:	6023      	str	r3, [r4, #0]
 80070b2:	bd38      	pop	{r3, r4, r5, pc}
 80070b4:	200008c0 	.word	0x200008c0

080070b8 <_lseek_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4d07      	ldr	r5, [pc, #28]	; (80070d8 <_lseek_r+0x20>)
 80070bc:	4604      	mov	r4, r0
 80070be:	4608      	mov	r0, r1
 80070c0:	4611      	mov	r1, r2
 80070c2:	2200      	movs	r2, #0
 80070c4:	602a      	str	r2, [r5, #0]
 80070c6:	461a      	mov	r2, r3
 80070c8:	f7fa fb41 	bl	800174e <_lseek>
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	d102      	bne.n	80070d6 <_lseek_r+0x1e>
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	b103      	cbz	r3, 80070d6 <_lseek_r+0x1e>
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	bd38      	pop	{r3, r4, r5, pc}
 80070d8:	200008c0 	.word	0x200008c0

080070dc <memcpy>:
 80070dc:	440a      	add	r2, r1
 80070de:	4291      	cmp	r1, r2
 80070e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80070e4:	d100      	bne.n	80070e8 <memcpy+0xc>
 80070e6:	4770      	bx	lr
 80070e8:	b510      	push	{r4, lr}
 80070ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070f2:	4291      	cmp	r1, r2
 80070f4:	d1f9      	bne.n	80070ea <memcpy+0xe>
 80070f6:	bd10      	pop	{r4, pc}

080070f8 <memmove>:
 80070f8:	4288      	cmp	r0, r1
 80070fa:	b510      	push	{r4, lr}
 80070fc:	eb01 0402 	add.w	r4, r1, r2
 8007100:	d902      	bls.n	8007108 <memmove+0x10>
 8007102:	4284      	cmp	r4, r0
 8007104:	4623      	mov	r3, r4
 8007106:	d807      	bhi.n	8007118 <memmove+0x20>
 8007108:	1e43      	subs	r3, r0, #1
 800710a:	42a1      	cmp	r1, r4
 800710c:	d008      	beq.n	8007120 <memmove+0x28>
 800710e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007112:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007116:	e7f8      	b.n	800710a <memmove+0x12>
 8007118:	4402      	add	r2, r0
 800711a:	4601      	mov	r1, r0
 800711c:	428a      	cmp	r2, r1
 800711e:	d100      	bne.n	8007122 <memmove+0x2a>
 8007120:	bd10      	pop	{r4, pc}
 8007122:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007126:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800712a:	e7f7      	b.n	800711c <memmove+0x24>

0800712c <__malloc_lock>:
 800712c:	4801      	ldr	r0, [pc, #4]	; (8007134 <__malloc_lock+0x8>)
 800712e:	f7fe bba0 	b.w	8005872 <__retarget_lock_acquire_recursive>
 8007132:	bf00      	nop
 8007134:	200008b4 	.word	0x200008b4

08007138 <__malloc_unlock>:
 8007138:	4801      	ldr	r0, [pc, #4]	; (8007140 <__malloc_unlock+0x8>)
 800713a:	f7fe bb9b 	b.w	8005874 <__retarget_lock_release_recursive>
 800713e:	bf00      	nop
 8007140:	200008b4 	.word	0x200008b4

08007144 <_realloc_r>:
 8007144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007148:	4680      	mov	r8, r0
 800714a:	4614      	mov	r4, r2
 800714c:	460e      	mov	r6, r1
 800714e:	b921      	cbnz	r1, 800715a <_realloc_r+0x16>
 8007150:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007154:	4611      	mov	r1, r2
 8007156:	f7fe bc67 	b.w	8005a28 <_malloc_r>
 800715a:	b92a      	cbnz	r2, 8007168 <_realloc_r+0x24>
 800715c:	f7fe fbf8 	bl	8005950 <_free_r>
 8007160:	4625      	mov	r5, r4
 8007162:	4628      	mov	r0, r5
 8007164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007168:	f000 f82e 	bl	80071c8 <_malloc_usable_size_r>
 800716c:	4284      	cmp	r4, r0
 800716e:	4607      	mov	r7, r0
 8007170:	d802      	bhi.n	8007178 <_realloc_r+0x34>
 8007172:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007176:	d812      	bhi.n	800719e <_realloc_r+0x5a>
 8007178:	4621      	mov	r1, r4
 800717a:	4640      	mov	r0, r8
 800717c:	f7fe fc54 	bl	8005a28 <_malloc_r>
 8007180:	4605      	mov	r5, r0
 8007182:	2800      	cmp	r0, #0
 8007184:	d0ed      	beq.n	8007162 <_realloc_r+0x1e>
 8007186:	42bc      	cmp	r4, r7
 8007188:	4622      	mov	r2, r4
 800718a:	4631      	mov	r1, r6
 800718c:	bf28      	it	cs
 800718e:	463a      	movcs	r2, r7
 8007190:	f7ff ffa4 	bl	80070dc <memcpy>
 8007194:	4631      	mov	r1, r6
 8007196:	4640      	mov	r0, r8
 8007198:	f7fe fbda 	bl	8005950 <_free_r>
 800719c:	e7e1      	b.n	8007162 <_realloc_r+0x1e>
 800719e:	4635      	mov	r5, r6
 80071a0:	e7df      	b.n	8007162 <_realloc_r+0x1e>
	...

080071a4 <_read_r>:
 80071a4:	b538      	push	{r3, r4, r5, lr}
 80071a6:	4d07      	ldr	r5, [pc, #28]	; (80071c4 <_read_r+0x20>)
 80071a8:	4604      	mov	r4, r0
 80071aa:	4608      	mov	r0, r1
 80071ac:	4611      	mov	r1, r2
 80071ae:	2200      	movs	r2, #0
 80071b0:	602a      	str	r2, [r5, #0]
 80071b2:	461a      	mov	r2, r3
 80071b4:	f7fa fadc 	bl	8001770 <_read>
 80071b8:	1c43      	adds	r3, r0, #1
 80071ba:	d102      	bne.n	80071c2 <_read_r+0x1e>
 80071bc:	682b      	ldr	r3, [r5, #0]
 80071be:	b103      	cbz	r3, 80071c2 <_read_r+0x1e>
 80071c0:	6023      	str	r3, [r4, #0]
 80071c2:	bd38      	pop	{r3, r4, r5, pc}
 80071c4:	200008c0 	.word	0x200008c0

080071c8 <_malloc_usable_size_r>:
 80071c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071cc:	1f18      	subs	r0, r3, #4
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	bfbc      	itt	lt
 80071d2:	580b      	ldrlt	r3, [r1, r0]
 80071d4:	18c0      	addlt	r0, r0, r3
 80071d6:	4770      	bx	lr

080071d8 <_init>:
 80071d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071da:	bf00      	nop
 80071dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071de:	bc08      	pop	{r3}
 80071e0:	469e      	mov	lr, r3
 80071e2:	4770      	bx	lr

080071e4 <_fini>:
 80071e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e6:	bf00      	nop
 80071e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ea:	bc08      	pop	{r3}
 80071ec:	469e      	mov	lr, r3
 80071ee:	4770      	bx	lr
